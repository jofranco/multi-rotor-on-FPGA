// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "RC_RECEIVER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic RC_RECEIVER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic RC_RECEIVER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state1 = "1";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state2 = "10";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state3 = "100";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state4 = "1000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state5 = "10000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state6 = "100000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state7 = "1000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state8 = "10000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state9 = "100000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state10 = "1000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state11 = "10000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state12 = "100000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<51> RC_RECEIVER::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> RC_RECEIVER::ap_const_lv8_0 = "00000000";
const sc_lv<11> RC_RECEIVER::ap_const_lv11_0 = "00000000000";
const int RC_RECEIVER::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1 = "1";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_3 = "11";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2 = "10";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_19 = "11001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1A = "11010";
const sc_lv<1> RC_RECEIVER::ap_const_lv1_1 = "1";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1C = "11100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1E = "11110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_20 = "100000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_22 = "100010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_24 = "100100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_26 = "100110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_28 = "101000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2A = "101010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2C = "101100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2E = "101110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_30 = "110000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1B = "11011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1D = "11101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_1F = "11111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_21 = "100001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_23 = "100011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_25 = "100101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_27 = "100111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_29 = "101001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2B = "101011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2D = "101101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_2F = "101111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_4 = "100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_5 = "101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_6 = "110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_7 = "111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_8 = "1000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_9 = "1001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_A = "1010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_B = "1011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_C = "1100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_D = "1101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_E = "1110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_F = "1111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_10 = "10000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_11 = "10001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_12 = "10010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_13 = "10011";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_14 = "10100";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_15 = "10101";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_16 = "10110";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_17 = "10111";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_18 = "11000";
const sc_lv<1> RC_RECEIVER::ap_const_lv1_0 = "0";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_19 = "11001";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_1 = "1";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_1A = "11010";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_2 = "10";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_1B = "11011";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_3 = "11";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_4 = "100";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_5 = "101";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_6 = "110";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_7 = "111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_8 = "1000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_9 = "1001";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_A = "1010";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_B = "1011";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_C = "1100";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_D = "1101";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_E = "1110";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_F = "1111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_10 = "10000";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_11 = "10001";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_12 = "10010";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_13 = "10011";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_14 = "10100";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_15 = "10101";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_16 = "10110";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_17 = "10111";
const sc_lv<64> RC_RECEIVER::ap_const_lv64_18 = "11000";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_31 = "110001";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_32 = "110010";
const sc_lv<32> RC_RECEIVER::ap_const_lv32_45 = "1000101";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_1 = "1";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_2 = "10";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_0 = "00000";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_3 = "11";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_4 = "100";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_5 = "101";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_6 = "110";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_7 = "111";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_8 = "1000";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_9 = "1001";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_A = "1010";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_B = "1011";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_C = "1100";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_D = "1101";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_E = "1110";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_F = "1111";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_10 = "10000";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_11 = "10001";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_12 = "10010";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_13 = "10011";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_14 = "10100";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_15 = "10101";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_16 = "10110";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_17 = "10111";
const sc_lv<5> RC_RECEIVER::ap_const_lv5_18 = "11000";
const sc_lv<8> RC_RECEIVER::ap_const_lv8_F = "1111";
const sc_lv<11> RC_RECEIVER::ap_const_lv11_7FF = "11111111111";
const sc_lv<8> RC_RECEIVER::ap_const_lv8_1 = "1";
const sc_lv<2> RC_RECEIVER::ap_const_lv2_0 = "00";
const bool RC_RECEIVER::ap_const_boolean_1 = true;

RC_RECEIVER::RC_RECEIVER(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lookuptable_U = new RC_RECEIVER_lookubkb("lookuptable_U");
    lookuptable_U->clk(ap_clk);
    lookuptable_U->reset(ap_rst_n_inv);
    lookuptable_U->address0(lookuptable_address0);
    lookuptable_U->ce0(lookuptable_ce0);
    lookuptable_U->q0(lookuptable_q0);
    buffer_r_U = new RC_RECEIVER_buffecud("buffer_r_U");
    buffer_r_U->clk(ap_clk);
    buffer_r_U->reset(ap_rst_n_inv);
    buffer_r_U->address0(buffer_r_address0);
    buffer_r_U->ce0(buffer_r_ce0);
    buffer_r_U->we0(buffer_r_we0);
    buffer_r_U->d0(buffer_r_d0);
    buffer_r_U->q0(buffer_r_q0);
    buffer_r_U->address1(buffer_r_address1);
    buffer_r_U->ce1(buffer_r_ce1);
    buffer_r_U->we1(buffer_r_we1);
    buffer_r_U->d1(buffer_r_d1);
    buffer_r_U->q1(buffer_r_q1);
    RC_RECEIVER_CTRL_s_axi_U = new RC_RECEIVER_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>("RC_RECEIVER_CTRL_s_axi_U");
    RC_RECEIVER_CTRL_s_axi_U->AWVALID(s_axi_CTRL_AWVALID);
    RC_RECEIVER_CTRL_s_axi_U->AWREADY(s_axi_CTRL_AWREADY);
    RC_RECEIVER_CTRL_s_axi_U->AWADDR(s_axi_CTRL_AWADDR);
    RC_RECEIVER_CTRL_s_axi_U->WVALID(s_axi_CTRL_WVALID);
    RC_RECEIVER_CTRL_s_axi_U->WREADY(s_axi_CTRL_WREADY);
    RC_RECEIVER_CTRL_s_axi_U->WDATA(s_axi_CTRL_WDATA);
    RC_RECEIVER_CTRL_s_axi_U->WSTRB(s_axi_CTRL_WSTRB);
    RC_RECEIVER_CTRL_s_axi_U->ARVALID(s_axi_CTRL_ARVALID);
    RC_RECEIVER_CTRL_s_axi_U->ARREADY(s_axi_CTRL_ARREADY);
    RC_RECEIVER_CTRL_s_axi_U->ARADDR(s_axi_CTRL_ARADDR);
    RC_RECEIVER_CTRL_s_axi_U->RVALID(s_axi_CTRL_RVALID);
    RC_RECEIVER_CTRL_s_axi_U->RREADY(s_axi_CTRL_RREADY);
    RC_RECEIVER_CTRL_s_axi_U->RDATA(s_axi_CTRL_RDATA);
    RC_RECEIVER_CTRL_s_axi_U->RRESP(s_axi_CTRL_RRESP);
    RC_RECEIVER_CTRL_s_axi_U->BVALID(s_axi_CTRL_BVALID);
    RC_RECEIVER_CTRL_s_axi_U->BREADY(s_axi_CTRL_BREADY);
    RC_RECEIVER_CTRL_s_axi_U->BRESP(s_axi_CTRL_BRESP);
    RC_RECEIVER_CTRL_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_CTRL_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_CTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_CTRL_s_axi_U->ap_start(ap_start);
    RC_RECEIVER_CTRL_s_axi_U->interrupt(interrupt);
    RC_RECEIVER_CTRL_s_axi_U->ap_ready(ap_ready);
    RC_RECEIVER_CTRL_s_axi_U->ap_done(ap_done);
    RC_RECEIVER_CTRL_s_axi_U->ap_idle(ap_idle);
    RC_RECEIVER_CTRL_s_axi_U->SBUS_data_address0(SBUS_data_address0);
    RC_RECEIVER_CTRL_s_axi_U->SBUS_data_ce0(SBUS_data_ce0);
    RC_RECEIVER_CTRL_s_axi_U->SBUS_data_q0(SBUS_data_q0);
    RC_RECEIVER_TEST_CHAN_s_axi_U = new RC_RECEIVER_TEST_CHAN_s_axi<C_S_AXI_TEST_CHAN_ADDR_WIDTH,C_S_AXI_TEST_CHAN_DATA_WIDTH>("RC_RECEIVER_TEST_CHAN_s_axi_U");
    RC_RECEIVER_TEST_CHAN_s_axi_U->AWVALID(s_axi_TEST_CHAN_AWVALID);
    RC_RECEIVER_TEST_CHAN_s_axi_U->AWREADY(s_axi_TEST_CHAN_AWREADY);
    RC_RECEIVER_TEST_CHAN_s_axi_U->AWADDR(s_axi_TEST_CHAN_AWADDR);
    RC_RECEIVER_TEST_CHAN_s_axi_U->WVALID(s_axi_TEST_CHAN_WVALID);
    RC_RECEIVER_TEST_CHAN_s_axi_U->WREADY(s_axi_TEST_CHAN_WREADY);
    RC_RECEIVER_TEST_CHAN_s_axi_U->WDATA(s_axi_TEST_CHAN_WDATA);
    RC_RECEIVER_TEST_CHAN_s_axi_U->WSTRB(s_axi_TEST_CHAN_WSTRB);
    RC_RECEIVER_TEST_CHAN_s_axi_U->ARVALID(s_axi_TEST_CHAN_ARVALID);
    RC_RECEIVER_TEST_CHAN_s_axi_U->ARREADY(s_axi_TEST_CHAN_ARREADY);
    RC_RECEIVER_TEST_CHAN_s_axi_U->ARADDR(s_axi_TEST_CHAN_ARADDR);
    RC_RECEIVER_TEST_CHAN_s_axi_U->RVALID(s_axi_TEST_CHAN_RVALID);
    RC_RECEIVER_TEST_CHAN_s_axi_U->RREADY(s_axi_TEST_CHAN_RREADY);
    RC_RECEIVER_TEST_CHAN_s_axi_U->RDATA(s_axi_TEST_CHAN_RDATA);
    RC_RECEIVER_TEST_CHAN_s_axi_U->RRESP(s_axi_TEST_CHAN_RRESP);
    RC_RECEIVER_TEST_CHAN_s_axi_U->BVALID(s_axi_TEST_CHAN_BVALID);
    RC_RECEIVER_TEST_CHAN_s_axi_U->BREADY(s_axi_TEST_CHAN_BREADY);
    RC_RECEIVER_TEST_CHAN_s_axi_U->BRESP(s_axi_TEST_CHAN_BRESP);
    RC_RECEIVER_TEST_CHAN_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_TEST_CHAN_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_TEST_CHAN_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_TEST_CHAN_s_axi_U->channel_data_address0(channel_data_address0);
    RC_RECEIVER_TEST_CHAN_s_axi_U->channel_data_ce0(channel_data_ce0);
    RC_RECEIVER_TEST_CHAN_s_axi_U->channel_data_we0(channel_data_we0);
    RC_RECEIVER_TEST_CHAN_s_axi_U->channel_data_d0(channel_data_d0);
    RC_RECEIVER_TEST_NORM_s_axi_U = new RC_RECEIVER_TEST_NORM_s_axi<C_S_AXI_TEST_NORM_ADDR_WIDTH,C_S_AXI_TEST_NORM_DATA_WIDTH>("RC_RECEIVER_TEST_NORM_s_axi_U");
    RC_RECEIVER_TEST_NORM_s_axi_U->AWVALID(s_axi_TEST_NORM_AWVALID);
    RC_RECEIVER_TEST_NORM_s_axi_U->AWREADY(s_axi_TEST_NORM_AWREADY);
    RC_RECEIVER_TEST_NORM_s_axi_U->AWADDR(s_axi_TEST_NORM_AWADDR);
    RC_RECEIVER_TEST_NORM_s_axi_U->WVALID(s_axi_TEST_NORM_WVALID);
    RC_RECEIVER_TEST_NORM_s_axi_U->WREADY(s_axi_TEST_NORM_WREADY);
    RC_RECEIVER_TEST_NORM_s_axi_U->WDATA(s_axi_TEST_NORM_WDATA);
    RC_RECEIVER_TEST_NORM_s_axi_U->WSTRB(s_axi_TEST_NORM_WSTRB);
    RC_RECEIVER_TEST_NORM_s_axi_U->ARVALID(s_axi_TEST_NORM_ARVALID);
    RC_RECEIVER_TEST_NORM_s_axi_U->ARREADY(s_axi_TEST_NORM_ARREADY);
    RC_RECEIVER_TEST_NORM_s_axi_U->ARADDR(s_axi_TEST_NORM_ARADDR);
    RC_RECEIVER_TEST_NORM_s_axi_U->RVALID(s_axi_TEST_NORM_RVALID);
    RC_RECEIVER_TEST_NORM_s_axi_U->RREADY(s_axi_TEST_NORM_RREADY);
    RC_RECEIVER_TEST_NORM_s_axi_U->RDATA(s_axi_TEST_NORM_RDATA);
    RC_RECEIVER_TEST_NORM_s_axi_U->RRESP(s_axi_TEST_NORM_RRESP);
    RC_RECEIVER_TEST_NORM_s_axi_U->BVALID(s_axi_TEST_NORM_BVALID);
    RC_RECEIVER_TEST_NORM_s_axi_U->BREADY(s_axi_TEST_NORM_BREADY);
    RC_RECEIVER_TEST_NORM_s_axi_U->BRESP(s_axi_TEST_NORM_BRESP);
    RC_RECEIVER_TEST_NORM_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_TEST_NORM_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_TEST_NORM_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_TEST_NORM_s_axi_U->norm_out_address0(norm_out_address0);
    RC_RECEIVER_TEST_NORM_s_axi_U->norm_out_ce0(norm_out_ce0);
    RC_RECEIVER_TEST_NORM_s_axi_U->norm_out_we0(norm_out_we0);
    RC_RECEIVER_TEST_NORM_s_axi_U->norm_out_d0(norm_out_d0);
    RC_RECEIVER_TEST_REV_s_axi_U = new RC_RECEIVER_TEST_REV_s_axi<C_S_AXI_TEST_REV_ADDR_WIDTH,C_S_AXI_TEST_REV_DATA_WIDTH>("RC_RECEIVER_TEST_REV_s_axi_U");
    RC_RECEIVER_TEST_REV_s_axi_U->AWVALID(s_axi_TEST_REV_AWVALID);
    RC_RECEIVER_TEST_REV_s_axi_U->AWREADY(s_axi_TEST_REV_AWREADY);
    RC_RECEIVER_TEST_REV_s_axi_U->AWADDR(s_axi_TEST_REV_AWADDR);
    RC_RECEIVER_TEST_REV_s_axi_U->WVALID(s_axi_TEST_REV_WVALID);
    RC_RECEIVER_TEST_REV_s_axi_U->WREADY(s_axi_TEST_REV_WREADY);
    RC_RECEIVER_TEST_REV_s_axi_U->WDATA(s_axi_TEST_REV_WDATA);
    RC_RECEIVER_TEST_REV_s_axi_U->WSTRB(s_axi_TEST_REV_WSTRB);
    RC_RECEIVER_TEST_REV_s_axi_U->ARVALID(s_axi_TEST_REV_ARVALID);
    RC_RECEIVER_TEST_REV_s_axi_U->ARREADY(s_axi_TEST_REV_ARREADY);
    RC_RECEIVER_TEST_REV_s_axi_U->ARADDR(s_axi_TEST_REV_ARADDR);
    RC_RECEIVER_TEST_REV_s_axi_U->RVALID(s_axi_TEST_REV_RVALID);
    RC_RECEIVER_TEST_REV_s_axi_U->RREADY(s_axi_TEST_REV_RREADY);
    RC_RECEIVER_TEST_REV_s_axi_U->RDATA(s_axi_TEST_REV_RDATA);
    RC_RECEIVER_TEST_REV_s_axi_U->RRESP(s_axi_TEST_REV_RRESP);
    RC_RECEIVER_TEST_REV_s_axi_U->BVALID(s_axi_TEST_REV_BVALID);
    RC_RECEIVER_TEST_REV_s_axi_U->BREADY(s_axi_TEST_REV_BREADY);
    RC_RECEIVER_TEST_REV_s_axi_U->BRESP(s_axi_TEST_REV_BRESP);
    RC_RECEIVER_TEST_REV_s_axi_U->ACLK(ap_clk);
    RC_RECEIVER_TEST_REV_s_axi_U->ARESET(ap_rst_n_inv);
    RC_RECEIVER_TEST_REV_s_axi_U->ACLK_EN(ap_var_for_const0);
    RC_RECEIVER_TEST_REV_s_axi_U->reverse_out_address0(reverse_out_address0);
    RC_RECEIVER_TEST_REV_s_axi_U->reverse_out_ce0(reverse_out_ce0);
    RC_RECEIVER_TEST_REV_s_axi_U->reverse_out_we0(reverse_out_we0);
    RC_RECEIVER_TEST_REV_s_axi_U->reverse_out_d0(reverse_out_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_SBUS_data_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_SBUS_data_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_errors_loc_phi_fu_1395_p4);
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( errors_loc_reg_1392 );
    sensitive << ( tmp_7_fu_1683_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_buffer_r_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_buffer_r_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_buffer_r_d0);
    sensitive << ( SBUS_data_q0 );
    sensitive << ( lookuptable_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_buffer_r_d1);
    sensitive << ( SBUS_data_q0 );
    sensitive << ( lookuptable_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_buffer_r_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_buffer_r_we1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_channel_data_address0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_channel_data_ce0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_channel_data_d0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( tmp_113_15_fu_1673_p1 );
    sensitive << ( tmp_69_fu_1753_p1 );
    sensitive << ( tmp_113_1_fu_1771_p1 );
    sensitive << ( tmp_113_2_fu_1860_p1 );
    sensitive << ( tmp_113_3_fu_1896_p1 );
    sensitive << ( tmp_113_4_fu_1914_p1 );
    sensitive << ( tmp_113_5_fu_2002_p1 );
    sensitive << ( tmp_113_6_fu_2034_p1 );
    sensitive << ( tmp_113_7_fu_2052_p1 );
    sensitive << ( tmp_113_8_fu_2115_p1 );
    sensitive << ( tmp_113_9_fu_2133_p1 );
    sensitive << ( tmp_113_s_fu_2222_p1 );
    sensitive << ( tmp_113_10_fu_2258_p1 );
    sensitive << ( tmp_113_11_fu_2276_p1 );
    sensitive << ( tmp_113_12_fu_2364_p1 );
    sensitive << ( tmp_113_13_fu_2396_p1 );
    sensitive << ( tmp_113_14_fu_2440_p1 );
    sensitive << ( tmp_113_16_fu_2454_p1 );

    SC_METHOD(thread_channel_data_we0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_lookuptable_address0);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( tmp_i_fu_1630_p1 );
    sensitive << ( tmp_i1_fu_1664_p1 );
    sensitive << ( tmp_i2_fu_1695_p1 );
    sensitive << ( tmp_i3_fu_1722_p1 );
    sensitive << ( tmp_i4_fu_1758_p1 );
    sensitive << ( tmp_i5_fu_1776_p1 );
    sensitive << ( tmp_i6_fu_1829_p1 );
    sensitive << ( tmp_i7_fu_1865_p1 );
    sensitive << ( tmp_i8_fu_1901_p1 );
    sensitive << ( tmp_i9_fu_1919_p1 );
    sensitive << ( tmp_i10_fu_1971_p1 );
    sensitive << ( tmp_i11_fu_2007_p1 );
    sensitive << ( tmp_i12_fu_2039_p1 );
    sensitive << ( tmp_i13_fu_2057_p1 );
    sensitive << ( tmp_i14_fu_2084_p1 );
    sensitive << ( tmp_i15_fu_2120_p1 );
    sensitive << ( tmp_i16_fu_2138_p1 );
    sensitive << ( tmp_i17_fu_2191_p1 );
    sensitive << ( tmp_i18_fu_2227_p1 );
    sensitive << ( tmp_i19_fu_2263_p1 );
    sensitive << ( tmp_i20_fu_2281_p1 );
    sensitive << ( tmp_i21_fu_2333_p1 );
    sensitive << ( tmp_i22_fu_2369_p1 );

    SC_METHOD(thread_lookuptable_ce0);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );

    SC_METHOD(thread_norm_out_addr_16_reg_2500);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_norm_out_addr_26_reg_2485);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_norm_out_addr_27_reg_2520);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_norm_out_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( norm_out_addr_26_reg_2485 );
    sensitive << ( norm_out_addr_16_reg_2500 );
    sensitive << ( norm_out_addr_27_reg_2520 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_norm_out_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_norm_out_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( tmp_fu_1509_p1 );
    sensitive << ( tmp_reg_2495 );
    sensitive << ( tmp_1_fu_1514_p1 );
    sensitive << ( tmp_1_reg_2515 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( tmp_4_fu_1518_p1 );
    sensitive << ( tmp_4_1_fu_1529_p1 );
    sensitive << ( tmp_4_2_fu_1534_p1 );
    sensitive << ( tmp_4_3_fu_1539_p1 );
    sensitive << ( tmp_4_4_fu_1543_p1 );
    sensitive << ( tmp_4_5_fu_1547_p1 );
    sensitive << ( tmp_4_6_fu_1551_p1 );
    sensitive << ( tmp_4_7_fu_1555_p1 );
    sensitive << ( tmp_4_8_fu_1559_p1 );
    sensitive << ( tmp_4_9_fu_1563_p1 );
    sensitive << ( tmp_4_s_fu_1567_p1 );
    sensitive << ( tmp_4_10_fu_1571_p1 );
    sensitive << ( tmp_4_11_fu_1575_p1 );
    sensitive << ( tmp_4_12_fu_1579_p1 );
    sensitive << ( tmp_4_13_fu_1583_p1 );
    sensitive << ( tmp_4_14_fu_1587_p1 );
    sensitive << ( tmp_4_15_fu_1591_p1 );
    sensitive << ( tmp_4_16_fu_1595_p1 );
    sensitive << ( tmp_4_17_fu_1599_p1 );
    sensitive << ( tmp_4_18_fu_1603_p1 );
    sensitive << ( tmp_4_19_fu_1607_p1 );
    sensitive << ( tmp_4_20_fu_1611_p1 );
    sensitive << ( tmp_4_21_fu_1615_p1 );
    sensitive << ( tmp_4_22_fu_1656_p1 );
    sensitive << ( tmp_4_23_fu_1678_p1 );

    SC_METHOD(thread_norm_out_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_or_cond_fu_1625_p2);
    sensitive << ( tmp_2_reg_2530 );
    sensitive << ( tmp_6_fu_1619_p2 );

    SC_METHOD(thread_reverse_out_address0);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_reverse_out_ce0);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_reverse_out_d0);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( tmp_70_fu_1717_p1 );
    sensitive << ( tmp_109_1_fu_1726_p1 );
    sensitive << ( tmp_109_2_fu_1762_p1 );
    sensitive << ( tmp_109_3_fu_1780_p1 );
    sensitive << ( tmp_109_4_fu_1833_p1 );
    sensitive << ( tmp_109_5_fu_1869_p1 );
    sensitive << ( tmp_109_6_fu_1905_p1 );
    sensitive << ( tmp_109_7_fu_1923_p1 );
    sensitive << ( tmp_109_8_fu_1975_p1 );
    sensitive << ( tmp_109_9_fu_2011_p1 );
    sensitive << ( tmp_109_s_fu_2043_p1 );
    sensitive << ( tmp_109_10_fu_2061_p1 );
    sensitive << ( tmp_109_11_fu_2088_p1 );
    sensitive << ( tmp_109_12_fu_2124_p1 );
    sensitive << ( tmp_109_13_fu_2142_p1 );
    sensitive << ( tmp_109_14_fu_2195_p1 );
    sensitive << ( tmp_109_15_fu_2231_p1 );
    sensitive << ( tmp_109_16_fu_2267_p1 );
    sensitive << ( tmp_109_17_fu_2285_p1 );
    sensitive << ( tmp_109_18_fu_2337_p1 );
    sensitive << ( tmp_109_19_fu_2373_p1 );
    sensitive << ( tmp_109_20_fu_2401_p1 );
    sensitive << ( tmp_109_21_fu_2445_p1 );
    sensitive << ( tmp_109_22_fu_2459_p1 );

    SC_METHOD(thread_reverse_out_we0);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( or_cond_reg_2767 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( or_cond_fu_1625_p2 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_tmp_109_10_fu_2061_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_11_fu_2088_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_12_fu_2124_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_13_fu_2142_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_14_fu_2195_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_15_fu_2231_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_16_fu_2267_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_17_fu_2285_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_18_fu_2337_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_19_fu_2373_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_1_fu_1726_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_20_fu_2401_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_21_fu_2445_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_22_fu_2459_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_2_fu_1762_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_3_fu_1780_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_4_fu_1833_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_5_fu_1869_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_6_fu_1905_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_7_fu_1923_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_8_fu_1975_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_109_9_fu_2011_p1);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_109_s_fu_2043_p1);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_113_10_fu_2258_p1);
    sensitive << ( channels_11 );

    SC_METHOD(thread_tmp_113_11_fu_2276_p1);
    sensitive << ( channels_12 );

    SC_METHOD(thread_tmp_113_12_fu_2364_p1);
    sensitive << ( channels_13 );

    SC_METHOD(thread_tmp_113_13_fu_2396_p1);
    sensitive << ( channels_14 );

    SC_METHOD(thread_tmp_113_14_fu_2440_p1);
    sensitive << ( channels_15 );

    SC_METHOD(thread_tmp_113_15_fu_1673_p1);
    sensitive << ( channels_16 );

    SC_METHOD(thread_tmp_113_16_fu_2454_p1);
    sensitive << ( channels_17 );

    SC_METHOD(thread_tmp_113_1_fu_1771_p1);
    sensitive << ( channels_1 );

    SC_METHOD(thread_tmp_113_2_fu_1860_p1);
    sensitive << ( channels_2 );

    SC_METHOD(thread_tmp_113_3_fu_1896_p1);
    sensitive << ( channels_3 );

    SC_METHOD(thread_tmp_113_4_fu_1914_p1);
    sensitive << ( channels_4 );

    SC_METHOD(thread_tmp_113_5_fu_2002_p1);
    sensitive << ( channels_5 );

    SC_METHOD(thread_tmp_113_6_fu_2034_p1);
    sensitive << ( channels_6 );

    SC_METHOD(thread_tmp_113_7_fu_2052_p1);
    sensitive << ( channels_7 );

    SC_METHOD(thread_tmp_113_8_fu_2115_p1);
    sensitive << ( channels_8 );

    SC_METHOD(thread_tmp_113_9_fu_2133_p1);
    sensitive << ( channels_9 );

    SC_METHOD(thread_tmp_113_s_fu_2222_p1);
    sensitive << ( channels_10 );

    SC_METHOD(thread_tmp_11_fu_1785_p1);
    sensitive << ( reg_1489 );

    SC_METHOD(thread_tmp_12_fu_1789_p3);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_13_fu_1797_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_14_fu_1801_p3);
    sensitive << ( tmp_11_fu_1785_p1 );

    SC_METHOD(thread_tmp_15_fu_1809_p2);
    sensitive << ( tmp_14_fu_1801_p3 );
    sensitive << ( tmp_12_fu_1789_p3 );

    SC_METHOD(thread_tmp_16_fu_1815_p3);
    sensitive << ( tmp_13_fu_1797_p1 );
    sensitive << ( tmp_15_fu_1809_p2 );

    SC_METHOD(thread_tmp_18_fu_1838_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_19_fu_1842_p3);
    sensitive << ( reg_1493 );
    sensitive << ( tmp_18_fu_1838_p1 );

    SC_METHOD(thread_tmp_1_fu_1514_p1);
    sensitive << ( buffer_load_1_reg_2505 );

    SC_METHOD(thread_tmp_21_fu_1874_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_22_fu_1878_p3);
    sensitive << ( reg_1497 );
    sensitive << ( tmp_21_fu_1874_p1 );

    SC_METHOD(thread_tmp_24_fu_1928_p1);
    sensitive << ( tmp_23_reg_2817 );

    SC_METHOD(thread_tmp_25_fu_1931_p3);
    sensitive << ( reg_1481 );

    SC_METHOD(thread_tmp_26_fu_1939_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_27_fu_1943_p3);
    sensitive << ( tmp_24_fu_1928_p1 );

    SC_METHOD(thread_tmp_28_fu_1951_p2);
    sensitive << ( tmp_27_fu_1943_p3 );
    sensitive << ( tmp_25_fu_1931_p3 );

    SC_METHOD(thread_tmp_29_fu_1957_p3);
    sensitive << ( tmp_26_fu_1939_p1 );
    sensitive << ( tmp_28_fu_1951_p2 );

    SC_METHOD(thread_tmp_2_fu_1523_p2);
    sensitive << ( reg_1469 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_31_fu_1980_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_32_fu_1984_p3);
    sensitive << ( reg_1501 );
    sensitive << ( tmp_31_fu_1980_p1 );

    SC_METHOD(thread_tmp_34_fu_2016_p3);
    sensitive << ( lookuptable_q0 );
    sensitive << ( reg_1505 );

    SC_METHOD(thread_tmp_35_fu_2066_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_36_fu_2070_p3);
    sensitive << ( reg_1481 );
    sensitive << ( tmp_35_fu_2066_p1 );

    SC_METHOD(thread_tmp_38_fu_2093_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_39_fu_2097_p3);
    sensitive << ( reg_1485 );
    sensitive << ( tmp_38_fu_2093_p1 );

    SC_METHOD(thread_tmp_3_fu_1699_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_41_fu_2147_p1);
    sensitive << ( reg_1489 );

    SC_METHOD(thread_tmp_42_fu_2151_p3);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_43_fu_2159_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_44_fu_2163_p3);
    sensitive << ( tmp_41_fu_2147_p1 );

    SC_METHOD(thread_tmp_45_fu_2171_p2);
    sensitive << ( tmp_44_fu_2163_p3 );
    sensitive << ( tmp_42_fu_2151_p3 );

    SC_METHOD(thread_tmp_46_fu_2177_p3);
    sensitive << ( tmp_43_fu_2159_p1 );
    sensitive << ( tmp_45_fu_2171_p2 );

    SC_METHOD(thread_tmp_48_fu_2200_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_49_fu_2204_p3);
    sensitive << ( reg_1493 );
    sensitive << ( tmp_48_fu_2200_p1 );

    SC_METHOD(thread_tmp_4_10_fu_1571_p1);
    sensitive << ( SBUS_data_load_11_reg_2623 );

    SC_METHOD(thread_tmp_4_11_fu_1575_p1);
    sensitive << ( SBUS_data_load_12_reg_2634 );

    SC_METHOD(thread_tmp_4_12_fu_1579_p1);
    sensitive << ( SBUS_data_load_13_reg_2645 );

    SC_METHOD(thread_tmp_4_13_fu_1583_p1);
    sensitive << ( SBUS_data_load_14_reg_2656 );

    SC_METHOD(thread_tmp_4_14_fu_1587_p1);
    sensitive << ( SBUS_data_load_15_reg_2667 );

    SC_METHOD(thread_tmp_4_15_fu_1591_p1);
    sensitive << ( SBUS_data_load_16_reg_2678 );

    SC_METHOD(thread_tmp_4_16_fu_1595_p1);
    sensitive << ( SBUS_data_load_17_reg_2689 );

    SC_METHOD(thread_tmp_4_17_fu_1599_p1);
    sensitive << ( SBUS_data_load_18_reg_2700 );

    SC_METHOD(thread_tmp_4_18_fu_1603_p1);
    sensitive << ( SBUS_data_load_19_reg_2711 );

    SC_METHOD(thread_tmp_4_19_fu_1607_p1);
    sensitive << ( SBUS_data_load_20_reg_2722 );

    SC_METHOD(thread_tmp_4_1_fu_1529_p1);
    sensitive << ( reg_1473 );

    SC_METHOD(thread_tmp_4_20_fu_1611_p1);
    sensitive << ( SBUS_data_load_21_reg_2733 );

    SC_METHOD(thread_tmp_4_21_fu_1615_p1);
    sensitive << ( SBUS_data_load_22_reg_2744 );

    SC_METHOD(thread_tmp_4_22_fu_1656_p1);
    sensitive << ( SBUS_data_load_23_reg_2755 );

    SC_METHOD(thread_tmp_4_23_fu_1678_p1);
    sensitive << ( reg_1473 );

    SC_METHOD(thread_tmp_4_2_fu_1534_p1);
    sensitive << ( reg_1469 );

    SC_METHOD(thread_tmp_4_3_fu_1539_p1);
    sensitive << ( SBUS_data_load_3_reg_2535 );

    SC_METHOD(thread_tmp_4_4_fu_1543_p1);
    sensitive << ( SBUS_data_load_4_reg_2546 );

    SC_METHOD(thread_tmp_4_5_fu_1547_p1);
    sensitive << ( SBUS_data_load_5_reg_2557 );

    SC_METHOD(thread_tmp_4_6_fu_1551_p1);
    sensitive << ( SBUS_data_load_6_reg_2568 );

    SC_METHOD(thread_tmp_4_7_fu_1555_p1);
    sensitive << ( SBUS_data_load_7_reg_2579 );

    SC_METHOD(thread_tmp_4_8_fu_1559_p1);
    sensitive << ( SBUS_data_load_8_reg_2590 );

    SC_METHOD(thread_tmp_4_9_fu_1563_p1);
    sensitive << ( SBUS_data_load_9_reg_2601 );

    SC_METHOD(thread_tmp_4_fu_1518_p1);
    sensitive << ( reg_1469 );

    SC_METHOD(thread_tmp_4_s_fu_1567_p1);
    sensitive << ( SBUS_data_load_10_reg_2612 );

    SC_METHOD(thread_tmp_51_fu_2236_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_52_fu_2240_p3);
    sensitive << ( reg_1497 );
    sensitive << ( tmp_51_fu_2236_p1 );

    SC_METHOD(thread_tmp_54_fu_2290_p1);
    sensitive << ( tmp_53_reg_2877 );

    SC_METHOD(thread_tmp_55_fu_2293_p3);
    sensitive << ( reg_1477 );

    SC_METHOD(thread_tmp_56_fu_2301_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_57_fu_2305_p3);
    sensitive << ( tmp_54_fu_2290_p1 );

    SC_METHOD(thread_tmp_58_fu_2313_p2);
    sensitive << ( tmp_57_fu_2305_p3 );
    sensitive << ( tmp_55_fu_2293_p3 );

    SC_METHOD(thread_tmp_59_fu_2319_p3);
    sensitive << ( tmp_56_fu_2301_p1 );
    sensitive << ( tmp_58_fu_2313_p2 );

    SC_METHOD(thread_tmp_61_fu_2342_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_62_fu_2346_p3);
    sensitive << ( reg_1501 );
    sensitive << ( tmp_61_fu_2342_p1 );

    SC_METHOD(thread_tmp_64_fu_2378_p3);
    sensitive << ( lookuptable_q0 );
    sensitive << ( reg_1505 );

    SC_METHOD(thread_tmp_65_fu_1635_p3);
    sensitive << ( SBUS_data_load_23_reg_2755 );

    SC_METHOD(thread_tmp_66_fu_2406_p3);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_68_fu_2468_p2);
    sensitive << ( lost );

    SC_METHOD(thread_tmp_69_fu_1753_p1);
    sensitive << ( channels_0 );

    SC_METHOD(thread_tmp_6_fu_1619_p2);
    sensitive << ( SBUS_data_q0 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_tmp_70_fu_1717_p1);
    sensitive << ( ap_phi_mux_errors_loc_phi_fu_1395_p4 );

    SC_METHOD(thread_tmp_7_fu_1683_p2);
    sensitive << ( errors_load_reg_2776 );

    SC_METHOD(thread_tmp_8_fu_1703_p3);
    sensitive << ( reg_1477 );
    sensitive << ( tmp_3_fu_1699_p1 );

    SC_METHOD(thread_tmp_95_cast_cast_cas_fu_1642_p3);
    sensitive << ( tmp_65_fu_1635_p3 );

    SC_METHOD(thread_tmp_98_cast_cast_cas_fu_2414_p3);
    sensitive << ( tmp_66_fu_2406_p3 );

    SC_METHOD(thread_tmp_9_fu_1731_p1);
    sensitive << ( lookuptable_q0 );

    SC_METHOD(thread_tmp_fu_1509_p1);
    sensitive << ( buffer_r_q0 );

    SC_METHOD(thread_tmp_i10_fu_1971_p1);
    sensitive << ( SBUS_data_load_11_reg_2623 );

    SC_METHOD(thread_tmp_i11_fu_2007_p1);
    sensitive << ( SBUS_data_load_12_reg_2634 );

    SC_METHOD(thread_tmp_i12_fu_2039_p1);
    sensitive << ( SBUS_data_load_13_reg_2645 );

    SC_METHOD(thread_tmp_i13_fu_2057_p1);
    sensitive << ( SBUS_data_load_14_reg_2656 );

    SC_METHOD(thread_tmp_i14_fu_2084_p1);
    sensitive << ( SBUS_data_load_15_reg_2667 );

    SC_METHOD(thread_tmp_i15_fu_2120_p1);
    sensitive << ( SBUS_data_load_16_reg_2678 );

    SC_METHOD(thread_tmp_i16_fu_2138_p1);
    sensitive << ( SBUS_data_load_17_reg_2689 );

    SC_METHOD(thread_tmp_i17_fu_2191_p1);
    sensitive << ( SBUS_data_load_18_reg_2700 );

    SC_METHOD(thread_tmp_i18_fu_2227_p1);
    sensitive << ( SBUS_data_load_19_reg_2711 );

    SC_METHOD(thread_tmp_i19_fu_2263_p1);
    sensitive << ( SBUS_data_load_20_reg_2722 );

    SC_METHOD(thread_tmp_i1_fu_1664_p1);
    sensitive << ( reg_1469 );

    SC_METHOD(thread_tmp_i20_fu_2281_p1);
    sensitive << ( SBUS_data_load_21_reg_2733 );

    SC_METHOD(thread_tmp_i21_fu_2333_p1);
    sensitive << ( SBUS_data_load_22_reg_2744 );

    SC_METHOD(thread_tmp_i22_fu_2369_p1);
    sensitive << ( SBUS_data_load_23_reg_2755 );

    SC_METHOD(thread_tmp_i2_fu_1695_p1);
    sensitive << ( SBUS_data_load_3_reg_2535 );

    SC_METHOD(thread_tmp_i3_fu_1722_p1);
    sensitive << ( SBUS_data_load_4_reg_2546 );

    SC_METHOD(thread_tmp_i4_fu_1758_p1);
    sensitive << ( SBUS_data_load_5_reg_2557 );

    SC_METHOD(thread_tmp_i5_fu_1776_p1);
    sensitive << ( SBUS_data_load_6_reg_2568 );

    SC_METHOD(thread_tmp_i6_fu_1829_p1);
    sensitive << ( SBUS_data_load_7_reg_2579 );

    SC_METHOD(thread_tmp_i7_fu_1865_p1);
    sensitive << ( SBUS_data_load_8_reg_2590 );

    SC_METHOD(thread_tmp_i8_fu_1901_p1);
    sensitive << ( SBUS_data_load_9_reg_2601 );

    SC_METHOD(thread_tmp_i9_fu_1919_p1);
    sensitive << ( SBUS_data_load_10_reg_2612 );

    SC_METHOD(thread_tmp_i_fu_1630_p1);
    sensitive << ( reg_1473 );

    SC_METHOD(thread_tmp_s_fu_1735_p3);
    sensitive << ( reg_1485 );
    sensitive << ( tmp_9_fu_1731_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000001";
    errors = "00000000";
    channels_0 = "00000000000";
    channels_1 = "00000000000";
    channels_2 = "00000000000";
    channels_3 = "00000000000";
    channels_4 = "00000000000";
    channels_5 = "00000000000";
    channels_6 = "00000000000";
    channels_7 = "00000000000";
    channels_8 = "00000000000";
    channels_9 = "00000000000";
    channels_10 = "00000000000";
    channels_11 = "00000000000";
    channels_12 = "00000000000";
    channels_13 = "00000000000";
    channels_14 = "00000000000";
    channels_15 = "00000000000";
    channels_16 = "00000000000";
    channels_17 = "00000000000";
    lost = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "RC_RECEIVER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_CTRL_AWVALID, "(port)s_axi_CTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_AWREADY, "(port)s_axi_CTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_AWADDR, "(port)s_axi_CTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_WVALID, "(port)s_axi_CTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_WREADY, "(port)s_axi_CTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_WDATA, "(port)s_axi_CTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_WSTRB, "(port)s_axi_CTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_ARVALID, "(port)s_axi_CTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_ARREADY, "(port)s_axi_CTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_ARADDR, "(port)s_axi_CTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_RVALID, "(port)s_axi_CTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_RREADY, "(port)s_axi_CTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_RDATA, "(port)s_axi_CTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_RRESP, "(port)s_axi_CTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BVALID, "(port)s_axi_CTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BREADY, "(port)s_axi_CTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BRESP, "(port)s_axi_CTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_AWVALID, "(port)s_axi_TEST_CHAN_AWVALID");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_AWREADY, "(port)s_axi_TEST_CHAN_AWREADY");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_AWADDR, "(port)s_axi_TEST_CHAN_AWADDR");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_WVALID, "(port)s_axi_TEST_CHAN_WVALID");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_WREADY, "(port)s_axi_TEST_CHAN_WREADY");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_WDATA, "(port)s_axi_TEST_CHAN_WDATA");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_WSTRB, "(port)s_axi_TEST_CHAN_WSTRB");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_ARVALID, "(port)s_axi_TEST_CHAN_ARVALID");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_ARREADY, "(port)s_axi_TEST_CHAN_ARREADY");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_ARADDR, "(port)s_axi_TEST_CHAN_ARADDR");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_RVALID, "(port)s_axi_TEST_CHAN_RVALID");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_RREADY, "(port)s_axi_TEST_CHAN_RREADY");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_RDATA, "(port)s_axi_TEST_CHAN_RDATA");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_RRESP, "(port)s_axi_TEST_CHAN_RRESP");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_BVALID, "(port)s_axi_TEST_CHAN_BVALID");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_BREADY, "(port)s_axi_TEST_CHAN_BREADY");
    sc_trace(mVcdFile, s_axi_TEST_CHAN_BRESP, "(port)s_axi_TEST_CHAN_BRESP");
    sc_trace(mVcdFile, s_axi_TEST_NORM_AWVALID, "(port)s_axi_TEST_NORM_AWVALID");
    sc_trace(mVcdFile, s_axi_TEST_NORM_AWREADY, "(port)s_axi_TEST_NORM_AWREADY");
    sc_trace(mVcdFile, s_axi_TEST_NORM_AWADDR, "(port)s_axi_TEST_NORM_AWADDR");
    sc_trace(mVcdFile, s_axi_TEST_NORM_WVALID, "(port)s_axi_TEST_NORM_WVALID");
    sc_trace(mVcdFile, s_axi_TEST_NORM_WREADY, "(port)s_axi_TEST_NORM_WREADY");
    sc_trace(mVcdFile, s_axi_TEST_NORM_WDATA, "(port)s_axi_TEST_NORM_WDATA");
    sc_trace(mVcdFile, s_axi_TEST_NORM_WSTRB, "(port)s_axi_TEST_NORM_WSTRB");
    sc_trace(mVcdFile, s_axi_TEST_NORM_ARVALID, "(port)s_axi_TEST_NORM_ARVALID");
    sc_trace(mVcdFile, s_axi_TEST_NORM_ARREADY, "(port)s_axi_TEST_NORM_ARREADY");
    sc_trace(mVcdFile, s_axi_TEST_NORM_ARADDR, "(port)s_axi_TEST_NORM_ARADDR");
    sc_trace(mVcdFile, s_axi_TEST_NORM_RVALID, "(port)s_axi_TEST_NORM_RVALID");
    sc_trace(mVcdFile, s_axi_TEST_NORM_RREADY, "(port)s_axi_TEST_NORM_RREADY");
    sc_trace(mVcdFile, s_axi_TEST_NORM_RDATA, "(port)s_axi_TEST_NORM_RDATA");
    sc_trace(mVcdFile, s_axi_TEST_NORM_RRESP, "(port)s_axi_TEST_NORM_RRESP");
    sc_trace(mVcdFile, s_axi_TEST_NORM_BVALID, "(port)s_axi_TEST_NORM_BVALID");
    sc_trace(mVcdFile, s_axi_TEST_NORM_BREADY, "(port)s_axi_TEST_NORM_BREADY");
    sc_trace(mVcdFile, s_axi_TEST_NORM_BRESP, "(port)s_axi_TEST_NORM_BRESP");
    sc_trace(mVcdFile, s_axi_TEST_REV_AWVALID, "(port)s_axi_TEST_REV_AWVALID");
    sc_trace(mVcdFile, s_axi_TEST_REV_AWREADY, "(port)s_axi_TEST_REV_AWREADY");
    sc_trace(mVcdFile, s_axi_TEST_REV_AWADDR, "(port)s_axi_TEST_REV_AWADDR");
    sc_trace(mVcdFile, s_axi_TEST_REV_WVALID, "(port)s_axi_TEST_REV_WVALID");
    sc_trace(mVcdFile, s_axi_TEST_REV_WREADY, "(port)s_axi_TEST_REV_WREADY");
    sc_trace(mVcdFile, s_axi_TEST_REV_WDATA, "(port)s_axi_TEST_REV_WDATA");
    sc_trace(mVcdFile, s_axi_TEST_REV_WSTRB, "(port)s_axi_TEST_REV_WSTRB");
    sc_trace(mVcdFile, s_axi_TEST_REV_ARVALID, "(port)s_axi_TEST_REV_ARVALID");
    sc_trace(mVcdFile, s_axi_TEST_REV_ARREADY, "(port)s_axi_TEST_REV_ARREADY");
    sc_trace(mVcdFile, s_axi_TEST_REV_ARADDR, "(port)s_axi_TEST_REV_ARADDR");
    sc_trace(mVcdFile, s_axi_TEST_REV_RVALID, "(port)s_axi_TEST_REV_RVALID");
    sc_trace(mVcdFile, s_axi_TEST_REV_RREADY, "(port)s_axi_TEST_REV_RREADY");
    sc_trace(mVcdFile, s_axi_TEST_REV_RDATA, "(port)s_axi_TEST_REV_RDATA");
    sc_trace(mVcdFile, s_axi_TEST_REV_RRESP, "(port)s_axi_TEST_REV_RRESP");
    sc_trace(mVcdFile, s_axi_TEST_REV_BVALID, "(port)s_axi_TEST_REV_BVALID");
    sc_trace(mVcdFile, s_axi_TEST_REV_BREADY, "(port)s_axi_TEST_REV_BREADY");
    sc_trace(mVcdFile, s_axi_TEST_REV_BRESP, "(port)s_axi_TEST_REV_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, SBUS_data_address0, "SBUS_data_address0");
    sc_trace(mVcdFile, SBUS_data_ce0, "SBUS_data_ce0");
    sc_trace(mVcdFile, SBUS_data_q0, "SBUS_data_q0");
    sc_trace(mVcdFile, norm_out_address0, "norm_out_address0");
    sc_trace(mVcdFile, norm_out_ce0, "norm_out_ce0");
    sc_trace(mVcdFile, norm_out_we0, "norm_out_we0");
    sc_trace(mVcdFile, norm_out_d0, "norm_out_d0");
    sc_trace(mVcdFile, reverse_out_address0, "reverse_out_address0");
    sc_trace(mVcdFile, reverse_out_ce0, "reverse_out_ce0");
    sc_trace(mVcdFile, reverse_out_we0, "reverse_out_we0");
    sc_trace(mVcdFile, reverse_out_d0, "reverse_out_d0");
    sc_trace(mVcdFile, channel_data_address0, "channel_data_address0");
    sc_trace(mVcdFile, channel_data_ce0, "channel_data_ce0");
    sc_trace(mVcdFile, channel_data_we0, "channel_data_we0");
    sc_trace(mVcdFile, channel_data_d0, "channel_data_d0");
    sc_trace(mVcdFile, errors, "errors");
    sc_trace(mVcdFile, lookuptable_address0, "lookuptable_address0");
    sc_trace(mVcdFile, lookuptable_ce0, "lookuptable_ce0");
    sc_trace(mVcdFile, lookuptable_q0, "lookuptable_q0");
    sc_trace(mVcdFile, channels_0, "channels_0");
    sc_trace(mVcdFile, channels_1, "channels_1");
    sc_trace(mVcdFile, channels_2, "channels_2");
    sc_trace(mVcdFile, channels_3, "channels_3");
    sc_trace(mVcdFile, channels_4, "channels_4");
    sc_trace(mVcdFile, channels_5, "channels_5");
    sc_trace(mVcdFile, channels_6, "channels_6");
    sc_trace(mVcdFile, channels_7, "channels_7");
    sc_trace(mVcdFile, channels_8, "channels_8");
    sc_trace(mVcdFile, channels_9, "channels_9");
    sc_trace(mVcdFile, channels_10, "channels_10");
    sc_trace(mVcdFile, channels_11, "channels_11");
    sc_trace(mVcdFile, channels_12, "channels_12");
    sc_trace(mVcdFile, channels_13, "channels_13");
    sc_trace(mVcdFile, channels_14, "channels_14");
    sc_trace(mVcdFile, channels_15, "channels_15");
    sc_trace(mVcdFile, channels_16, "channels_16");
    sc_trace(mVcdFile, channels_17, "channels_17");
    sc_trace(mVcdFile, lost, "lost");
    sc_trace(mVcdFile, buffer_r_address0, "buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_d0, "buffer_r_d0");
    sc_trace(mVcdFile, buffer_r_q0, "buffer_r_q0");
    sc_trace(mVcdFile, buffer_r_address1, "buffer_r_address1");
    sc_trace(mVcdFile, buffer_r_ce1, "buffer_r_ce1");
    sc_trace(mVcdFile, buffer_r_we1, "buffer_r_we1");
    sc_trace(mVcdFile, buffer_r_d1, "buffer_r_d1");
    sc_trace(mVcdFile, buffer_r_q1, "buffer_r_q1");
    sc_trace(mVcdFile, reg_1469, "reg_1469");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, reg_1473, "reg_1473");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, reg_1477, "reg_1477");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, or_cond_reg_2767, "or_cond_reg_2767");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, reg_1481, "reg_1481");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, reg_1485, "reg_1485");
    sc_trace(mVcdFile, reg_1489, "reg_1489");
    sc_trace(mVcdFile, reg_1493, "reg_1493");
    sc_trace(mVcdFile, reg_1497, "reg_1497");
    sc_trace(mVcdFile, reg_1501, "reg_1501");
    sc_trace(mVcdFile, reg_1505, "reg_1505");
    sc_trace(mVcdFile, norm_out_addr_26_reg_2485, "norm_out_addr_26_reg_2485");
    sc_trace(mVcdFile, tmp_fu_1509_p1, "tmp_fu_1509_p1");
    sc_trace(mVcdFile, tmp_reg_2495, "tmp_reg_2495");
    sc_trace(mVcdFile, norm_out_addr_16_reg_2500, "norm_out_addr_16_reg_2500");
    sc_trace(mVcdFile, buffer_load_1_reg_2505, "buffer_load_1_reg_2505");
    sc_trace(mVcdFile, tmp_1_fu_1514_p1, "tmp_1_fu_1514_p1");
    sc_trace(mVcdFile, tmp_1_reg_2515, "tmp_1_reg_2515");
    sc_trace(mVcdFile, norm_out_addr_27_reg_2520, "norm_out_addr_27_reg_2520");
    sc_trace(mVcdFile, tmp_2_fu_1523_p2, "tmp_2_fu_1523_p2");
    sc_trace(mVcdFile, tmp_2_reg_2530, "tmp_2_reg_2530");
    sc_trace(mVcdFile, SBUS_data_load_3_reg_2535, "SBUS_data_load_3_reg_2535");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, SBUS_data_load_4_reg_2546, "SBUS_data_load_4_reg_2546");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, SBUS_data_load_5_reg_2557, "SBUS_data_load_5_reg_2557");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, SBUS_data_load_6_reg_2568, "SBUS_data_load_6_reg_2568");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, SBUS_data_load_7_reg_2579, "SBUS_data_load_7_reg_2579");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, SBUS_data_load_8_reg_2590, "SBUS_data_load_8_reg_2590");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, SBUS_data_load_9_reg_2601, "SBUS_data_load_9_reg_2601");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, SBUS_data_load_10_reg_2612, "SBUS_data_load_10_reg_2612");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, SBUS_data_load_11_reg_2623, "SBUS_data_load_11_reg_2623");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, SBUS_data_load_12_reg_2634, "SBUS_data_load_12_reg_2634");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, SBUS_data_load_13_reg_2645, "SBUS_data_load_13_reg_2645");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, SBUS_data_load_14_reg_2656, "SBUS_data_load_14_reg_2656");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, SBUS_data_load_15_reg_2667, "SBUS_data_load_15_reg_2667");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, SBUS_data_load_16_reg_2678, "SBUS_data_load_16_reg_2678");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, SBUS_data_load_17_reg_2689, "SBUS_data_load_17_reg_2689");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, SBUS_data_load_18_reg_2700, "SBUS_data_load_18_reg_2700");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, SBUS_data_load_19_reg_2711, "SBUS_data_load_19_reg_2711");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, SBUS_data_load_20_reg_2722, "SBUS_data_load_20_reg_2722");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, SBUS_data_load_21_reg_2733, "SBUS_data_load_21_reg_2733");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, SBUS_data_load_22_reg_2744, "SBUS_data_load_22_reg_2744");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, SBUS_data_load_23_reg_2755, "SBUS_data_load_23_reg_2755");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, or_cond_fu_1625_p2, "or_cond_fu_1625_p2");
    sc_trace(mVcdFile, errors_load_reg_2776, "errors_load_reg_2776");
    sc_trace(mVcdFile, tmp_23_reg_2817, "tmp_23_reg_2817");
    sc_trace(mVcdFile, tmp_53_reg_2877, "tmp_53_reg_2877");
    sc_trace(mVcdFile, tmp_67_reg_2902, "tmp_67_reg_2902");
    sc_trace(mVcdFile, ap_phi_mux_errors_loc_phi_fu_1395_p4, "ap_phi_mux_errors_loc_phi_fu_1395_p4");
    sc_trace(mVcdFile, errors_loc_reg_1392, "errors_loc_reg_1392");
    sc_trace(mVcdFile, tmp_7_fu_1683_p2, "tmp_7_fu_1683_p2");
    sc_trace(mVcdFile, tmp_i_fu_1630_p1, "tmp_i_fu_1630_p1");
    sc_trace(mVcdFile, tmp_i1_fu_1664_p1, "tmp_i1_fu_1664_p1");
    sc_trace(mVcdFile, tmp_i2_fu_1695_p1, "tmp_i2_fu_1695_p1");
    sc_trace(mVcdFile, tmp_i3_fu_1722_p1, "tmp_i3_fu_1722_p1");
    sc_trace(mVcdFile, tmp_i4_fu_1758_p1, "tmp_i4_fu_1758_p1");
    sc_trace(mVcdFile, tmp_i5_fu_1776_p1, "tmp_i5_fu_1776_p1");
    sc_trace(mVcdFile, tmp_i6_fu_1829_p1, "tmp_i6_fu_1829_p1");
    sc_trace(mVcdFile, tmp_i7_fu_1865_p1, "tmp_i7_fu_1865_p1");
    sc_trace(mVcdFile, tmp_i8_fu_1901_p1, "tmp_i8_fu_1901_p1");
    sc_trace(mVcdFile, tmp_i9_fu_1919_p1, "tmp_i9_fu_1919_p1");
    sc_trace(mVcdFile, tmp_i10_fu_1971_p1, "tmp_i10_fu_1971_p1");
    sc_trace(mVcdFile, tmp_i11_fu_2007_p1, "tmp_i11_fu_2007_p1");
    sc_trace(mVcdFile, tmp_i12_fu_2039_p1, "tmp_i12_fu_2039_p1");
    sc_trace(mVcdFile, tmp_i13_fu_2057_p1, "tmp_i13_fu_2057_p1");
    sc_trace(mVcdFile, tmp_i14_fu_2084_p1, "tmp_i14_fu_2084_p1");
    sc_trace(mVcdFile, tmp_i15_fu_2120_p1, "tmp_i15_fu_2120_p1");
    sc_trace(mVcdFile, tmp_i16_fu_2138_p1, "tmp_i16_fu_2138_p1");
    sc_trace(mVcdFile, tmp_i17_fu_2191_p1, "tmp_i17_fu_2191_p1");
    sc_trace(mVcdFile, tmp_i18_fu_2227_p1, "tmp_i18_fu_2227_p1");
    sc_trace(mVcdFile, tmp_i19_fu_2263_p1, "tmp_i19_fu_2263_p1");
    sc_trace(mVcdFile, tmp_i20_fu_2281_p1, "tmp_i20_fu_2281_p1");
    sc_trace(mVcdFile, tmp_i21_fu_2333_p1, "tmp_i21_fu_2333_p1");
    sc_trace(mVcdFile, tmp_i22_fu_2369_p1, "tmp_i22_fu_2369_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, tmp_8_fu_1703_p3, "tmp_8_fu_1703_p3");
    sc_trace(mVcdFile, tmp_s_fu_1735_p3, "tmp_s_fu_1735_p3");
    sc_trace(mVcdFile, tmp_16_fu_1815_p3, "tmp_16_fu_1815_p3");
    sc_trace(mVcdFile, tmp_19_fu_1842_p3, "tmp_19_fu_1842_p3");
    sc_trace(mVcdFile, tmp_22_fu_1878_p3, "tmp_22_fu_1878_p3");
    sc_trace(mVcdFile, tmp_29_fu_1957_p3, "tmp_29_fu_1957_p3");
    sc_trace(mVcdFile, tmp_32_fu_1984_p3, "tmp_32_fu_1984_p3");
    sc_trace(mVcdFile, tmp_34_fu_2016_p3, "tmp_34_fu_2016_p3");
    sc_trace(mVcdFile, tmp_36_fu_2070_p3, "tmp_36_fu_2070_p3");
    sc_trace(mVcdFile, tmp_39_fu_2097_p3, "tmp_39_fu_2097_p3");
    sc_trace(mVcdFile, tmp_46_fu_2177_p3, "tmp_46_fu_2177_p3");
    sc_trace(mVcdFile, tmp_49_fu_2204_p3, "tmp_49_fu_2204_p3");
    sc_trace(mVcdFile, tmp_52_fu_2240_p3, "tmp_52_fu_2240_p3");
    sc_trace(mVcdFile, tmp_59_fu_2319_p3, "tmp_59_fu_2319_p3");
    sc_trace(mVcdFile, tmp_62_fu_2346_p3, "tmp_62_fu_2346_p3");
    sc_trace(mVcdFile, tmp_64_fu_2378_p3, "tmp_64_fu_2378_p3");
    sc_trace(mVcdFile, tmp_95_cast_cast_cas_fu_1642_p3, "tmp_95_cast_cast_cas_fu_1642_p3");
    sc_trace(mVcdFile, tmp_98_cast_cast_cas_fu_2414_p3, "tmp_98_cast_cast_cas_fu_2414_p3");
    sc_trace(mVcdFile, tmp_68_fu_2468_p2, "tmp_68_fu_2468_p2");
    sc_trace(mVcdFile, tmp_4_fu_1518_p1, "tmp_4_fu_1518_p1");
    sc_trace(mVcdFile, tmp_4_1_fu_1529_p1, "tmp_4_1_fu_1529_p1");
    sc_trace(mVcdFile, tmp_4_2_fu_1534_p1, "tmp_4_2_fu_1534_p1");
    sc_trace(mVcdFile, tmp_4_3_fu_1539_p1, "tmp_4_3_fu_1539_p1");
    sc_trace(mVcdFile, tmp_4_4_fu_1543_p1, "tmp_4_4_fu_1543_p1");
    sc_trace(mVcdFile, tmp_4_5_fu_1547_p1, "tmp_4_5_fu_1547_p1");
    sc_trace(mVcdFile, tmp_4_6_fu_1551_p1, "tmp_4_6_fu_1551_p1");
    sc_trace(mVcdFile, tmp_4_7_fu_1555_p1, "tmp_4_7_fu_1555_p1");
    sc_trace(mVcdFile, tmp_4_8_fu_1559_p1, "tmp_4_8_fu_1559_p1");
    sc_trace(mVcdFile, tmp_4_9_fu_1563_p1, "tmp_4_9_fu_1563_p1");
    sc_trace(mVcdFile, tmp_4_s_fu_1567_p1, "tmp_4_s_fu_1567_p1");
    sc_trace(mVcdFile, tmp_4_10_fu_1571_p1, "tmp_4_10_fu_1571_p1");
    sc_trace(mVcdFile, tmp_4_11_fu_1575_p1, "tmp_4_11_fu_1575_p1");
    sc_trace(mVcdFile, tmp_4_12_fu_1579_p1, "tmp_4_12_fu_1579_p1");
    sc_trace(mVcdFile, tmp_4_13_fu_1583_p1, "tmp_4_13_fu_1583_p1");
    sc_trace(mVcdFile, tmp_4_14_fu_1587_p1, "tmp_4_14_fu_1587_p1");
    sc_trace(mVcdFile, tmp_4_15_fu_1591_p1, "tmp_4_15_fu_1591_p1");
    sc_trace(mVcdFile, tmp_4_16_fu_1595_p1, "tmp_4_16_fu_1595_p1");
    sc_trace(mVcdFile, tmp_4_17_fu_1599_p1, "tmp_4_17_fu_1599_p1");
    sc_trace(mVcdFile, tmp_4_18_fu_1603_p1, "tmp_4_18_fu_1603_p1");
    sc_trace(mVcdFile, tmp_4_19_fu_1607_p1, "tmp_4_19_fu_1607_p1");
    sc_trace(mVcdFile, tmp_4_20_fu_1611_p1, "tmp_4_20_fu_1611_p1");
    sc_trace(mVcdFile, tmp_4_21_fu_1615_p1, "tmp_4_21_fu_1615_p1");
    sc_trace(mVcdFile, tmp_4_22_fu_1656_p1, "tmp_4_22_fu_1656_p1");
    sc_trace(mVcdFile, tmp_4_23_fu_1678_p1, "tmp_4_23_fu_1678_p1");
    sc_trace(mVcdFile, tmp_70_fu_1717_p1, "tmp_70_fu_1717_p1");
    sc_trace(mVcdFile, tmp_109_1_fu_1726_p1, "tmp_109_1_fu_1726_p1");
    sc_trace(mVcdFile, tmp_109_2_fu_1762_p1, "tmp_109_2_fu_1762_p1");
    sc_trace(mVcdFile, tmp_109_3_fu_1780_p1, "tmp_109_3_fu_1780_p1");
    sc_trace(mVcdFile, tmp_109_4_fu_1833_p1, "tmp_109_4_fu_1833_p1");
    sc_trace(mVcdFile, tmp_109_5_fu_1869_p1, "tmp_109_5_fu_1869_p1");
    sc_trace(mVcdFile, tmp_109_6_fu_1905_p1, "tmp_109_6_fu_1905_p1");
    sc_trace(mVcdFile, tmp_109_7_fu_1923_p1, "tmp_109_7_fu_1923_p1");
    sc_trace(mVcdFile, tmp_109_8_fu_1975_p1, "tmp_109_8_fu_1975_p1");
    sc_trace(mVcdFile, tmp_109_9_fu_2011_p1, "tmp_109_9_fu_2011_p1");
    sc_trace(mVcdFile, tmp_109_s_fu_2043_p1, "tmp_109_s_fu_2043_p1");
    sc_trace(mVcdFile, tmp_109_10_fu_2061_p1, "tmp_109_10_fu_2061_p1");
    sc_trace(mVcdFile, tmp_109_11_fu_2088_p1, "tmp_109_11_fu_2088_p1");
    sc_trace(mVcdFile, tmp_109_12_fu_2124_p1, "tmp_109_12_fu_2124_p1");
    sc_trace(mVcdFile, tmp_109_13_fu_2142_p1, "tmp_109_13_fu_2142_p1");
    sc_trace(mVcdFile, tmp_109_14_fu_2195_p1, "tmp_109_14_fu_2195_p1");
    sc_trace(mVcdFile, tmp_109_15_fu_2231_p1, "tmp_109_15_fu_2231_p1");
    sc_trace(mVcdFile, tmp_109_16_fu_2267_p1, "tmp_109_16_fu_2267_p1");
    sc_trace(mVcdFile, tmp_109_17_fu_2285_p1, "tmp_109_17_fu_2285_p1");
    sc_trace(mVcdFile, tmp_109_18_fu_2337_p1, "tmp_109_18_fu_2337_p1");
    sc_trace(mVcdFile, tmp_109_19_fu_2373_p1, "tmp_109_19_fu_2373_p1");
    sc_trace(mVcdFile, tmp_109_20_fu_2401_p1, "tmp_109_20_fu_2401_p1");
    sc_trace(mVcdFile, tmp_109_21_fu_2445_p1, "tmp_109_21_fu_2445_p1");
    sc_trace(mVcdFile, tmp_109_22_fu_2459_p1, "tmp_109_22_fu_2459_p1");
    sc_trace(mVcdFile, tmp_113_15_fu_1673_p1, "tmp_113_15_fu_1673_p1");
    sc_trace(mVcdFile, tmp_69_fu_1753_p1, "tmp_69_fu_1753_p1");
    sc_trace(mVcdFile, tmp_113_1_fu_1771_p1, "tmp_113_1_fu_1771_p1");
    sc_trace(mVcdFile, tmp_113_2_fu_1860_p1, "tmp_113_2_fu_1860_p1");
    sc_trace(mVcdFile, tmp_113_3_fu_1896_p1, "tmp_113_3_fu_1896_p1");
    sc_trace(mVcdFile, tmp_113_4_fu_1914_p1, "tmp_113_4_fu_1914_p1");
    sc_trace(mVcdFile, tmp_113_5_fu_2002_p1, "tmp_113_5_fu_2002_p1");
    sc_trace(mVcdFile, tmp_113_6_fu_2034_p1, "tmp_113_6_fu_2034_p1");
    sc_trace(mVcdFile, tmp_113_7_fu_2052_p1, "tmp_113_7_fu_2052_p1");
    sc_trace(mVcdFile, tmp_113_8_fu_2115_p1, "tmp_113_8_fu_2115_p1");
    sc_trace(mVcdFile, tmp_113_9_fu_2133_p1, "tmp_113_9_fu_2133_p1");
    sc_trace(mVcdFile, tmp_113_s_fu_2222_p1, "tmp_113_s_fu_2222_p1");
    sc_trace(mVcdFile, tmp_113_10_fu_2258_p1, "tmp_113_10_fu_2258_p1");
    sc_trace(mVcdFile, tmp_113_11_fu_2276_p1, "tmp_113_11_fu_2276_p1");
    sc_trace(mVcdFile, tmp_113_12_fu_2364_p1, "tmp_113_12_fu_2364_p1");
    sc_trace(mVcdFile, tmp_113_13_fu_2396_p1, "tmp_113_13_fu_2396_p1");
    sc_trace(mVcdFile, tmp_113_14_fu_2440_p1, "tmp_113_14_fu_2440_p1");
    sc_trace(mVcdFile, tmp_113_16_fu_2454_p1, "tmp_113_16_fu_2454_p1");
    sc_trace(mVcdFile, tmp_6_fu_1619_p2, "tmp_6_fu_1619_p2");
    sc_trace(mVcdFile, tmp_65_fu_1635_p3, "tmp_65_fu_1635_p3");
    sc_trace(mVcdFile, tmp_3_fu_1699_p1, "tmp_3_fu_1699_p1");
    sc_trace(mVcdFile, tmp_9_fu_1731_p1, "tmp_9_fu_1731_p1");
    sc_trace(mVcdFile, tmp_11_fu_1785_p1, "tmp_11_fu_1785_p1");
    sc_trace(mVcdFile, tmp_14_fu_1801_p3, "tmp_14_fu_1801_p3");
    sc_trace(mVcdFile, tmp_12_fu_1789_p3, "tmp_12_fu_1789_p3");
    sc_trace(mVcdFile, tmp_13_fu_1797_p1, "tmp_13_fu_1797_p1");
    sc_trace(mVcdFile, tmp_15_fu_1809_p2, "tmp_15_fu_1809_p2");
    sc_trace(mVcdFile, tmp_18_fu_1838_p1, "tmp_18_fu_1838_p1");
    sc_trace(mVcdFile, tmp_21_fu_1874_p1, "tmp_21_fu_1874_p1");
    sc_trace(mVcdFile, tmp_24_fu_1928_p1, "tmp_24_fu_1928_p1");
    sc_trace(mVcdFile, tmp_27_fu_1943_p3, "tmp_27_fu_1943_p3");
    sc_trace(mVcdFile, tmp_25_fu_1931_p3, "tmp_25_fu_1931_p3");
    sc_trace(mVcdFile, tmp_26_fu_1939_p1, "tmp_26_fu_1939_p1");
    sc_trace(mVcdFile, tmp_28_fu_1951_p2, "tmp_28_fu_1951_p2");
    sc_trace(mVcdFile, tmp_31_fu_1980_p1, "tmp_31_fu_1980_p1");
    sc_trace(mVcdFile, tmp_35_fu_2066_p1, "tmp_35_fu_2066_p1");
    sc_trace(mVcdFile, tmp_38_fu_2093_p1, "tmp_38_fu_2093_p1");
    sc_trace(mVcdFile, tmp_41_fu_2147_p1, "tmp_41_fu_2147_p1");
    sc_trace(mVcdFile, tmp_44_fu_2163_p3, "tmp_44_fu_2163_p3");
    sc_trace(mVcdFile, tmp_42_fu_2151_p3, "tmp_42_fu_2151_p3");
    sc_trace(mVcdFile, tmp_43_fu_2159_p1, "tmp_43_fu_2159_p1");
    sc_trace(mVcdFile, tmp_45_fu_2171_p2, "tmp_45_fu_2171_p2");
    sc_trace(mVcdFile, tmp_48_fu_2200_p1, "tmp_48_fu_2200_p1");
    sc_trace(mVcdFile, tmp_51_fu_2236_p1, "tmp_51_fu_2236_p1");
    sc_trace(mVcdFile, tmp_54_fu_2290_p1, "tmp_54_fu_2290_p1");
    sc_trace(mVcdFile, tmp_57_fu_2305_p3, "tmp_57_fu_2305_p3");
    sc_trace(mVcdFile, tmp_55_fu_2293_p3, "tmp_55_fu_2293_p3");
    sc_trace(mVcdFile, tmp_56_fu_2301_p1, "tmp_56_fu_2301_p1");
    sc_trace(mVcdFile, tmp_58_fu_2313_p2, "tmp_58_fu_2313_p2");
    sc_trace(mVcdFile, tmp_61_fu_2342_p1, "tmp_61_fu_2342_p1");
    sc_trace(mVcdFile, tmp_66_fu_2406_p3, "tmp_66_fu_2406_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("RC_RECEIVER.hdltvin.dat");
    mHdltvoutHandle.open("RC_RECEIVER.hdltvout.dat");
}

RC_RECEIVER::~RC_RECEIVER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete lookuptable_U;
    delete buffer_r_U;
    delete RC_RECEIVER_CTRL_s_axi_U;
    delete RC_RECEIVER_TEST_CHAN_s_axi_U;
    delete RC_RECEIVER_TEST_NORM_s_axi_U;
    delete RC_RECEIVER_TEST_REV_s_axi_U;
}

void RC_RECEIVER::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void RC_RECEIVER::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0))) {
        errors_loc_reg_1392 = tmp_7_fu_1683_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
                esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1))) {
        errors_loc_reg_1392 = errors.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        SBUS_data_load_10_reg_2612 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        SBUS_data_load_11_reg_2623 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        SBUS_data_load_12_reg_2634 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        SBUS_data_load_13_reg_2645 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        SBUS_data_load_14_reg_2656 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        SBUS_data_load_15_reg_2667 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        SBUS_data_load_16_reg_2678 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        SBUS_data_load_17_reg_2689 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        SBUS_data_load_18_reg_2700 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        SBUS_data_load_19_reg_2711 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        SBUS_data_load_20_reg_2722 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        SBUS_data_load_21_reg_2733 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        SBUS_data_load_22_reg_2744 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        SBUS_data_load_23_reg_2755 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        SBUS_data_load_3_reg_2535 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SBUS_data_load_4_reg_2546 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        SBUS_data_load_5_reg_2557 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        SBUS_data_load_6_reg_2568 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        SBUS_data_load_7_reg_2579 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        SBUS_data_load_8_reg_2590 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        SBUS_data_load_9_reg_2601 = SBUS_data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buffer_load_1_reg_2505 = buffer_r_q1.read();
        tmp_reg_2495 = tmp_fu_1509_p1.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        channels_0 = tmp_8_fu_1703_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        channels_1 = tmp_s_fu_1735_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        channels_10 = tmp_46_fu_2177_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()))) {
        channels_11 = tmp_49_fu_2204_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        channels_12 = tmp_52_fu_2240_p3.read();
        tmp_53_reg_2877 = lookuptable_q0.read().range(7, 7);
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()))) {
        channels_13 = tmp_59_fu_2319_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()))) {
        channels_14 = tmp_62_fu_2346_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        channels_15 = tmp_64_fu_2378_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_1625_p2.read()))) {
        channels_16 = tmp_95_cast_cast_cas_fu_1642_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        channels_17 = tmp_98_cast_cast_cas_fu_2414_p3.read();
        tmp_67_reg_2902 = lookuptable_q0.read().range(2, 2);
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        channels_2 = tmp_16_fu_1815_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        channels_3 = tmp_19_fu_1842_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        channels_4 = tmp_22_fu_1878_p3.read();
        tmp_23_reg_2817 = lookuptable_q0.read().range(7, 7);
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        channels_5 = tmp_29_fu_1957_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        channels_6 = tmp_32_fu_1984_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        channels_7 = tmp_34_fu_2016_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        channels_8 = tmp_36_fu_2070_p3.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        channels_9 = tmp_39_fu_2097_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0))) {
        errors = tmp_7_fu_1683_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        errors_load_reg_2776 = errors.read();
    }
    if ((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_67_reg_2902.read()))) {
        lost = tmp_68_fu_2468_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        or_cond_reg_2767 = or_cond_fu_1625_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_1469 = SBUS_data_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_1473 = SBUS_data_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
  esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1)) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())))) {
        reg_1477 = lookuptable_q0.read();
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())))) {
        reg_1481 = lookuptable_q0.read();
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())))) {
        reg_1485 = lookuptable_q0.read().range(7, 3);
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())))) {
        reg_1489 = lookuptable_q0.read().range(7, 6);
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())))) {
        reg_1493 = lookuptable_q0.read().range(7, 1);
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())))) {
        reg_1497 = lookuptable_q0.read().range(7, 4);
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())))) {
        reg_1501 = lookuptable_q0.read().range(7, 2);
    }
    if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) || (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())))) {
        reg_1505 = lookuptable_q0.read().range(7, 5);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_1_reg_2515 = tmp_1_fu_1514_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_2_reg_2530 = tmp_2_fu_1523_p2.read();
    }
}

void RC_RECEIVER::thread_SBUS_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        SBUS_data_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        SBUS_data_address0 = "XXXXX";
    }
}

void RC_RECEIVER::thread_SBUS_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        SBUS_data_ce0 = ap_const_logic_1;
    } else {
        SBUS_data_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void RC_RECEIVER::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void RC_RECEIVER::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void RC_RECEIVER::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void RC_RECEIVER::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void RC_RECEIVER::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void RC_RECEIVER::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void RC_RECEIVER::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void RC_RECEIVER::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void RC_RECEIVER::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void RC_RECEIVER::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void RC_RECEIVER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void RC_RECEIVER::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void RC_RECEIVER::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void RC_RECEIVER::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void RC_RECEIVER::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void RC_RECEIVER::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void RC_RECEIVER::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void RC_RECEIVER::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void RC_RECEIVER::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void RC_RECEIVER::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void RC_RECEIVER::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void RC_RECEIVER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void RC_RECEIVER::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void RC_RECEIVER::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void RC_RECEIVER::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void RC_RECEIVER::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void RC_RECEIVER::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void RC_RECEIVER::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void RC_RECEIVER::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void RC_RECEIVER::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void RC_RECEIVER::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void RC_RECEIVER::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void RC_RECEIVER::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void RC_RECEIVER::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void RC_RECEIVER::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void RC_RECEIVER::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void RC_RECEIVER::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void RC_RECEIVER::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void RC_RECEIVER::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void RC_RECEIVER::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void RC_RECEIVER::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void RC_RECEIVER::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void RC_RECEIVER::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void RC_RECEIVER::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void RC_RECEIVER::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void RC_RECEIVER::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void RC_RECEIVER::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void RC_RECEIVER::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void RC_RECEIVER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void RC_RECEIVER::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void RC_RECEIVER::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_phi_mux_errors_loc_phi_fu_1395_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0))) {
        ap_phi_mux_errors_loc_phi_fu_1395_p4 = tmp_7_fu_1683_p2.read();
    } else {
        ap_phi_mux_errors_loc_phi_fu_1395_p4 = errors_loc_reg_1392.read();
    }
}

void RC_RECEIVER::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void RC_RECEIVER::thread_buffer_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        buffer_r_address0 = ap_const_lv5_18;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        buffer_r_address0 = ap_const_lv5_16;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        buffer_r_address0 = ap_const_lv5_14;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_r_address0 = ap_const_lv5_12;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        buffer_r_address0 = ap_const_lv5_10;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        buffer_r_address0 = ap_const_lv5_E;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        buffer_r_address0 = ap_const_lv5_C;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        buffer_r_address0 = ap_const_lv5_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        buffer_r_address0 = ap_const_lv5_8;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        buffer_r_address0 = ap_const_lv5_6;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        buffer_r_address0 = ap_const_lv5_4;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        buffer_r_address0 = ap_const_lv5_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buffer_r_address0 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        buffer_r_address0 = ap_const_lv5_1;
    } else {
        buffer_r_address0 = "XXXXX";
    }
}

void RC_RECEIVER::thread_buffer_r_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        buffer_r_address1 = ap_const_lv5_17;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_r_address1 = ap_const_lv5_15;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        buffer_r_address1 = ap_const_lv5_13;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        buffer_r_address1 = ap_const_lv5_11;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        buffer_r_address1 = ap_const_lv5_F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        buffer_r_address1 = ap_const_lv5_D;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        buffer_r_address1 = ap_const_lv5_B;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        buffer_r_address1 = ap_const_lv5_9;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        buffer_r_address1 = ap_const_lv5_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        buffer_r_address1 = ap_const_lv5_5;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        buffer_r_address1 = ap_const_lv5_3;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        buffer_r_address1 = ap_const_lv5_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        buffer_r_address1 = ap_const_lv5_2;
    } else {
        buffer_r_address1 = "XXXXX";
    }
}

void RC_RECEIVER::thread_buffer_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_buffer_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        buffer_r_ce1 = ap_const_logic_1;
    } else {
        buffer_r_ce1 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_buffer_r_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        buffer_r_d0 = lookuptable_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        buffer_r_d0 = SBUS_data_q0.read();
    } else {
        buffer_r_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void RC_RECEIVER::thread_buffer_r_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        buffer_r_d1 = lookuptable_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        buffer_r_d1 = SBUS_data_q0.read();
    } else {
        buffer_r_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void RC_RECEIVER::thread_buffer_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        buffer_r_we0 = ap_const_logic_1;
    } else {
        buffer_r_we0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_buffer_r_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        buffer_r_we1 = ap_const_logic_1;
    } else {
        buffer_r_we1 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_channel_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        channel_data_address0 =  (sc_lv<12>) (ap_const_lv64_10);
    } else {
        channel_data_address0 =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_channel_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        channel_data_ce0 = ap_const_logic_1;
    } else {
        channel_data_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_channel_data_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        channel_data_d0 = tmp_113_16_fu_2454_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        channel_data_d0 = tmp_113_14_fu_2440_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        channel_data_d0 = tmp_113_13_fu_2396_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        channel_data_d0 = tmp_113_12_fu_2364_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        channel_data_d0 = tmp_113_11_fu_2276_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        channel_data_d0 = tmp_113_10_fu_2258_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        channel_data_d0 = tmp_113_s_fu_2222_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        channel_data_d0 = tmp_113_9_fu_2133_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        channel_data_d0 = tmp_113_8_fu_2115_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        channel_data_d0 = tmp_113_7_fu_2052_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        channel_data_d0 = tmp_113_6_fu_2034_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        channel_data_d0 = tmp_113_5_fu_2002_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        channel_data_d0 = tmp_113_4_fu_1914_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        channel_data_d0 = tmp_113_3_fu_1896_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        channel_data_d0 = tmp_113_2_fu_1860_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        channel_data_d0 = tmp_113_1_fu_1771_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        channel_data_d0 = tmp_69_fu_1753_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        channel_data_d0 = tmp_113_15_fu_1673_p1.read();
    } else {
        channel_data_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_channel_data_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        channel_data_we0 = ap_const_logic_1;
    } else {
        channel_data_we0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_lookuptable_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i22_fu_2369_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i21_fu_2333_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i20_fu_2281_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i19_fu_2263_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i18_fu_2227_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i17_fu_2191_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i16_fu_2138_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i15_fu_2120_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i14_fu_2084_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i13_fu_2057_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i12_fu_2039_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i11_fu_2007_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i10_fu_1971_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i9_fu_1919_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i8_fu_1901_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i7_fu_1865_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i6_fu_1829_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i5_fu_1776_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i4_fu_1758_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i3_fu_1722_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i2_fu_1695_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i1_fu_1664_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        lookuptable_address0 =  (sc_lv<8>) (tmp_i_fu_1630_p1.read());
    } else {
        lookuptable_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void RC_RECEIVER::thread_lookuptable_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        lookuptable_ce0 = ap_const_logic_1;
    } else {
        lookuptable_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_norm_out_addr_16_reg_2500() {
    norm_out_addr_16_reg_2500 =  (sc_lv<12>) (ap_const_lv64_1A);
}

void RC_RECEIVER::thread_norm_out_addr_26_reg_2485() {
    norm_out_addr_26_reg_2485 =  (sc_lv<12>) (ap_const_lv64_19);
}

void RC_RECEIVER::thread_norm_out_addr_27_reg_2520() {
    norm_out_addr_27_reg_2520 =  (sc_lv<12>) (ap_const_lv64_1B);
}

void RC_RECEIVER::thread_norm_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        norm_out_address0 = norm_out_addr_27_reg_2520.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        norm_out_address0 = norm_out_addr_16_reg_2500.read();
    } else if (((esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                 esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0)))) {
        norm_out_address0 = norm_out_addr_26_reg_2485.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        norm_out_address0 =  (sc_lv<12>) (ap_const_lv64_19);
    } else {
        norm_out_address0 =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_norm_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0)))) {
        norm_out_ce0 = ap_const_logic_1;
    } else {
        norm_out_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_norm_out_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        norm_out_d0 = tmp_1_reg_2515.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        norm_out_d0 = tmp_reg_2495.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0))) {
        norm_out_d0 = ap_const_lv32_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        norm_out_d0 = tmp_4_23_fu_1678_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        norm_out_d0 = tmp_4_22_fu_1656_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        norm_out_d0 = tmp_4_21_fu_1615_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        norm_out_d0 = tmp_4_20_fu_1611_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        norm_out_d0 = tmp_4_19_fu_1607_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        norm_out_d0 = tmp_4_18_fu_1603_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        norm_out_d0 = tmp_4_17_fu_1599_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        norm_out_d0 = tmp_4_16_fu_1595_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        norm_out_d0 = tmp_4_15_fu_1591_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        norm_out_d0 = tmp_4_14_fu_1587_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        norm_out_d0 = tmp_4_13_fu_1583_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        norm_out_d0 = tmp_4_12_fu_1579_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        norm_out_d0 = tmp_4_11_fu_1575_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        norm_out_d0 = tmp_4_10_fu_1571_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        norm_out_d0 = tmp_4_s_fu_1567_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        norm_out_d0 = tmp_4_9_fu_1563_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        norm_out_d0 = tmp_4_8_fu_1559_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        norm_out_d0 = tmp_4_7_fu_1555_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        norm_out_d0 = tmp_4_6_fu_1551_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        norm_out_d0 = tmp_4_5_fu_1547_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        norm_out_d0 = tmp_4_4_fu_1543_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        norm_out_d0 = tmp_4_3_fu_1539_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        norm_out_d0 = tmp_4_2_fu_1534_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        norm_out_d0 = tmp_4_1_fu_1529_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        norm_out_d0 = tmp_4_fu_1518_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        norm_out_d0 = tmp_1_fu_1514_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        norm_out_d0 = tmp_fu_1509_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())))) {
        norm_out_d0 = ap_const_lv32_45;
    } else {
        norm_out_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_norm_out_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_0)))) {
        norm_out_we0 = ap_const_logic_1;
    } else {
        norm_out_we0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_or_cond_fu_1625_p2() {
    or_cond_fu_1625_p2 = (tmp_2_reg_2530.read() & tmp_6_fu_1619_p2.read());
}

void RC_RECEIVER::thread_reverse_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        reverse_out_address0 =  (sc_lv<12>) (ap_const_lv64_0);
    } else {
        reverse_out_address0 =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_reverse_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        reverse_out_ce0 = ap_const_logic_1;
    } else {
        reverse_out_ce0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_reverse_out_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        reverse_out_d0 = tmp_109_22_fu_2459_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        reverse_out_d0 = tmp_109_21_fu_2445_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        reverse_out_d0 = tmp_109_20_fu_2401_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        reverse_out_d0 = tmp_109_19_fu_2373_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        reverse_out_d0 = tmp_109_18_fu_2337_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        reverse_out_d0 = tmp_109_17_fu_2285_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        reverse_out_d0 = tmp_109_16_fu_2267_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        reverse_out_d0 = tmp_109_15_fu_2231_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        reverse_out_d0 = tmp_109_14_fu_2195_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        reverse_out_d0 = tmp_109_13_fu_2142_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        reverse_out_d0 = tmp_109_12_fu_2124_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        reverse_out_d0 = tmp_109_11_fu_2088_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        reverse_out_d0 = tmp_109_10_fu_2061_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        reverse_out_d0 = tmp_109_s_fu_2043_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        reverse_out_d0 = tmp_109_9_fu_2011_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        reverse_out_d0 = tmp_109_8_fu_1975_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        reverse_out_d0 = tmp_109_7_fu_1923_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        reverse_out_d0 = tmp_109_6_fu_1905_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        reverse_out_d0 = tmp_109_5_fu_1869_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        reverse_out_d0 = tmp_109_4_fu_1833_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        reverse_out_d0 = tmp_109_3_fu_1780_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        reverse_out_d0 = tmp_109_2_fu_1762_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        reverse_out_d0 = tmp_109_1_fu_1726_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        reverse_out_d0 = tmp_70_fu_1717_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        reverse_out_d0 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        reverse_out_d0 = ap_const_lv32_F;
    } else {
        reverse_out_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void RC_RECEIVER::thread_reverse_out_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_1625_p2.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) || 
         (esl_seteq<1,1,1>(or_cond_reg_2767.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())))) {
        reverse_out_we0 = ap_const_logic_1;
    } else {
        reverse_out_we0 = ap_const_logic_0;
    }
}

void RC_RECEIVER::thread_tmp_109_10_fu_2061_p1() {
    tmp_109_10_fu_2061_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_11_fu_2088_p1() {
    tmp_109_11_fu_2088_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_12_fu_2124_p1() {
    tmp_109_12_fu_2124_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_13_fu_2142_p1() {
    tmp_109_13_fu_2142_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_14_fu_2195_p1() {
    tmp_109_14_fu_2195_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_15_fu_2231_p1() {
    tmp_109_15_fu_2231_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_16_fu_2267_p1() {
    tmp_109_16_fu_2267_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_17_fu_2285_p1() {
    tmp_109_17_fu_2285_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_18_fu_2337_p1() {
    tmp_109_18_fu_2337_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_19_fu_2373_p1() {
    tmp_109_19_fu_2373_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_1_fu_1726_p1() {
    tmp_109_1_fu_1726_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_20_fu_2401_p1() {
    tmp_109_20_fu_2401_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_21_fu_2445_p1() {
    tmp_109_21_fu_2445_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_22_fu_2459_p1() {
    tmp_109_22_fu_2459_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_2_fu_1762_p1() {
    tmp_109_2_fu_1762_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_3_fu_1780_p1() {
    tmp_109_3_fu_1780_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_4_fu_1833_p1() {
    tmp_109_4_fu_1833_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_5_fu_1869_p1() {
    tmp_109_5_fu_1869_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_6_fu_1905_p1() {
    tmp_109_6_fu_1905_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_7_fu_1923_p1() {
    tmp_109_7_fu_1923_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_8_fu_1975_p1() {
    tmp_109_8_fu_1975_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_109_9_fu_2011_p1() {
    tmp_109_9_fu_2011_p1 = esl_zext<32,8>(reg_1477.read());
}

void RC_RECEIVER::thread_tmp_109_s_fu_2043_p1() {
    tmp_109_s_fu_2043_p1 = esl_zext<32,8>(reg_1481.read());
}

void RC_RECEIVER::thread_tmp_113_10_fu_2258_p1() {
    tmp_113_10_fu_2258_p1 = esl_zext<32,11>(channels_11.read());
}

void RC_RECEIVER::thread_tmp_113_11_fu_2276_p1() {
    tmp_113_11_fu_2276_p1 = esl_zext<32,11>(channels_12.read());
}

void RC_RECEIVER::thread_tmp_113_12_fu_2364_p1() {
    tmp_113_12_fu_2364_p1 = esl_zext<32,11>(channels_13.read());
}

void RC_RECEIVER::thread_tmp_113_13_fu_2396_p1() {
    tmp_113_13_fu_2396_p1 = esl_zext<32,11>(channels_14.read());
}

void RC_RECEIVER::thread_tmp_113_14_fu_2440_p1() {
    tmp_113_14_fu_2440_p1 = esl_zext<32,11>(channels_15.read());
}

void RC_RECEIVER::thread_tmp_113_15_fu_1673_p1() {
    tmp_113_15_fu_1673_p1 = esl_zext<32,11>(channels_16.read());
}

void RC_RECEIVER::thread_tmp_113_16_fu_2454_p1() {
    tmp_113_16_fu_2454_p1 = esl_zext<32,11>(channels_17.read());
}

void RC_RECEIVER::thread_tmp_113_1_fu_1771_p1() {
    tmp_113_1_fu_1771_p1 = esl_zext<32,11>(channels_1.read());
}

void RC_RECEIVER::thread_tmp_113_2_fu_1860_p1() {
    tmp_113_2_fu_1860_p1 = esl_zext<32,11>(channels_2.read());
}

void RC_RECEIVER::thread_tmp_113_3_fu_1896_p1() {
    tmp_113_3_fu_1896_p1 = esl_zext<32,11>(channels_3.read());
}

void RC_RECEIVER::thread_tmp_113_4_fu_1914_p1() {
    tmp_113_4_fu_1914_p1 = esl_zext<32,11>(channels_4.read());
}

void RC_RECEIVER::thread_tmp_113_5_fu_2002_p1() {
    tmp_113_5_fu_2002_p1 = esl_zext<32,11>(channels_5.read());
}

void RC_RECEIVER::thread_tmp_113_6_fu_2034_p1() {
    tmp_113_6_fu_2034_p1 = esl_zext<32,11>(channels_6.read());
}

void RC_RECEIVER::thread_tmp_113_7_fu_2052_p1() {
    tmp_113_7_fu_2052_p1 = esl_zext<32,11>(channels_7.read());
}

void RC_RECEIVER::thread_tmp_113_8_fu_2115_p1() {
    tmp_113_8_fu_2115_p1 = esl_zext<32,11>(channels_8.read());
}

void RC_RECEIVER::thread_tmp_113_9_fu_2133_p1() {
    tmp_113_9_fu_2133_p1 = esl_zext<32,11>(channels_9.read());
}

void RC_RECEIVER::thread_tmp_113_s_fu_2222_p1() {
    tmp_113_s_fu_2222_p1 = esl_zext<32,11>(channels_10.read());
}

void RC_RECEIVER::thread_tmp_11_fu_1785_p1() {
    tmp_11_fu_1785_p1 = esl_zext<8,2>(reg_1489.read());
}

void RC_RECEIVER::thread_tmp_12_fu_1789_p3() {
    tmp_12_fu_1789_p3 = esl_concat<8,2>(reg_1481.read(), ap_const_lv2_0);
}

void RC_RECEIVER::thread_tmp_13_fu_1797_p1() {
    tmp_13_fu_1797_p1 = lookuptable_q0.read().range(1-1, 0);
}

void RC_RECEIVER::thread_tmp_14_fu_1801_p3() {
    tmp_14_fu_1801_p3 = esl_concat<2,8>(ap_const_lv2_0, tmp_11_fu_1785_p1.read());
}

void RC_RECEIVER::thread_tmp_15_fu_1809_p2() {
    tmp_15_fu_1809_p2 = (tmp_14_fu_1801_p3.read() | tmp_12_fu_1789_p3.read());
}

void RC_RECEIVER::thread_tmp_16_fu_1815_p3() {
    tmp_16_fu_1815_p3 = esl_concat<1,10>(tmp_13_fu_1797_p1.read(), tmp_15_fu_1809_p2.read());
}

void RC_RECEIVER::thread_tmp_18_fu_1838_p1() {
    tmp_18_fu_1838_p1 = lookuptable_q0.read().range(4-1, 0);
}

void RC_RECEIVER::thread_tmp_19_fu_1842_p3() {
    tmp_19_fu_1842_p3 = esl_concat<4,7>(tmp_18_fu_1838_p1.read(), reg_1493.read());
}

void RC_RECEIVER::thread_tmp_1_fu_1514_p1() {
    tmp_1_fu_1514_p1 = esl_zext<32,8>(buffer_load_1_reg_2505.read());
}

void RC_RECEIVER::thread_tmp_21_fu_1874_p1() {
    tmp_21_fu_1874_p1 = lookuptable_q0.read().range(7-1, 0);
}

void RC_RECEIVER::thread_tmp_22_fu_1878_p3() {
    tmp_22_fu_1878_p3 = esl_concat<7,4>(tmp_21_fu_1874_p1.read(), reg_1497.read());
}

void RC_RECEIVER::thread_tmp_24_fu_1928_p1() {
    tmp_24_fu_1928_p1 = esl_zext<8,1>(tmp_23_reg_2817.read());
}

void RC_RECEIVER::thread_tmp_25_fu_1931_p3() {
    tmp_25_fu_1931_p3 = esl_concat<8,1>(reg_1481.read(), ap_const_lv1_0);
}

void RC_RECEIVER::thread_tmp_26_fu_1939_p1() {
    tmp_26_fu_1939_p1 = lookuptable_q0.read().range(2-1, 0);
}

void RC_RECEIVER::thread_tmp_27_fu_1943_p3() {
    tmp_27_fu_1943_p3 = esl_concat<1,8>(ap_const_lv1_0, tmp_24_fu_1928_p1.read());
}

void RC_RECEIVER::thread_tmp_28_fu_1951_p2() {
    tmp_28_fu_1951_p2 = (tmp_27_fu_1943_p3.read() | tmp_25_fu_1931_p3.read());
}

void RC_RECEIVER::thread_tmp_29_fu_1957_p3() {
    tmp_29_fu_1957_p3 = esl_concat<2,9>(tmp_26_fu_1939_p1.read(), tmp_28_fu_1951_p2.read());
}

void RC_RECEIVER::thread_tmp_2_fu_1523_p2() {
    tmp_2_fu_1523_p2 = (!reg_1469.read().is_01() || !ap_const_lv8_F.is_01())? sc_lv<1>(): sc_lv<1>(reg_1469.read() == ap_const_lv8_F);
}

void RC_RECEIVER::thread_tmp_31_fu_1980_p1() {
    tmp_31_fu_1980_p1 = lookuptable_q0.read().range(5-1, 0);
}

void RC_RECEIVER::thread_tmp_32_fu_1984_p3() {
    tmp_32_fu_1984_p3 = esl_concat<5,6>(tmp_31_fu_1980_p1.read(), reg_1501.read());
}

void RC_RECEIVER::thread_tmp_34_fu_2016_p3() {
    tmp_34_fu_2016_p3 = esl_concat<8,3>(lookuptable_q0.read(), reg_1505.read());
}

void RC_RECEIVER::thread_tmp_35_fu_2066_p1() {
    tmp_35_fu_2066_p1 = lookuptable_q0.read().range(3-1, 0);
}

void RC_RECEIVER::thread_tmp_36_fu_2070_p3() {
    tmp_36_fu_2070_p3 = esl_concat<3,8>(tmp_35_fu_2066_p1.read(), reg_1481.read());
}

void RC_RECEIVER::thread_tmp_38_fu_2093_p1() {
    tmp_38_fu_2093_p1 = lookuptable_q0.read().range(6-1, 0);
}

void RC_RECEIVER::thread_tmp_39_fu_2097_p3() {
    tmp_39_fu_2097_p3 = esl_concat<6,5>(tmp_38_fu_2093_p1.read(), reg_1485.read());
}

void RC_RECEIVER::thread_tmp_3_fu_1699_p1() {
    tmp_3_fu_1699_p1 = lookuptable_q0.read().range(3-1, 0);
}

void RC_RECEIVER::thread_tmp_41_fu_2147_p1() {
    tmp_41_fu_2147_p1 = esl_zext<8,2>(reg_1489.read());
}

void RC_RECEIVER::thread_tmp_42_fu_2151_p3() {
    tmp_42_fu_2151_p3 = esl_concat<8,2>(reg_1477.read(), ap_const_lv2_0);
}

void RC_RECEIVER::thread_tmp_43_fu_2159_p1() {
    tmp_43_fu_2159_p1 = lookuptable_q0.read().range(1-1, 0);
}

void RC_RECEIVER::thread_tmp_44_fu_2163_p3() {
    tmp_44_fu_2163_p3 = esl_concat<2,8>(ap_const_lv2_0, tmp_41_fu_2147_p1.read());
}

void RC_RECEIVER::thread_tmp_45_fu_2171_p2() {
    tmp_45_fu_2171_p2 = (tmp_44_fu_2163_p3.read() | tmp_42_fu_2151_p3.read());
}

void RC_RECEIVER::thread_tmp_46_fu_2177_p3() {
    tmp_46_fu_2177_p3 = esl_concat<1,10>(tmp_43_fu_2159_p1.read(), tmp_45_fu_2171_p2.read());
}

void RC_RECEIVER::thread_tmp_48_fu_2200_p1() {
    tmp_48_fu_2200_p1 = lookuptable_q0.read().range(4-1, 0);
}

void RC_RECEIVER::thread_tmp_49_fu_2204_p3() {
    tmp_49_fu_2204_p3 = esl_concat<4,7>(tmp_48_fu_2200_p1.read(), reg_1493.read());
}

void RC_RECEIVER::thread_tmp_4_10_fu_1571_p1() {
    tmp_4_10_fu_1571_p1 = esl_zext<32,8>(SBUS_data_load_11_reg_2623.read());
}

void RC_RECEIVER::thread_tmp_4_11_fu_1575_p1() {
    tmp_4_11_fu_1575_p1 = esl_zext<32,8>(SBUS_data_load_12_reg_2634.read());
}

void RC_RECEIVER::thread_tmp_4_12_fu_1579_p1() {
    tmp_4_12_fu_1579_p1 = esl_zext<32,8>(SBUS_data_load_13_reg_2645.read());
}

void RC_RECEIVER::thread_tmp_4_13_fu_1583_p1() {
    tmp_4_13_fu_1583_p1 = esl_zext<32,8>(SBUS_data_load_14_reg_2656.read());
}

void RC_RECEIVER::thread_tmp_4_14_fu_1587_p1() {
    tmp_4_14_fu_1587_p1 = esl_zext<32,8>(SBUS_data_load_15_reg_2667.read());
}

void RC_RECEIVER::thread_tmp_4_15_fu_1591_p1() {
    tmp_4_15_fu_1591_p1 = esl_zext<32,8>(SBUS_data_load_16_reg_2678.read());
}

void RC_RECEIVER::thread_tmp_4_16_fu_1595_p1() {
    tmp_4_16_fu_1595_p1 = esl_zext<32,8>(SBUS_data_load_17_reg_2689.read());
}

void RC_RECEIVER::thread_tmp_4_17_fu_1599_p1() {
    tmp_4_17_fu_1599_p1 = esl_zext<32,8>(SBUS_data_load_18_reg_2700.read());
}

void RC_RECEIVER::thread_tmp_4_18_fu_1603_p1() {
    tmp_4_18_fu_1603_p1 = esl_zext<32,8>(SBUS_data_load_19_reg_2711.read());
}

void RC_RECEIVER::thread_tmp_4_19_fu_1607_p1() {
    tmp_4_19_fu_1607_p1 = esl_zext<32,8>(SBUS_data_load_20_reg_2722.read());
}

void RC_RECEIVER::thread_tmp_4_1_fu_1529_p1() {
    tmp_4_1_fu_1529_p1 = esl_zext<32,8>(reg_1473.read());
}

void RC_RECEIVER::thread_tmp_4_20_fu_1611_p1() {
    tmp_4_20_fu_1611_p1 = esl_zext<32,8>(SBUS_data_load_21_reg_2733.read());
}

void RC_RECEIVER::thread_tmp_4_21_fu_1615_p1() {
    tmp_4_21_fu_1615_p1 = esl_zext<32,8>(SBUS_data_load_22_reg_2744.read());
}

void RC_RECEIVER::thread_tmp_4_22_fu_1656_p1() {
    tmp_4_22_fu_1656_p1 = esl_zext<32,8>(SBUS_data_load_23_reg_2755.read());
}

void RC_RECEIVER::thread_tmp_4_23_fu_1678_p1() {
    tmp_4_23_fu_1678_p1 = esl_zext<32,8>(reg_1473.read());
}

void RC_RECEIVER::thread_tmp_4_2_fu_1534_p1() {
    tmp_4_2_fu_1534_p1 = esl_zext<32,8>(reg_1469.read());
}

void RC_RECEIVER::thread_tmp_4_3_fu_1539_p1() {
    tmp_4_3_fu_1539_p1 = esl_zext<32,8>(SBUS_data_load_3_reg_2535.read());
}

void RC_RECEIVER::thread_tmp_4_4_fu_1543_p1() {
    tmp_4_4_fu_1543_p1 = esl_zext<32,8>(SBUS_data_load_4_reg_2546.read());
}

void RC_RECEIVER::thread_tmp_4_5_fu_1547_p1() {
    tmp_4_5_fu_1547_p1 = esl_zext<32,8>(SBUS_data_load_5_reg_2557.read());
}

void RC_RECEIVER::thread_tmp_4_6_fu_1551_p1() {
    tmp_4_6_fu_1551_p1 = esl_zext<32,8>(SBUS_data_load_6_reg_2568.read());
}

void RC_RECEIVER::thread_tmp_4_7_fu_1555_p1() {
    tmp_4_7_fu_1555_p1 = esl_zext<32,8>(SBUS_data_load_7_reg_2579.read());
}

void RC_RECEIVER::thread_tmp_4_8_fu_1559_p1() {
    tmp_4_8_fu_1559_p1 = esl_zext<32,8>(SBUS_data_load_8_reg_2590.read());
}

void RC_RECEIVER::thread_tmp_4_9_fu_1563_p1() {
    tmp_4_9_fu_1563_p1 = esl_zext<32,8>(SBUS_data_load_9_reg_2601.read());
}

void RC_RECEIVER::thread_tmp_4_fu_1518_p1() {
    tmp_4_fu_1518_p1 = esl_zext<32,8>(reg_1469.read());
}

void RC_RECEIVER::thread_tmp_4_s_fu_1567_p1() {
    tmp_4_s_fu_1567_p1 = esl_zext<32,8>(SBUS_data_load_10_reg_2612.read());
}

void RC_RECEIVER::thread_tmp_51_fu_2236_p1() {
    tmp_51_fu_2236_p1 = lookuptable_q0.read().range(7-1, 0);
}

void RC_RECEIVER::thread_tmp_52_fu_2240_p3() {
    tmp_52_fu_2240_p3 = esl_concat<7,4>(tmp_51_fu_2236_p1.read(), reg_1497.read());
}

void RC_RECEIVER::thread_tmp_54_fu_2290_p1() {
    tmp_54_fu_2290_p1 = esl_zext<8,1>(tmp_53_reg_2877.read());
}

void RC_RECEIVER::thread_tmp_55_fu_2293_p3() {
    tmp_55_fu_2293_p3 = esl_concat<8,1>(reg_1477.read(), ap_const_lv1_0);
}

void RC_RECEIVER::thread_tmp_56_fu_2301_p1() {
    tmp_56_fu_2301_p1 = lookuptable_q0.read().range(2-1, 0);
}

void RC_RECEIVER::thread_tmp_57_fu_2305_p3() {
    tmp_57_fu_2305_p3 = esl_concat<1,8>(ap_const_lv1_0, tmp_54_fu_2290_p1.read());
}

void RC_RECEIVER::thread_tmp_58_fu_2313_p2() {
    tmp_58_fu_2313_p2 = (tmp_57_fu_2305_p3.read() | tmp_55_fu_2293_p3.read());
}

void RC_RECEIVER::thread_tmp_59_fu_2319_p3() {
    tmp_59_fu_2319_p3 = esl_concat<2,9>(tmp_56_fu_2301_p1.read(), tmp_58_fu_2313_p2.read());
}

void RC_RECEIVER::thread_tmp_61_fu_2342_p1() {
    tmp_61_fu_2342_p1 = lookuptable_q0.read().range(5-1, 0);
}

void RC_RECEIVER::thread_tmp_62_fu_2346_p3() {
    tmp_62_fu_2346_p3 = esl_concat<5,6>(tmp_61_fu_2342_p1.read(), reg_1501.read());
}

void RC_RECEIVER::thread_tmp_64_fu_2378_p3() {
    tmp_64_fu_2378_p3 = esl_concat<8,3>(lookuptable_q0.read(), reg_1505.read());
}

void RC_RECEIVER::thread_tmp_65_fu_1635_p3() {
    tmp_65_fu_1635_p3 = SBUS_data_load_23_reg_2755.read().range(7, 7);
}

void RC_RECEIVER::thread_tmp_66_fu_2406_p3() {
    tmp_66_fu_2406_p3 = lookuptable_q0.read().range(1, 1);
}

void RC_RECEIVER::thread_tmp_68_fu_2468_p2() {
    tmp_68_fu_2468_p2 = (!lost.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(lost.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void RC_RECEIVER::thread_tmp_69_fu_1753_p1() {
    tmp_69_fu_1753_p1 = esl_zext<32,11>(channels_0.read());
}

void RC_RECEIVER::thread_tmp_6_fu_1619_p2() {
    tmp_6_fu_1619_p2 = (!SBUS_data_q0.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(SBUS_data_q0.read() == ap_const_lv8_0);
}

void RC_RECEIVER::thread_tmp_70_fu_1717_p1() {
    tmp_70_fu_1717_p1 = esl_zext<32,8>(ap_phi_mux_errors_loc_phi_fu_1395_p4.read());
}

void RC_RECEIVER::thread_tmp_7_fu_1683_p2() {
    tmp_7_fu_1683_p2 = (!errors_load_reg_2776.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(errors_load_reg_2776.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void RC_RECEIVER::thread_tmp_8_fu_1703_p3() {
    tmp_8_fu_1703_p3 = esl_concat<3,8>(tmp_3_fu_1699_p1.read(), reg_1477.read());
}

void RC_RECEIVER::thread_tmp_95_cast_cast_cas_fu_1642_p3() {
    tmp_95_cast_cast_cas_fu_1642_p3 = (!tmp_65_fu_1635_p3.read()[0].is_01())? sc_lv<11>(): ((tmp_65_fu_1635_p3.read()[0].to_bool())? ap_const_lv11_7FF: ap_const_lv11_0);
}

void RC_RECEIVER::thread_tmp_98_cast_cast_cas_fu_2414_p3() {
    tmp_98_cast_cast_cas_fu_2414_p3 = (!tmp_66_fu_2406_p3.read()[0].is_01())? sc_lv<11>(): ((tmp_66_fu_2406_p3.read()[0].to_bool())? ap_const_lv11_7FF: ap_const_lv11_0);
}

void RC_RECEIVER::thread_tmp_9_fu_1731_p1() {
    tmp_9_fu_1731_p1 = lookuptable_q0.read().range(6-1, 0);
}

void RC_RECEIVER::thread_tmp_fu_1509_p1() {
    tmp_fu_1509_p1 = esl_zext<32,8>(buffer_r_q0.read());
}

void RC_RECEIVER::thread_tmp_i10_fu_1971_p1() {
    tmp_i10_fu_1971_p1 = esl_zext<64,8>(SBUS_data_load_11_reg_2623.read());
}

void RC_RECEIVER::thread_tmp_i11_fu_2007_p1() {
    tmp_i11_fu_2007_p1 = esl_zext<64,8>(SBUS_data_load_12_reg_2634.read());
}

void RC_RECEIVER::thread_tmp_i12_fu_2039_p1() {
    tmp_i12_fu_2039_p1 = esl_zext<64,8>(SBUS_data_load_13_reg_2645.read());
}

void RC_RECEIVER::thread_tmp_i13_fu_2057_p1() {
    tmp_i13_fu_2057_p1 = esl_zext<64,8>(SBUS_data_load_14_reg_2656.read());
}

void RC_RECEIVER::thread_tmp_i14_fu_2084_p1() {
    tmp_i14_fu_2084_p1 = esl_zext<64,8>(SBUS_data_load_15_reg_2667.read());
}

void RC_RECEIVER::thread_tmp_i15_fu_2120_p1() {
    tmp_i15_fu_2120_p1 = esl_zext<64,8>(SBUS_data_load_16_reg_2678.read());
}

void RC_RECEIVER::thread_tmp_i16_fu_2138_p1() {
    tmp_i16_fu_2138_p1 = esl_zext<64,8>(SBUS_data_load_17_reg_2689.read());
}

void RC_RECEIVER::thread_tmp_i17_fu_2191_p1() {
    tmp_i17_fu_2191_p1 = esl_zext<64,8>(SBUS_data_load_18_reg_2700.read());
}

void RC_RECEIVER::thread_tmp_i18_fu_2227_p1() {
    tmp_i18_fu_2227_p1 = esl_zext<64,8>(SBUS_data_load_19_reg_2711.read());
}

void RC_RECEIVER::thread_tmp_i19_fu_2263_p1() {
    tmp_i19_fu_2263_p1 = esl_zext<64,8>(SBUS_data_load_20_reg_2722.read());
}

void RC_RECEIVER::thread_tmp_i1_fu_1664_p1() {
    tmp_i1_fu_1664_p1 = esl_zext<64,8>(reg_1469.read());
}

void RC_RECEIVER::thread_tmp_i20_fu_2281_p1() {
    tmp_i20_fu_2281_p1 = esl_zext<64,8>(SBUS_data_load_21_reg_2733.read());
}

void RC_RECEIVER::thread_tmp_i21_fu_2333_p1() {
    tmp_i21_fu_2333_p1 = esl_zext<64,8>(SBUS_data_load_22_reg_2744.read());
}

void RC_RECEIVER::thread_tmp_i22_fu_2369_p1() {
    tmp_i22_fu_2369_p1 = esl_zext<64,8>(SBUS_data_load_23_reg_2755.read());
}

void RC_RECEIVER::thread_tmp_i2_fu_1695_p1() {
    tmp_i2_fu_1695_p1 = esl_zext<64,8>(SBUS_data_load_3_reg_2535.read());
}

void RC_RECEIVER::thread_tmp_i3_fu_1722_p1() {
    tmp_i3_fu_1722_p1 = esl_zext<64,8>(SBUS_data_load_4_reg_2546.read());
}

void RC_RECEIVER::thread_tmp_i4_fu_1758_p1() {
    tmp_i4_fu_1758_p1 = esl_zext<64,8>(SBUS_data_load_5_reg_2557.read());
}

void RC_RECEIVER::thread_tmp_i5_fu_1776_p1() {
    tmp_i5_fu_1776_p1 = esl_zext<64,8>(SBUS_data_load_6_reg_2568.read());
}

void RC_RECEIVER::thread_tmp_i6_fu_1829_p1() {
    tmp_i6_fu_1829_p1 = esl_zext<64,8>(SBUS_data_load_7_reg_2579.read());
}

void RC_RECEIVER::thread_tmp_i7_fu_1865_p1() {
    tmp_i7_fu_1865_p1 = esl_zext<64,8>(SBUS_data_load_8_reg_2590.read());
}

void RC_RECEIVER::thread_tmp_i8_fu_1901_p1() {
    tmp_i8_fu_1901_p1 = esl_zext<64,8>(SBUS_data_load_9_reg_2601.read());
}

void RC_RECEIVER::thread_tmp_i9_fu_1919_p1() {
    tmp_i9_fu_1919_p1 = esl_zext<64,8>(SBUS_data_load_10_reg_2612.read());
}

void RC_RECEIVER::thread_tmp_i_fu_1630_p1() {
    tmp_i_fu_1630_p1 = esl_zext<64,8>(reg_1473.read());
}

void RC_RECEIVER::thread_tmp_s_fu_1735_p3() {
    tmp_s_fu_1735_p3 = esl_concat<6,5>(tmp_9_fu_1731_p1.read(), reg_1485.read());
}

void RC_RECEIVER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<51>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void RC_RECEIVER::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWVALID\" :  \"" << s_axi_CTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CTRL_AWREADY\" :  \"" << s_axi_CTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_AWADDR\" :  \"" << s_axi_CTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WVALID\" :  \"" << s_axi_CTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_WREADY\" :  \"" << s_axi_CTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WDATA\" :  \"" << s_axi_CTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_WSTRB\" :  \"" << s_axi_CTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARVALID\" :  \"" << s_axi_CTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_ARREADY\" :  \"" << s_axi_CTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_ARADDR\" :  \"" << s_axi_CTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RVALID\" :  \"" << s_axi_CTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_RREADY\" :  \"" << s_axi_CTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RDATA\" :  \"" << s_axi_CTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_RRESP\" :  \"" << s_axi_CTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BVALID\" :  \"" << s_axi_CTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BREADY\" :  \"" << s_axi_CTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BRESP\" :  \"" << s_axi_CTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_AWVALID\" :  \"" << s_axi_TEST_CHAN_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_AWREADY\" :  \"" << s_axi_TEST_CHAN_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_AWADDR\" :  \"" << s_axi_TEST_CHAN_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_WVALID\" :  \"" << s_axi_TEST_CHAN_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_WREADY\" :  \"" << s_axi_TEST_CHAN_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_WDATA\" :  \"" << s_axi_TEST_CHAN_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_WSTRB\" :  \"" << s_axi_TEST_CHAN_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_ARVALID\" :  \"" << s_axi_TEST_CHAN_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_ARREADY\" :  \"" << s_axi_TEST_CHAN_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_ARADDR\" :  \"" << s_axi_TEST_CHAN_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_RVALID\" :  \"" << s_axi_TEST_CHAN_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_RREADY\" :  \"" << s_axi_TEST_CHAN_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_RDATA\" :  \"" << s_axi_TEST_CHAN_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_RRESP\" :  \"" << s_axi_TEST_CHAN_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_BVALID\" :  \"" << s_axi_TEST_CHAN_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_CHAN_BREADY\" :  \"" << s_axi_TEST_CHAN_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_CHAN_BRESP\" :  \"" << s_axi_TEST_CHAN_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_AWVALID\" :  \"" << s_axi_TEST_NORM_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_AWREADY\" :  \"" << s_axi_TEST_NORM_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_AWADDR\" :  \"" << s_axi_TEST_NORM_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_WVALID\" :  \"" << s_axi_TEST_NORM_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_WREADY\" :  \"" << s_axi_TEST_NORM_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_WDATA\" :  \"" << s_axi_TEST_NORM_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_WSTRB\" :  \"" << s_axi_TEST_NORM_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_ARVALID\" :  \"" << s_axi_TEST_NORM_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_ARREADY\" :  \"" << s_axi_TEST_NORM_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_ARADDR\" :  \"" << s_axi_TEST_NORM_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_RVALID\" :  \"" << s_axi_TEST_NORM_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_RREADY\" :  \"" << s_axi_TEST_NORM_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_RDATA\" :  \"" << s_axi_TEST_NORM_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_RRESP\" :  \"" << s_axi_TEST_NORM_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_BVALID\" :  \"" << s_axi_TEST_NORM_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_NORM_BREADY\" :  \"" << s_axi_TEST_NORM_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_NORM_BRESP\" :  \"" << s_axi_TEST_NORM_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_AWVALID\" :  \"" << s_axi_TEST_REV_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_AWREADY\" :  \"" << s_axi_TEST_REV_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_AWADDR\" :  \"" << s_axi_TEST_REV_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_WVALID\" :  \"" << s_axi_TEST_REV_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_WREADY\" :  \"" << s_axi_TEST_REV_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_WDATA\" :  \"" << s_axi_TEST_REV_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_WSTRB\" :  \"" << s_axi_TEST_REV_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_ARVALID\" :  \"" << s_axi_TEST_REV_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_ARREADY\" :  \"" << s_axi_TEST_REV_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_ARADDR\" :  \"" << s_axi_TEST_REV_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_RVALID\" :  \"" << s_axi_TEST_REV_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_RREADY\" :  \"" << s_axi_TEST_REV_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_RDATA\" :  \"" << s_axi_TEST_REV_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_RRESP\" :  \"" << s_axi_TEST_REV_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_BVALID\" :  \"" << s_axi_TEST_REV_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_TEST_REV_BREADY\" :  \"" << s_axi_TEST_REV_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_TEST_REV_BRESP\" :  \"" << s_axi_TEST_REV_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

