-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RC_RECEIVER is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_CHAN_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_CHAN_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_NORM_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_NORM_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_REV_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_REV_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_CHAN_AWVALID : IN STD_LOGIC;
    s_axi_TEST_CHAN_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_CHAN_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_CHAN_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_CHAN_WVALID : IN STD_LOGIC;
    s_axi_TEST_CHAN_WREADY : OUT STD_LOGIC;
    s_axi_TEST_CHAN_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_CHAN_DATA_WIDTH-1 downto 0);
    s_axi_TEST_CHAN_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_CHAN_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_CHAN_ARVALID : IN STD_LOGIC;
    s_axi_TEST_CHAN_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_CHAN_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_CHAN_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_CHAN_RVALID : OUT STD_LOGIC;
    s_axi_TEST_CHAN_RREADY : IN STD_LOGIC;
    s_axi_TEST_CHAN_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_CHAN_DATA_WIDTH-1 downto 0);
    s_axi_TEST_CHAN_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_CHAN_BVALID : OUT STD_LOGIC;
    s_axi_TEST_CHAN_BREADY : IN STD_LOGIC;
    s_axi_TEST_CHAN_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_NORM_AWVALID : IN STD_LOGIC;
    s_axi_TEST_NORM_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_NORM_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_NORM_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_NORM_WVALID : IN STD_LOGIC;
    s_axi_TEST_NORM_WREADY : OUT STD_LOGIC;
    s_axi_TEST_NORM_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_NORM_DATA_WIDTH-1 downto 0);
    s_axi_TEST_NORM_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_NORM_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_NORM_ARVALID : IN STD_LOGIC;
    s_axi_TEST_NORM_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_NORM_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_NORM_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_NORM_RVALID : OUT STD_LOGIC;
    s_axi_TEST_NORM_RREADY : IN STD_LOGIC;
    s_axi_TEST_NORM_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_NORM_DATA_WIDTH-1 downto 0);
    s_axi_TEST_NORM_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_NORM_BVALID : OUT STD_LOGIC;
    s_axi_TEST_NORM_BREADY : IN STD_LOGIC;
    s_axi_TEST_NORM_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_REV_AWVALID : IN STD_LOGIC;
    s_axi_TEST_REV_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_REV_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_REV_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_REV_WVALID : IN STD_LOGIC;
    s_axi_TEST_REV_WREADY : OUT STD_LOGIC;
    s_axi_TEST_REV_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_REV_DATA_WIDTH-1 downto 0);
    s_axi_TEST_REV_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_REV_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_REV_ARVALID : IN STD_LOGIC;
    s_axi_TEST_REV_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_REV_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_REV_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_REV_RVALID : OUT STD_LOGIC;
    s_axi_TEST_REV_RREADY : IN STD_LOGIC;
    s_axi_TEST_REV_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_REV_DATA_WIDTH-1 downto 0);
    s_axi_TEST_REV_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_REV_BVALID : OUT STD_LOGIC;
    s_axi_TEST_REV_BREADY : IN STD_LOGIC;
    s_axi_TEST_REV_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of RC_RECEIVER is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RC_RECEIVER,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.938000,HLS_SYN_LAT=50,HLS_SYN_TPT=51,HLS_SYN_MEM=28,HLS_SYN_DSP=0,HLS_SYN_FF=1007,HLS_SYN_LUT=1914,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal SBUS_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal SBUS_data_ce0 : STD_LOGIC;
    signal SBUS_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal norm_out_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal norm_out_ce0 : STD_LOGIC;
    signal norm_out_we0 : STD_LOGIC;
    signal norm_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_out_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal reverse_out_ce0 : STD_LOGIC;
    signal reverse_out_we0 : STD_LOGIC;
    signal reverse_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_data_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal channel_data_ce0 : STD_LOGIC;
    signal channel_data_we0 : STD_LOGIC;
    signal channel_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal errors : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal lookuptable_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lookuptable_ce0 : STD_LOGIC;
    signal lookuptable_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal channels_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_10 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_11 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_12 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_13 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_14 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_15 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_16 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_17 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal lost : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_r_ce0 : STD_LOGIC;
    signal buffer_r_we0 : STD_LOGIC;
    signal buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_r_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_r_ce1 : STD_LOGIC;
    signal buffer_r_we1 : STD_LOGIC;
    signal buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_r_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1469 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_1473 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal reg_1477 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal or_cond_reg_2767 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal reg_1481 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal reg_1485 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_1489 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_1493 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_1497 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_1501 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_1505 : STD_LOGIC_VECTOR (2 downto 0);
    signal norm_out_addr_26_reg_2485 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_1509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2495 : STD_LOGIC_VECTOR (31 downto 0);
    signal norm_out_addr_16_reg_2500 : STD_LOGIC_VECTOR (11 downto 0);
    signal buffer_load_1_reg_2505 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_2515 : STD_LOGIC_VECTOR (31 downto 0);
    signal norm_out_addr_27_reg_2520 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_2530 : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_load_3_reg_2535 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal SBUS_data_load_4_reg_2546 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal SBUS_data_load_5_reg_2557 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal SBUS_data_load_6_reg_2568 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal SBUS_data_load_7_reg_2579 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal SBUS_data_load_8_reg_2590 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal SBUS_data_load_9_reg_2601 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal SBUS_data_load_10_reg_2612 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal SBUS_data_load_11_reg_2623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal SBUS_data_load_12_reg_2634 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal SBUS_data_load_13_reg_2645 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal SBUS_data_load_14_reg_2656 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal SBUS_data_load_15_reg_2667 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal SBUS_data_load_16_reg_2678 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal SBUS_data_load_17_reg_2689 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal SBUS_data_load_18_reg_2700 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal SBUS_data_load_19_reg_2711 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal SBUS_data_load_20_reg_2722 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal SBUS_data_load_21_reg_2733 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal SBUS_data_load_22_reg_2744 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal SBUS_data_load_23_reg_2755 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal or_cond_fu_1625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal errors_load_reg_2776 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_2817 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_2877 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_reg_2902 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_errors_loc_phi_fu_1395_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal errors_loc_reg_1392 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_1683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_1630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_1664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_1695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_1722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_1758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_1776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_1829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_1865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_1901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i9_fu_1919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i10_fu_1971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i11_fu_2007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i12_fu_2039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i13_fu_2057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i14_fu_2084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i15_fu_2120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i16_fu_2138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i17_fu_2191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i18_fu_2227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i19_fu_2263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i20_fu_2281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i21_fu_2333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i22_fu_2369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_8_fu_1703_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_1735_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_1815_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_1842_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_1878_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_1957_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_1984_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_2016_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_2070_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_fu_2097_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_fu_2177_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_2204_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_fu_2240_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_2319_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_2346_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_fu_2378_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_cast_cast_cas_fu_1642_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_98_cast_cast_cas_fu_2414_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_2468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_fu_1529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_fu_1534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_fu_1539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_fu_1543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_fu_1547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_fu_1551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_fu_1555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_fu_1559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_9_fu_1563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_s_fu_1567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_10_fu_1571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_11_fu_1575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_12_fu_1579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_13_fu_1583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_14_fu_1587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_15_fu_1591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_16_fu_1595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_17_fu_1599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_18_fu_1603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_19_fu_1607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_20_fu_1611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_21_fu_1615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_22_fu_1656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_23_fu_1678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_1717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_1_fu_1726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_2_fu_1762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_3_fu_1780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_4_fu_1833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_5_fu_1869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_6_fu_1905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_7_fu_1923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_8_fu_1975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_9_fu_2011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_s_fu_2043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_10_fu_2061_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_11_fu_2088_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_12_fu_2124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_13_fu_2142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_14_fu_2195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_15_fu_2231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_16_fu_2267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_17_fu_2285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_18_fu_2337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_19_fu_2373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_20_fu_2401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_21_fu_2445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_22_fu_2459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_15_fu_1673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_1753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_1_fu_1771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_2_fu_1860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_3_fu_1896_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_4_fu_1914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_5_fu_2002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_6_fu_2034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_7_fu_2052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_8_fu_2115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_9_fu_2133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_s_fu_2222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_10_fu_2258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_11_fu_2276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_12_fu_2364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_13_fu_2396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_14_fu_2440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_16_fu_2454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1699_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1731_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_1785_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1801_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_1789_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_1797_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1809_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_1838_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_1874_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_1928_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_1943_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_1931_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_1939_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_1951_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_fu_1980_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_2066_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_38_fu_2093_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_2147_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_2163_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_2151_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_fu_2159_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_2171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_fu_2200_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_51_fu_2236_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_2290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_2305_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_2293_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_2301_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_58_fu_2313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_fu_2342_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_2406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component RC_RECEIVER_lookubkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component RC_RECEIVER_buffecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component RC_RECEIVER_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SBUS_data_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        SBUS_data_ce0 : IN STD_LOGIC;
        SBUS_data_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component RC_RECEIVER_TEST_CHAN_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        channel_data_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        channel_data_ce0 : IN STD_LOGIC;
        channel_data_we0 : IN STD_LOGIC;
        channel_data_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RC_RECEIVER_TEST_NORM_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        norm_out_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        norm_out_ce0 : IN STD_LOGIC;
        norm_out_we0 : IN STD_LOGIC;
        norm_out_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component RC_RECEIVER_TEST_REV_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        reverse_out_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        reverse_out_ce0 : IN STD_LOGIC;
        reverse_out_we0 : IN STD_LOGIC;
        reverse_out_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lookuptable_U : component RC_RECEIVER_lookubkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lookuptable_address0,
        ce0 => lookuptable_ce0,
        q0 => lookuptable_q0);

    buffer_r_U : component RC_RECEIVER_buffecud
    generic map (
        DataWidth => 8,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_r_address0,
        ce0 => buffer_r_ce0,
        we0 => buffer_r_we0,
        d0 => buffer_r_d0,
        q0 => buffer_r_q0,
        address1 => buffer_r_address1,
        ce1 => buffer_r_ce1,
        we1 => buffer_r_we1,
        d1 => buffer_r_d1,
        q1 => buffer_r_q1);

    RC_RECEIVER_CTRL_s_axi_U : component RC_RECEIVER_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SBUS_data_address0 => SBUS_data_address0,
        SBUS_data_ce0 => SBUS_data_ce0,
        SBUS_data_q0 => SBUS_data_q0);

    RC_RECEIVER_TEST_CHAN_s_axi_U : component RC_RECEIVER_TEST_CHAN_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_CHAN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_CHAN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_CHAN_AWVALID,
        AWREADY => s_axi_TEST_CHAN_AWREADY,
        AWADDR => s_axi_TEST_CHAN_AWADDR,
        WVALID => s_axi_TEST_CHAN_WVALID,
        WREADY => s_axi_TEST_CHAN_WREADY,
        WDATA => s_axi_TEST_CHAN_WDATA,
        WSTRB => s_axi_TEST_CHAN_WSTRB,
        ARVALID => s_axi_TEST_CHAN_ARVALID,
        ARREADY => s_axi_TEST_CHAN_ARREADY,
        ARADDR => s_axi_TEST_CHAN_ARADDR,
        RVALID => s_axi_TEST_CHAN_RVALID,
        RREADY => s_axi_TEST_CHAN_RREADY,
        RDATA => s_axi_TEST_CHAN_RDATA,
        RRESP => s_axi_TEST_CHAN_RRESP,
        BVALID => s_axi_TEST_CHAN_BVALID,
        BREADY => s_axi_TEST_CHAN_BREADY,
        BRESP => s_axi_TEST_CHAN_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        channel_data_address0 => channel_data_address0,
        channel_data_ce0 => channel_data_ce0,
        channel_data_we0 => channel_data_we0,
        channel_data_d0 => channel_data_d0);

    RC_RECEIVER_TEST_NORM_s_axi_U : component RC_RECEIVER_TEST_NORM_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_NORM_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_NORM_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_NORM_AWVALID,
        AWREADY => s_axi_TEST_NORM_AWREADY,
        AWADDR => s_axi_TEST_NORM_AWADDR,
        WVALID => s_axi_TEST_NORM_WVALID,
        WREADY => s_axi_TEST_NORM_WREADY,
        WDATA => s_axi_TEST_NORM_WDATA,
        WSTRB => s_axi_TEST_NORM_WSTRB,
        ARVALID => s_axi_TEST_NORM_ARVALID,
        ARREADY => s_axi_TEST_NORM_ARREADY,
        ARADDR => s_axi_TEST_NORM_ARADDR,
        RVALID => s_axi_TEST_NORM_RVALID,
        RREADY => s_axi_TEST_NORM_RREADY,
        RDATA => s_axi_TEST_NORM_RDATA,
        RRESP => s_axi_TEST_NORM_RRESP,
        BVALID => s_axi_TEST_NORM_BVALID,
        BREADY => s_axi_TEST_NORM_BREADY,
        BRESP => s_axi_TEST_NORM_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        norm_out_address0 => norm_out_address0,
        norm_out_ce0 => norm_out_ce0,
        norm_out_we0 => norm_out_we0,
        norm_out_d0 => norm_out_d0);

    RC_RECEIVER_TEST_REV_s_axi_U : component RC_RECEIVER_TEST_REV_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_REV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_REV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_REV_AWVALID,
        AWREADY => s_axi_TEST_REV_AWREADY,
        AWADDR => s_axi_TEST_REV_AWADDR,
        WVALID => s_axi_TEST_REV_WVALID,
        WREADY => s_axi_TEST_REV_WREADY,
        WDATA => s_axi_TEST_REV_WDATA,
        WSTRB => s_axi_TEST_REV_WSTRB,
        ARVALID => s_axi_TEST_REV_ARVALID,
        ARREADY => s_axi_TEST_REV_ARREADY,
        ARADDR => s_axi_TEST_REV_ARADDR,
        RVALID => s_axi_TEST_REV_RVALID,
        RREADY => s_axi_TEST_REV_RREADY,
        RDATA => s_axi_TEST_REV_RDATA,
        RRESP => s_axi_TEST_REV_RRESP,
        BVALID => s_axi_TEST_REV_BVALID,
        BREADY => s_axi_TEST_REV_BREADY,
        BRESP => s_axi_TEST_REV_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        reverse_out_address0 => reverse_out_address0,
        reverse_out_ce0 => reverse_out_ce0,
        reverse_out_we0 => reverse_out_we0,
        reverse_out_d0 => reverse_out_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    errors_loc_reg_1392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                errors_loc_reg_1392 <= tmp_7_fu_1683_p2;
            elsif (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                errors_loc_reg_1392 <= errors;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                SBUS_data_load_10_reg_2612 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                SBUS_data_load_11_reg_2623 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                SBUS_data_load_12_reg_2634 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                SBUS_data_load_13_reg_2645 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                SBUS_data_load_14_reg_2656 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                SBUS_data_load_15_reg_2667 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                SBUS_data_load_16_reg_2678 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                SBUS_data_load_17_reg_2689 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                SBUS_data_load_18_reg_2700 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                SBUS_data_load_19_reg_2711 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                SBUS_data_load_20_reg_2722 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                SBUS_data_load_21_reg_2733 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                SBUS_data_load_22_reg_2744 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                SBUS_data_load_23_reg_2755 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                SBUS_data_load_3_reg_2535 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                SBUS_data_load_4_reg_2546 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                SBUS_data_load_5_reg_2557 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                SBUS_data_load_6_reg_2568 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                SBUS_data_load_7_reg_2579 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                SBUS_data_load_8_reg_2590 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                SBUS_data_load_9_reg_2601 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                buffer_load_1_reg_2505 <= buffer_r_q1;
                    tmp_reg_2495(7 downto 0) <= tmp_fu_1509_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                channels_0 <= tmp_8_fu_1703_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                channels_1 <= tmp_s_fu_1735_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                channels_10 <= tmp_46_fu_2177_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                channels_11 <= tmp_49_fu_2204_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                channels_12 <= tmp_52_fu_2240_p3;
                tmp_53_reg_2877 <= lookuptable_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                channels_13 <= tmp_59_fu_2319_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                channels_14 <= tmp_62_fu_2346_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                channels_15 <= tmp_64_fu_2378_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_1625_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                channels_16 <= tmp_95_cast_cast_cas_fu_1642_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                channels_17 <= tmp_98_cast_cast_cas_fu_2414_p3;
                tmp_67_reg_2902 <= lookuptable_q0(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                channels_2 <= tmp_16_fu_1815_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                channels_3 <= tmp_19_fu_1842_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                channels_4 <= tmp_22_fu_1878_p3;
                tmp_23_reg_2817 <= lookuptable_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                channels_5 <= tmp_29_fu_1957_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                channels_6 <= tmp_32_fu_1984_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                channels_7 <= tmp_34_fu_2016_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                channels_8 <= tmp_36_fu_2070_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                channels_9 <= tmp_39_fu_2097_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                errors <= tmp_7_fu_1683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                errors_load_reg_2776 <= errors;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_67_reg_2902 = ap_const_lv1_1) and (or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                lost <= tmp_68_fu_2468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                or_cond_reg_2767 <= or_cond_fu_1625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_1469 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_1473 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1477 <= lookuptable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then
                reg_1481 <= lookuptable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then
                reg_1485 <= lookuptable_q0(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then
                reg_1489 <= lookuptable_q0(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then
                reg_1493 <= lookuptable_q0(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then
                reg_1497 <= lookuptable_q0(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then
                reg_1501 <= lookuptable_q0(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)))) then
                reg_1505 <= lookuptable_q0(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_1_reg_2515(7 downto 0) <= tmp_1_fu_1514_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_2_reg_2530 <= tmp_2_fu_1523_p2;
            end if;
        end if;
    end process;
    tmp_reg_2495(31 downto 8) <= "000000000000000000000000";
    tmp_1_reg_2515(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SBUS_data_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            SBUS_data_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SBUS_data_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            SBUS_data_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SBUS_data_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SBUS_data_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            SBUS_data_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            SBUS_data_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SBUS_data_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            SBUS_data_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SBUS_data_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            SBUS_data_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SBUS_data_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            SBUS_data_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            SBUS_data_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            SBUS_data_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            SBUS_data_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            SBUS_data_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SBUS_data_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SBUS_data_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SBUS_data_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SBUS_data_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SBUS_data_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SBUS_data_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SBUS_data_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SBUS_data_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            SBUS_data_address0 <= "XXXXX";
        end if; 
    end process;


    SBUS_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SBUS_data_ce0 <= ap_const_logic_1;
        else 
            SBUS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_errors_loc_phi_fu_1395_p4_assign_proc : process(or_cond_reg_2767, ap_CS_fsm_state28, errors_loc_reg_1392, tmp_7_fu_1683_p2)
    begin
        if (((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_phi_mux_errors_loc_phi_fu_1395_p4 <= tmp_7_fu_1683_p2;
        else 
            ap_phi_mux_errors_loc_phi_fu_1395_p4 <= errors_loc_reg_1392;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buffer_r_address0 <= ap_const_lv5_18;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            buffer_r_address0 <= ap_const_lv5_16;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            buffer_r_address0 <= ap_const_lv5_14;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            buffer_r_address0 <= ap_const_lv5_12;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            buffer_r_address0 <= ap_const_lv5_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            buffer_r_address0 <= ap_const_lv5_E;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            buffer_r_address0 <= ap_const_lv5_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            buffer_r_address0 <= ap_const_lv5_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            buffer_r_address0 <= ap_const_lv5_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            buffer_r_address0 <= ap_const_lv5_6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            buffer_r_address0 <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buffer_r_address0 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_address0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buffer_r_address0 <= ap_const_lv5_1;
        else 
            buffer_r_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            buffer_r_address1 <= ap_const_lv5_17;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            buffer_r_address1 <= ap_const_lv5_15;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            buffer_r_address1 <= ap_const_lv5_13;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            buffer_r_address1 <= ap_const_lv5_11;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            buffer_r_address1 <= ap_const_lv5_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            buffer_r_address1 <= ap_const_lv5_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            buffer_r_address1 <= ap_const_lv5_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            buffer_r_address1 <= ap_const_lv5_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            buffer_r_address1 <= ap_const_lv5_7;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            buffer_r_address1 <= ap_const_lv5_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            buffer_r_address1 <= ap_const_lv5_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_r_address1 <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buffer_r_address1 <= ap_const_lv5_2;
        else 
            buffer_r_address1 <= "XXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buffer_r_ce1 <= ap_const_logic_1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_d0_assign_proc : process(SBUS_data_q0, lookuptable_q0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            buffer_r_d0 <= lookuptable_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buffer_r_d0 <= SBUS_data_q0;
        else 
            buffer_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_r_d1_assign_proc : process(SBUS_data_q0, lookuptable_q0, ap_CS_fsm_state3, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buffer_r_d1 <= lookuptable_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_r_d1 <= SBUS_data_q0;
        else 
            buffer_r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state26, or_cond_reg_2767, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state27, or_cond_reg_2767, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            buffer_r_we1 <= ap_const_logic_1;
        else 
            buffer_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    channel_data_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            channel_data_address0 <= ap_const_lv64_11(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            channel_data_address0 <= ap_const_lv64_F(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            channel_data_address0 <= ap_const_lv64_E(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            channel_data_address0 <= ap_const_lv64_D(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            channel_data_address0 <= ap_const_lv64_C(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            channel_data_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            channel_data_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            channel_data_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            channel_data_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            channel_data_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            channel_data_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            channel_data_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            channel_data_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            channel_data_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            channel_data_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            channel_data_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            channel_data_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            channel_data_address0 <= ap_const_lv64_10(12 - 1 downto 0);
        else 
            channel_data_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    channel_data_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            channel_data_ce0 <= ap_const_logic_1;
        else 
            channel_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    channel_data_d0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, tmp_113_15_fu_1673_p1, tmp_69_fu_1753_p1, tmp_113_1_fu_1771_p1, tmp_113_2_fu_1860_p1, tmp_113_3_fu_1896_p1, tmp_113_4_fu_1914_p1, tmp_113_5_fu_2002_p1, tmp_113_6_fu_2034_p1, tmp_113_7_fu_2052_p1, tmp_113_8_fu_2115_p1, tmp_113_9_fu_2133_p1, tmp_113_s_fu_2222_p1, tmp_113_10_fu_2258_p1, tmp_113_11_fu_2276_p1, tmp_113_12_fu_2364_p1, tmp_113_13_fu_2396_p1, tmp_113_14_fu_2440_p1, tmp_113_16_fu_2454_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            channel_data_d0 <= tmp_113_16_fu_2454_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            channel_data_d0 <= tmp_113_14_fu_2440_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            channel_data_d0 <= tmp_113_13_fu_2396_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            channel_data_d0 <= tmp_113_12_fu_2364_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            channel_data_d0 <= tmp_113_11_fu_2276_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            channel_data_d0 <= tmp_113_10_fu_2258_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            channel_data_d0 <= tmp_113_s_fu_2222_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            channel_data_d0 <= tmp_113_9_fu_2133_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            channel_data_d0 <= tmp_113_8_fu_2115_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            channel_data_d0 <= tmp_113_7_fu_2052_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            channel_data_d0 <= tmp_113_6_fu_2034_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            channel_data_d0 <= tmp_113_5_fu_2002_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            channel_data_d0 <= tmp_113_4_fu_1914_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            channel_data_d0 <= tmp_113_3_fu_1896_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            channel_data_d0 <= tmp_113_2_fu_1860_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            channel_data_d0 <= tmp_113_1_fu_1771_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            channel_data_d0 <= tmp_69_fu_1753_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            channel_data_d0 <= tmp_113_15_fu_1673_p1;
        else 
            channel_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    channel_data_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            channel_data_we0 <= ap_const_logic_1;
        else 
            channel_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lookuptable_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, tmp_i_fu_1630_p1, tmp_i1_fu_1664_p1, tmp_i2_fu_1695_p1, tmp_i3_fu_1722_p1, tmp_i4_fu_1758_p1, tmp_i5_fu_1776_p1, tmp_i6_fu_1829_p1, tmp_i7_fu_1865_p1, tmp_i8_fu_1901_p1, tmp_i9_fu_1919_p1, tmp_i10_fu_1971_p1, tmp_i11_fu_2007_p1, tmp_i12_fu_2039_p1, tmp_i13_fu_2057_p1, tmp_i14_fu_2084_p1, tmp_i15_fu_2120_p1, tmp_i16_fu_2138_p1, tmp_i17_fu_2191_p1, tmp_i18_fu_2227_p1, tmp_i19_fu_2263_p1, tmp_i20_fu_2281_p1, tmp_i21_fu_2333_p1, tmp_i22_fu_2369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            lookuptable_address0 <= tmp_i22_fu_2369_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            lookuptable_address0 <= tmp_i21_fu_2333_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lookuptable_address0 <= tmp_i20_fu_2281_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            lookuptable_address0 <= tmp_i19_fu_2263_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            lookuptable_address0 <= tmp_i18_fu_2227_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            lookuptable_address0 <= tmp_i17_fu_2191_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            lookuptable_address0 <= tmp_i16_fu_2138_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            lookuptable_address0 <= tmp_i15_fu_2120_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            lookuptable_address0 <= tmp_i14_fu_2084_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            lookuptable_address0 <= tmp_i13_fu_2057_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            lookuptable_address0 <= tmp_i12_fu_2039_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lookuptable_address0 <= tmp_i11_fu_2007_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            lookuptable_address0 <= tmp_i10_fu_1971_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lookuptable_address0 <= tmp_i9_fu_1919_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lookuptable_address0 <= tmp_i8_fu_1901_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            lookuptable_address0 <= tmp_i7_fu_1865_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            lookuptable_address0 <= tmp_i6_fu_1829_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            lookuptable_address0 <= tmp_i5_fu_1776_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            lookuptable_address0 <= tmp_i4_fu_1758_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            lookuptable_address0 <= tmp_i3_fu_1722_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            lookuptable_address0 <= tmp_i2_fu_1695_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            lookuptable_address0 <= tmp_i1_fu_1664_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            lookuptable_address0 <= tmp_i_fu_1630_p1(8 - 1 downto 0);
        else 
            lookuptable_address0 <= "XXXXXXXX";
        end if; 
    end process;


    lookuptable_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            lookuptable_ce0 <= ap_const_logic_1;
        else 
            lookuptable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    norm_out_addr_16_reg_2500 <= ap_const_lv64_1A(12 - 1 downto 0);
    norm_out_addr_26_reg_2485 <= ap_const_lv64_19(12 - 1 downto 0);
    norm_out_addr_27_reg_2520 <= ap_const_lv64_1B(12 - 1 downto 0);

    norm_out_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state26, ap_CS_fsm_state27, or_cond_reg_2767, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state28, ap_CS_fsm_state30, norm_out_addr_26_reg_2485, norm_out_addr_16_reg_2500, norm_out_addr_27_reg_2520, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            norm_out_address0 <= norm_out_addr_27_reg_2520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            norm_out_address0 <= norm_out_addr_16_reg_2500;
        elsif ((((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            norm_out_address0 <= norm_out_addr_26_reg_2485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            norm_out_address0 <= ap_const_lv64_18(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            norm_out_address0 <= ap_const_lv64_17(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            norm_out_address0 <= ap_const_lv64_16(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            norm_out_address0 <= ap_const_lv64_15(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            norm_out_address0 <= ap_const_lv64_14(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            norm_out_address0 <= ap_const_lv64_13(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            norm_out_address0 <= ap_const_lv64_12(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            norm_out_address0 <= ap_const_lv64_11(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            norm_out_address0 <= ap_const_lv64_10(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            norm_out_address0 <= ap_const_lv64_F(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            norm_out_address0 <= ap_const_lv64_E(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            norm_out_address0 <= ap_const_lv64_D(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            norm_out_address0 <= ap_const_lv64_C(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            norm_out_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            norm_out_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            norm_out_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            norm_out_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            norm_out_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            norm_out_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            norm_out_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            norm_out_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            norm_out_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            norm_out_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            norm_out_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            norm_out_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            norm_out_address0 <= ap_const_lv64_1B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            norm_out_address0 <= ap_const_lv64_1A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            norm_out_address0 <= ap_const_lv64_19(12 - 1 downto 0);
        else 
            norm_out_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    norm_out_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state26, ap_CS_fsm_state27, or_cond_reg_2767, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            norm_out_ce0 <= ap_const_logic_1;
        else 
            norm_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_out_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state26, ap_CS_fsm_state27, or_cond_reg_2767, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state28, ap_CS_fsm_state30, tmp_fu_1509_p1, tmp_reg_2495, tmp_1_fu_1514_p1, tmp_1_reg_2515, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, tmp_4_fu_1518_p1, tmp_4_1_fu_1529_p1, tmp_4_2_fu_1534_p1, tmp_4_3_fu_1539_p1, tmp_4_4_fu_1543_p1, tmp_4_5_fu_1547_p1, tmp_4_6_fu_1551_p1, tmp_4_7_fu_1555_p1, tmp_4_8_fu_1559_p1, tmp_4_9_fu_1563_p1, tmp_4_s_fu_1567_p1, tmp_4_10_fu_1571_p1, tmp_4_11_fu_1575_p1, tmp_4_12_fu_1579_p1, tmp_4_13_fu_1583_p1, tmp_4_14_fu_1587_p1, tmp_4_15_fu_1591_p1, tmp_4_16_fu_1595_p1, tmp_4_17_fu_1599_p1, tmp_4_18_fu_1603_p1, tmp_4_19_fu_1607_p1, tmp_4_20_fu_1611_p1, tmp_4_21_fu_1615_p1, tmp_4_22_fu_1656_p1, tmp_4_23_fu_1678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            norm_out_d0 <= tmp_1_reg_2515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            norm_out_d0 <= tmp_reg_2495;
        elsif (((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            norm_out_d0 <= ap_const_lv32_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            norm_out_d0 <= tmp_4_23_fu_1678_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            norm_out_d0 <= tmp_4_22_fu_1656_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            norm_out_d0 <= tmp_4_21_fu_1615_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            norm_out_d0 <= tmp_4_20_fu_1611_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            norm_out_d0 <= tmp_4_19_fu_1607_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            norm_out_d0 <= tmp_4_18_fu_1603_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            norm_out_d0 <= tmp_4_17_fu_1599_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            norm_out_d0 <= tmp_4_16_fu_1595_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            norm_out_d0 <= tmp_4_15_fu_1591_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            norm_out_d0 <= tmp_4_14_fu_1587_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            norm_out_d0 <= tmp_4_13_fu_1583_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            norm_out_d0 <= tmp_4_12_fu_1579_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            norm_out_d0 <= tmp_4_11_fu_1575_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            norm_out_d0 <= tmp_4_10_fu_1571_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            norm_out_d0 <= tmp_4_s_fu_1567_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            norm_out_d0 <= tmp_4_9_fu_1563_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            norm_out_d0 <= tmp_4_8_fu_1559_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            norm_out_d0 <= tmp_4_7_fu_1555_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            norm_out_d0 <= tmp_4_6_fu_1551_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            norm_out_d0 <= tmp_4_5_fu_1547_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            norm_out_d0 <= tmp_4_4_fu_1543_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            norm_out_d0 <= tmp_4_3_fu_1539_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            norm_out_d0 <= tmp_4_2_fu_1534_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            norm_out_d0 <= tmp_4_1_fu_1529_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            norm_out_d0 <= tmp_4_fu_1518_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            norm_out_d0 <= tmp_1_fu_1514_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            norm_out_d0 <= tmp_fu_1509_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            norm_out_d0 <= ap_const_lv32_45;
        else 
            norm_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    norm_out_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state26, ap_CS_fsm_state27, or_cond_reg_2767, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((or_cond_reg_2767 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            norm_out_we0 <= ap_const_logic_1;
        else 
            norm_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_1625_p2 <= (tmp_6_fu_1619_p2 and tmp_2_reg_2530);

    reverse_out_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            reverse_out_address0 <= ap_const_lv64_17(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            reverse_out_address0 <= ap_const_lv64_16(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            reverse_out_address0 <= ap_const_lv64_15(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            reverse_out_address0 <= ap_const_lv64_14(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            reverse_out_address0 <= ap_const_lv64_13(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            reverse_out_address0 <= ap_const_lv64_12(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            reverse_out_address0 <= ap_const_lv64_11(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            reverse_out_address0 <= ap_const_lv64_10(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            reverse_out_address0 <= ap_const_lv64_F(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            reverse_out_address0 <= ap_const_lv64_E(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            reverse_out_address0 <= ap_const_lv64_D(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            reverse_out_address0 <= ap_const_lv64_C(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            reverse_out_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            reverse_out_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            reverse_out_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            reverse_out_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            reverse_out_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            reverse_out_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            reverse_out_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            reverse_out_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            reverse_out_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            reverse_out_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            reverse_out_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            reverse_out_address0 <= ap_const_lv64_19(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            reverse_out_address0 <= ap_const_lv64_18(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            reverse_out_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        else 
            reverse_out_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    reverse_out_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            reverse_out_ce0 <= ap_const_logic_1;
        else 
            reverse_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reverse_out_d0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state51, tmp_70_fu_1717_p1, tmp_109_1_fu_1726_p1, tmp_109_2_fu_1762_p1, tmp_109_3_fu_1780_p1, tmp_109_4_fu_1833_p1, tmp_109_5_fu_1869_p1, tmp_109_6_fu_1905_p1, tmp_109_7_fu_1923_p1, tmp_109_8_fu_1975_p1, tmp_109_9_fu_2011_p1, tmp_109_s_fu_2043_p1, tmp_109_10_fu_2061_p1, tmp_109_11_fu_2088_p1, tmp_109_12_fu_2124_p1, tmp_109_13_fu_2142_p1, tmp_109_14_fu_2195_p1, tmp_109_15_fu_2231_p1, tmp_109_16_fu_2267_p1, tmp_109_17_fu_2285_p1, tmp_109_18_fu_2337_p1, tmp_109_19_fu_2373_p1, tmp_109_20_fu_2401_p1, tmp_109_21_fu_2445_p1, tmp_109_22_fu_2459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            reverse_out_d0 <= tmp_109_22_fu_2459_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            reverse_out_d0 <= tmp_109_21_fu_2445_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            reverse_out_d0 <= tmp_109_20_fu_2401_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            reverse_out_d0 <= tmp_109_19_fu_2373_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            reverse_out_d0 <= tmp_109_18_fu_2337_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            reverse_out_d0 <= tmp_109_17_fu_2285_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            reverse_out_d0 <= tmp_109_16_fu_2267_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            reverse_out_d0 <= tmp_109_15_fu_2231_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            reverse_out_d0 <= tmp_109_14_fu_2195_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            reverse_out_d0 <= tmp_109_13_fu_2142_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            reverse_out_d0 <= tmp_109_12_fu_2124_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            reverse_out_d0 <= tmp_109_11_fu_2088_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            reverse_out_d0 <= tmp_109_10_fu_2061_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            reverse_out_d0 <= tmp_109_s_fu_2043_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            reverse_out_d0 <= tmp_109_9_fu_2011_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            reverse_out_d0 <= tmp_109_8_fu_1975_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            reverse_out_d0 <= tmp_109_7_fu_1923_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            reverse_out_d0 <= tmp_109_6_fu_1905_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            reverse_out_d0 <= tmp_109_5_fu_1869_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            reverse_out_d0 <= tmp_109_4_fu_1833_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            reverse_out_d0 <= tmp_109_3_fu_1780_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            reverse_out_d0 <= tmp_109_2_fu_1762_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            reverse_out_d0 <= tmp_109_1_fu_1726_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            reverse_out_d0 <= tmp_70_fu_1717_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            reverse_out_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            reverse_out_d0 <= ap_const_lv32_F;
        else 
            reverse_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    reverse_out_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state27, or_cond_reg_2767, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, or_cond_fu_1625_p2, ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((or_cond_reg_2767 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((or_cond_fu_1625_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            reverse_out_we0 <= ap_const_logic_1;
        else 
            reverse_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_109_10_fu_2061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_11_fu_2088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_12_fu_2124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_13_fu_2142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_14_fu_2195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_15_fu_2231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_16_fu_2267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_17_fu_2285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_18_fu_2337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_19_fu_2373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_1_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_20_fu_2401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_21_fu_2445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_22_fu_2459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_2_fu_1762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_3_fu_1780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_4_fu_1833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_5_fu_1869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_6_fu_1905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_7_fu_1923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_8_fu_1975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_109_9_fu_2011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1477),32));
    tmp_109_s_fu_2043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1481),32));
    tmp_113_10_fu_2258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_11),32));
    tmp_113_11_fu_2276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_12),32));
    tmp_113_12_fu_2364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_13),32));
    tmp_113_13_fu_2396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_14),32));
    tmp_113_14_fu_2440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_15),32));
    tmp_113_15_fu_1673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_16),32));
    tmp_113_16_fu_2454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_17),32));
    tmp_113_1_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_1),32));
    tmp_113_2_fu_1860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_2),32));
    tmp_113_3_fu_1896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_3),32));
    tmp_113_4_fu_1914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_4),32));
    tmp_113_5_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_5),32));
    tmp_113_6_fu_2034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_6),32));
    tmp_113_7_fu_2052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_7),32));
    tmp_113_8_fu_2115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_8),32));
    tmp_113_9_fu_2133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_9),32));
    tmp_113_s_fu_2222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_10),32));
    tmp_11_fu_1785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1489),8));
    tmp_12_fu_1789_p3 <= (reg_1481 & ap_const_lv2_0);
    tmp_13_fu_1797_p1 <= lookuptable_q0(1 - 1 downto 0);
    tmp_14_fu_1801_p3 <= (ap_const_lv2_0 & tmp_11_fu_1785_p1);
    tmp_15_fu_1809_p2 <= (tmp_14_fu_1801_p3 or tmp_12_fu_1789_p3);
    tmp_16_fu_1815_p3 <= (tmp_13_fu_1797_p1 & tmp_15_fu_1809_p2);
    tmp_18_fu_1838_p1 <= lookuptable_q0(4 - 1 downto 0);
    tmp_19_fu_1842_p3 <= (tmp_18_fu_1838_p1 & reg_1493);
    tmp_1_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_load_1_reg_2505),32));
    tmp_21_fu_1874_p1 <= lookuptable_q0(7 - 1 downto 0);
    tmp_22_fu_1878_p3 <= (tmp_21_fu_1874_p1 & reg_1497);
    tmp_24_fu_1928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_2817),8));
    tmp_25_fu_1931_p3 <= (reg_1481 & ap_const_lv1_0);
    tmp_26_fu_1939_p1 <= lookuptable_q0(2 - 1 downto 0);
    tmp_27_fu_1943_p3 <= (ap_const_lv1_0 & tmp_24_fu_1928_p1);
    tmp_28_fu_1951_p2 <= (tmp_27_fu_1943_p3 or tmp_25_fu_1931_p3);
    tmp_29_fu_1957_p3 <= (tmp_26_fu_1939_p1 & tmp_28_fu_1951_p2);
    tmp_2_fu_1523_p2 <= "1" when (reg_1469 = ap_const_lv8_F) else "0";
    tmp_31_fu_1980_p1 <= lookuptable_q0(5 - 1 downto 0);
    tmp_32_fu_1984_p3 <= (tmp_31_fu_1980_p1 & reg_1501);
    tmp_34_fu_2016_p3 <= (lookuptable_q0 & reg_1505);
    tmp_35_fu_2066_p1 <= lookuptable_q0(3 - 1 downto 0);
    tmp_36_fu_2070_p3 <= (tmp_35_fu_2066_p1 & reg_1481);
    tmp_38_fu_2093_p1 <= lookuptable_q0(6 - 1 downto 0);
    tmp_39_fu_2097_p3 <= (tmp_38_fu_2093_p1 & reg_1485);
    tmp_3_fu_1699_p1 <= lookuptable_q0(3 - 1 downto 0);
    tmp_41_fu_2147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1489),8));
    tmp_42_fu_2151_p3 <= (reg_1477 & ap_const_lv2_0);
    tmp_43_fu_2159_p1 <= lookuptable_q0(1 - 1 downto 0);
    tmp_44_fu_2163_p3 <= (ap_const_lv2_0 & tmp_41_fu_2147_p1);
    tmp_45_fu_2171_p2 <= (tmp_44_fu_2163_p3 or tmp_42_fu_2151_p3);
    tmp_46_fu_2177_p3 <= (tmp_43_fu_2159_p1 & tmp_45_fu_2171_p2);
    tmp_48_fu_2200_p1 <= lookuptable_q0(4 - 1 downto 0);
    tmp_49_fu_2204_p3 <= (tmp_48_fu_2200_p1 & reg_1493);
    tmp_4_10_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_11_reg_2623),32));
    tmp_4_11_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_12_reg_2634),32));
    tmp_4_12_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_13_reg_2645),32));
    tmp_4_13_fu_1583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_14_reg_2656),32));
    tmp_4_14_fu_1587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_15_reg_2667),32));
    tmp_4_15_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_16_reg_2678),32));
    tmp_4_16_fu_1595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_17_reg_2689),32));
    tmp_4_17_fu_1599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_18_reg_2700),32));
    tmp_4_18_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_19_reg_2711),32));
    tmp_4_19_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_20_reg_2722),32));
    tmp_4_1_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1473),32));
    tmp_4_20_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_21_reg_2733),32));
    tmp_4_21_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_22_reg_2744),32));
    tmp_4_22_fu_1656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_23_reg_2755),32));
    tmp_4_23_fu_1678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1473),32));
    tmp_4_2_fu_1534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1469),32));
    tmp_4_3_fu_1539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_3_reg_2535),32));
    tmp_4_4_fu_1543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_4_reg_2546),32));
    tmp_4_5_fu_1547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_5_reg_2557),32));
    tmp_4_6_fu_1551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_6_reg_2568),32));
    tmp_4_7_fu_1555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_7_reg_2579),32));
    tmp_4_8_fu_1559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_8_reg_2590),32));
    tmp_4_9_fu_1563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_9_reg_2601),32));
    tmp_4_fu_1518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1469),32));
    tmp_4_s_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_10_reg_2612),32));
    tmp_51_fu_2236_p1 <= lookuptable_q0(7 - 1 downto 0);
    tmp_52_fu_2240_p3 <= (tmp_51_fu_2236_p1 & reg_1497);
    tmp_54_fu_2290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_2877),8));
    tmp_55_fu_2293_p3 <= (reg_1477 & ap_const_lv1_0);
    tmp_56_fu_2301_p1 <= lookuptable_q0(2 - 1 downto 0);
    tmp_57_fu_2305_p3 <= (ap_const_lv1_0 & tmp_54_fu_2290_p1);
    tmp_58_fu_2313_p2 <= (tmp_57_fu_2305_p3 or tmp_55_fu_2293_p3);
    tmp_59_fu_2319_p3 <= (tmp_56_fu_2301_p1 & tmp_58_fu_2313_p2);
    tmp_61_fu_2342_p1 <= lookuptable_q0(5 - 1 downto 0);
    tmp_62_fu_2346_p3 <= (tmp_61_fu_2342_p1 & reg_1501);
    tmp_64_fu_2378_p3 <= (lookuptable_q0 & reg_1505);
    tmp_65_fu_1635_p3 <= SBUS_data_load_23_reg_2755(7 downto 7);
    tmp_66_fu_2406_p3 <= lookuptable_q0(1 downto 1);
    tmp_68_fu_2468_p2 <= std_logic_vector(unsigned(lost) + unsigned(ap_const_lv32_1));
    tmp_69_fu_1753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_0),32));
    tmp_6_fu_1619_p2 <= "1" when (SBUS_data_q0 = ap_const_lv8_0) else "0";
    tmp_70_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_errors_loc_phi_fu_1395_p4),32));
    tmp_7_fu_1683_p2 <= std_logic_vector(unsigned(errors_load_reg_2776) + unsigned(ap_const_lv8_1));
    tmp_8_fu_1703_p3 <= (tmp_3_fu_1699_p1 & reg_1477);
    tmp_95_cast_cast_cas_fu_1642_p3 <= 
        ap_const_lv11_7FF when (tmp_65_fu_1635_p3(0) = '1') else 
        ap_const_lv11_0;
    tmp_98_cast_cast_cas_fu_2414_p3 <= 
        ap_const_lv11_7FF when (tmp_66_fu_2406_p3(0) = '1') else 
        ap_const_lv11_0;
    tmp_9_fu_1731_p1 <= lookuptable_q0(6 - 1 downto 0);
    tmp_fu_1509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_r_q0),32));
    tmp_i10_fu_1971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_11_reg_2623),64));
    tmp_i11_fu_2007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_12_reg_2634),64));
    tmp_i12_fu_2039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_13_reg_2645),64));
    tmp_i13_fu_2057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_14_reg_2656),64));
    tmp_i14_fu_2084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_15_reg_2667),64));
    tmp_i15_fu_2120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_16_reg_2678),64));
    tmp_i16_fu_2138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_17_reg_2689),64));
    tmp_i17_fu_2191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_18_reg_2700),64));
    tmp_i18_fu_2227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_19_reg_2711),64));
    tmp_i19_fu_2263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_20_reg_2722),64));
    tmp_i1_fu_1664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1469),64));
    tmp_i20_fu_2281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_21_reg_2733),64));
    tmp_i21_fu_2333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_22_reg_2744),64));
    tmp_i22_fu_2369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_23_reg_2755),64));
    tmp_i2_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_3_reg_2535),64));
    tmp_i3_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_4_reg_2546),64));
    tmp_i4_fu_1758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_5_reg_2557),64));
    tmp_i5_fu_1776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_6_reg_2568),64));
    tmp_i6_fu_1829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_7_reg_2579),64));
    tmp_i7_fu_1865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_8_reg_2590),64));
    tmp_i8_fu_1901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_9_reg_2601),64));
    tmp_i9_fu_1919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SBUS_data_load_10_reg_2612),64));
    tmp_i_fu_1630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1473),64));
    tmp_s_fu_1735_p3 <= (tmp_9_fu_1731_p1 & reg_1485);
end behav;
