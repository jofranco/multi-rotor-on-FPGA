// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="RC_RECEIVER,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.576000,HLS_SYN_LAT=24,HLS_SYN_TPT=25,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=338,HLS_SYN_LUT=814,HLS_VERSION=2018_2}" *)

module RC_RECEIVER (
        ap_clk,
        ap_rst_n,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_DATA_AWVALID,
        s_axi_DATA_AWREADY,
        s_axi_DATA_AWADDR,
        s_axi_DATA_WVALID,
        s_axi_DATA_WREADY,
        s_axi_DATA_WDATA,
        s_axi_DATA_WSTRB,
        s_axi_DATA_ARVALID,
        s_axi_DATA_ARREADY,
        s_axi_DATA_ARADDR,
        s_axi_DATA_RVALID,
        s_axi_DATA_RREADY,
        s_axi_DATA_RDATA,
        s_axi_DATA_RRESP,
        s_axi_DATA_BVALID,
        s_axi_DATA_BREADY,
        s_axi_DATA_BRESP,
        s_axi_TEST_AWVALID,
        s_axi_TEST_AWREADY,
        s_axi_TEST_AWADDR,
        s_axi_TEST_WVALID,
        s_axi_TEST_WREADY,
        s_axi_TEST_WDATA,
        s_axi_TEST_WSTRB,
        s_axi_TEST_ARVALID,
        s_axi_TEST_ARREADY,
        s_axi_TEST_ARADDR,
        s_axi_TEST_RVALID,
        s_axi_TEST_RREADY,
        s_axi_TEST_RDATA,
        s_axi_TEST_RRESP,
        s_axi_TEST_BVALID,
        s_axi_TEST_BREADY,
        s_axi_TEST_BRESP
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_DATA_DATA_WIDTH = 32;
parameter    C_S_AXI_DATA_ADDR_WIDTH = 6;
parameter    C_S_AXI_TEST_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_ADDR_WIDTH = 15;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_TEST_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_DATA_AWVALID;
output   s_axi_DATA_AWREADY;
input  [C_S_AXI_DATA_ADDR_WIDTH - 1:0] s_axi_DATA_AWADDR;
input   s_axi_DATA_WVALID;
output   s_axi_DATA_WREADY;
input  [C_S_AXI_DATA_DATA_WIDTH - 1:0] s_axi_DATA_WDATA;
input  [C_S_AXI_DATA_WSTRB_WIDTH - 1:0] s_axi_DATA_WSTRB;
input   s_axi_DATA_ARVALID;
output   s_axi_DATA_ARREADY;
input  [C_S_AXI_DATA_ADDR_WIDTH - 1:0] s_axi_DATA_ARADDR;
output   s_axi_DATA_RVALID;
input   s_axi_DATA_RREADY;
output  [C_S_AXI_DATA_DATA_WIDTH - 1:0] s_axi_DATA_RDATA;
output  [1:0] s_axi_DATA_RRESP;
output   s_axi_DATA_BVALID;
input   s_axi_DATA_BREADY;
output  [1:0] s_axi_DATA_BRESP;
input   s_axi_TEST_AWVALID;
output   s_axi_TEST_AWREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_AWADDR;
input   s_axi_TEST_WVALID;
output   s_axi_TEST_WREADY;
input  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_WDATA;
input  [C_S_AXI_TEST_WSTRB_WIDTH - 1:0] s_axi_TEST_WSTRB;
input   s_axi_TEST_ARVALID;
output   s_axi_TEST_ARREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_ARADDR;
output   s_axi_TEST_RVALID;
input   s_axi_TEST_RREADY;
output  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_RDATA;
output  [1:0] s_axi_TEST_RRESP;
output   s_axi_TEST_BVALID;
input   s_axi_TEST_BREADY;
output  [1:0] s_axi_TEST_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [4:0] SBUS_data_address0;
reg    SBUS_data_ce0;
wire   [7:0] SBUS_data_q0;
reg   [11:0] norm_out_address0;
reg    norm_out_ce0;
reg    norm_out_we0;
reg   [31:0] norm_out_d0;
reg   [31:0] lost;
reg   [7:0] errors;
reg  signed [7:0] SBUS_data_load_reg_726;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
reg   [7:0] SBUS_data_load_21_reg_837;
wire    ap_CS_fsm_state23;
wire   [0:0] tmp_5_fu_662_p2;
reg   [0:0] tmp_5_reg_847;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [31:0] tmp_4_fu_709_p2;
wire   [0:0] or_cond_fu_677_p2;
wire   [0:0] tmp_2_fu_698_p3;
wire   [7:0] tmp_6_fu_686_p2;
wire   [31:0] tmp_3_fu_547_p1;
wire   [31:0] tmp_3_1_fu_552_p1;
wire   [31:0] tmp_3_2_fu_557_p1;
wire   [31:0] tmp_3_3_fu_562_p1;
wire   [31:0] tmp_3_4_fu_567_p1;
wire   [31:0] tmp_3_5_fu_572_p1;
wire   [31:0] tmp_3_6_fu_577_p1;
wire   [31:0] tmp_3_7_fu_582_p1;
wire   [31:0] tmp_3_s_fu_587_p1;
wire   [31:0] tmp_3_8_fu_592_p1;
wire   [31:0] tmp_3_9_fu_597_p1;
wire   [31:0] tmp_3_10_fu_602_p1;
wire   [31:0] tmp_3_11_fu_607_p1;
wire   [31:0] tmp_3_12_fu_612_p1;
wire   [31:0] tmp_3_13_fu_617_p1;
wire   [31:0] tmp_3_14_fu_622_p1;
wire   [31:0] tmp_3_15_fu_627_p1;
wire   [31:0] tmp_3_16_fu_632_p1;
wire   [31:0] tmp_3_17_fu_637_p1;
wire   [31:0] tmp_3_18_fu_642_p1;
wire   [31:0] tmp_3_19_fu_647_p1;
wire   [31:0] tmp_3_20_fu_652_p1;
wire   [31:0] tmp_3_21_fu_657_p1;
wire  signed [31:0] tmp_fu_668_p1;
wire  signed [7:0] tmp_3_fu_547_p0;
wire   [0:0] tmp_1_fu_672_p2;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 lost = 32'd0;
#0 errors = 8'd0;
end

RC_RECEIVER_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
RC_RECEIVER_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

RC_RECEIVER_DATA_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DATA_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DATA_DATA_WIDTH ))
RC_RECEIVER_DATA_s_axi_U(
    .AWVALID(s_axi_DATA_AWVALID),
    .AWREADY(s_axi_DATA_AWREADY),
    .AWADDR(s_axi_DATA_AWADDR),
    .WVALID(s_axi_DATA_WVALID),
    .WREADY(s_axi_DATA_WREADY),
    .WDATA(s_axi_DATA_WDATA),
    .WSTRB(s_axi_DATA_WSTRB),
    .ARVALID(s_axi_DATA_ARVALID),
    .ARREADY(s_axi_DATA_ARREADY),
    .ARADDR(s_axi_DATA_ARADDR),
    .RVALID(s_axi_DATA_RVALID),
    .RREADY(s_axi_DATA_RREADY),
    .RDATA(s_axi_DATA_RDATA),
    .RRESP(s_axi_DATA_RRESP),
    .BVALID(s_axi_DATA_BVALID),
    .BREADY(s_axi_DATA_BREADY),
    .BRESP(s_axi_DATA_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .SBUS_data_address0(SBUS_data_address0),
    .SBUS_data_ce0(SBUS_data_ce0),
    .SBUS_data_q0(SBUS_data_q0)
);

RC_RECEIVER_TEST_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TEST_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TEST_DATA_WIDTH ))
RC_RECEIVER_TEST_s_axi_U(
    .AWVALID(s_axi_TEST_AWVALID),
    .AWREADY(s_axi_TEST_AWREADY),
    .AWADDR(s_axi_TEST_AWADDR),
    .WVALID(s_axi_TEST_WVALID),
    .WREADY(s_axi_TEST_WREADY),
    .WDATA(s_axi_TEST_WDATA),
    .WSTRB(s_axi_TEST_WSTRB),
    .ARVALID(s_axi_TEST_ARVALID),
    .ARREADY(s_axi_TEST_ARREADY),
    .ARADDR(s_axi_TEST_ARADDR),
    .RVALID(s_axi_TEST_RVALID),
    .RREADY(s_axi_TEST_RREADY),
    .RDATA(s_axi_TEST_RDATA),
    .RRESP(s_axi_TEST_RRESP),
    .BVALID(s_axi_TEST_BVALID),
    .BREADY(s_axi_TEST_BREADY),
    .BRESP(s_axi_TEST_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .norm_out_address0(norm_out_address0),
    .norm_out_ce0(norm_out_ce0),
    .norm_out_we0(norm_out_we0),
    .norm_out_d0(norm_out_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        SBUS_data_load_21_reg_837 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SBUS_data_load_reg_726 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_677_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        errors <= tmp_6_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_698_p3 == 1'd1) & (or_cond_fu_677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        lost <= tmp_4_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_5_reg_847 <= tmp_5_fu_662_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        SBUS_data_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        SBUS_data_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        SBUS_data_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        SBUS_data_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        SBUS_data_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        SBUS_data_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        SBUS_data_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        SBUS_data_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        SBUS_data_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        SBUS_data_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        SBUS_data_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        SBUS_data_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        SBUS_data_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        SBUS_data_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SBUS_data_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SBUS_data_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SBUS_data_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SBUS_data_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        SBUS_data_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SBUS_data_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SBUS_data_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SBUS_data_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SBUS_data_address0 = 64'd0;
    end else begin
        SBUS_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SBUS_data_ce0 = 1'b1;
    end else begin
        SBUS_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        norm_out_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        norm_out_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        norm_out_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        norm_out_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        norm_out_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        norm_out_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        norm_out_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        norm_out_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        norm_out_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        norm_out_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        norm_out_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        norm_out_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        norm_out_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        norm_out_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        norm_out_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        norm_out_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        norm_out_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        norm_out_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        norm_out_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        norm_out_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        norm_out_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        norm_out_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        norm_out_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        norm_out_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        norm_out_address0 = 64'd8;
    end else begin
        norm_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        norm_out_ce0 = 1'b1;
    end else begin
        norm_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        norm_out_d0 = tmp_fu_668_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        norm_out_d0 = tmp_3_21_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        norm_out_d0 = tmp_3_20_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        norm_out_d0 = tmp_3_19_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        norm_out_d0 = tmp_3_18_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        norm_out_d0 = tmp_3_17_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        norm_out_d0 = tmp_3_16_fu_632_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        norm_out_d0 = tmp_3_15_fu_627_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        norm_out_d0 = tmp_3_14_fu_622_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        norm_out_d0 = tmp_3_13_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        norm_out_d0 = tmp_3_12_fu_612_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        norm_out_d0 = tmp_3_11_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        norm_out_d0 = tmp_3_10_fu_602_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        norm_out_d0 = tmp_3_9_fu_597_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        norm_out_d0 = tmp_3_8_fu_592_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        norm_out_d0 = tmp_3_s_fu_587_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        norm_out_d0 = tmp_3_7_fu_582_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        norm_out_d0 = tmp_3_6_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        norm_out_d0 = tmp_3_5_fu_572_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        norm_out_d0 = tmp_3_4_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        norm_out_d0 = tmp_3_3_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        norm_out_d0 = tmp_3_2_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        norm_out_d0 = tmp_3_1_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        norm_out_d0 = tmp_3_fu_547_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        norm_out_d0 = 32'd15;
    end else begin
        norm_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        norm_out_we0 = 1'b1;
    end else begin
        norm_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign or_cond_fu_677_p2 = (tmp_5_reg_847 & tmp_1_fu_672_p2);

assign tmp_1_fu_672_p2 = ((SBUS_data_load_reg_726 == 8'd15) ? 1'b1 : 1'b0);

assign tmp_2_fu_698_p3 = SBUS_data_load_21_reg_837[32'd2];

assign tmp_3_10_fu_602_p1 = SBUS_data_q0;

assign tmp_3_11_fu_607_p1 = SBUS_data_q0;

assign tmp_3_12_fu_612_p1 = SBUS_data_q0;

assign tmp_3_13_fu_617_p1 = SBUS_data_q0;

assign tmp_3_14_fu_622_p1 = SBUS_data_q0;

assign tmp_3_15_fu_627_p1 = SBUS_data_q0;

assign tmp_3_16_fu_632_p1 = SBUS_data_q0;

assign tmp_3_17_fu_637_p1 = SBUS_data_q0;

assign tmp_3_18_fu_642_p1 = SBUS_data_q0;

assign tmp_3_19_fu_647_p1 = SBUS_data_q0;

assign tmp_3_1_fu_552_p1 = SBUS_data_q0;

assign tmp_3_20_fu_652_p1 = SBUS_data_q0;

assign tmp_3_21_fu_657_p1 = SBUS_data_q0;

assign tmp_3_2_fu_557_p1 = SBUS_data_q0;

assign tmp_3_3_fu_562_p1 = SBUS_data_q0;

assign tmp_3_4_fu_567_p1 = SBUS_data_q0;

assign tmp_3_5_fu_572_p1 = SBUS_data_q0;

assign tmp_3_6_fu_577_p1 = SBUS_data_q0;

assign tmp_3_7_fu_582_p1 = SBUS_data_q0;

assign tmp_3_8_fu_592_p1 = SBUS_data_q0;

assign tmp_3_9_fu_597_p1 = SBUS_data_q0;

assign tmp_3_fu_547_p0 = SBUS_data_q0;

assign tmp_3_fu_547_p1 = $unsigned(tmp_3_fu_547_p0);

assign tmp_3_s_fu_587_p1 = SBUS_data_q0;

assign tmp_4_fu_709_p2 = (lost + 32'd1);

assign tmp_5_fu_662_p2 = ((SBUS_data_q0 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_686_p2 = (errors + 8'd1);

assign tmp_fu_668_p1 = SBUS_data_load_reg_726;

endmodule //RC_RECEIVER
