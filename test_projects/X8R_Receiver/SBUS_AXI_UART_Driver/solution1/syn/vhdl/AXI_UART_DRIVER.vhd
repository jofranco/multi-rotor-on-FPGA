-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXI_UART_DRIVER is
generic (
    C_M_AXI_UART_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_UART_ID_WIDTH : INTEGER := 1;
    C_M_AXI_UART_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_UART_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_UART_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_UART_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_UART_USER_VALUE : INTEGER := 0;
    C_M_AXI_UART_PROT_VALUE : INTEGER := 0;
    C_M_AXI_UART_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_UART_AWVALID : OUT STD_LOGIC;
    m_axi_UART_AWREADY : IN STD_LOGIC;
    m_axi_UART_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_WIDTH-1 downto 0);
    m_axi_UART_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_UART_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_AWUSER_WIDTH-1 downto 0);
    m_axi_UART_WVALID : OUT STD_LOGIC;
    m_axi_UART_WREADY : IN STD_LOGIC;
    m_axi_UART_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_DATA_WIDTH-1 downto 0);
    m_axi_UART_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_DATA_WIDTH/8-1 downto 0);
    m_axi_UART_WLAST : OUT STD_LOGIC;
    m_axi_UART_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_WUSER_WIDTH-1 downto 0);
    m_axi_UART_ARVALID : OUT STD_LOGIC;
    m_axi_UART_ARREADY : IN STD_LOGIC;
    m_axi_UART_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ADDR_WIDTH-1 downto 0);
    m_axi_UART_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_UART_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_UART_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_UART_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_UART_ARUSER_WIDTH-1 downto 0);
    m_axi_UART_RVALID : IN STD_LOGIC;
    m_axi_UART_RREADY : OUT STD_LOGIC;
    m_axi_UART_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_UART_DATA_WIDTH-1 downto 0);
    m_axi_UART_RLAST : IN STD_LOGIC;
    m_axi_UART_RID : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UART_RUSER_WIDTH-1 downto 0);
    m_axi_UART_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_BVALID : IN STD_LOGIC;
    m_axi_UART_BREADY : OUT STD_LOGIC;
    m_axi_UART_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_UART_BID : IN STD_LOGIC_VECTOR (C_M_AXI_UART_ID_WIDTH-1 downto 0);
    m_axi_UART_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_UART_BUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AXI_UART_DRIVER is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AXI_UART_DRIVER,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1298,HLS_SYN_LUT=2297,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_400 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_const_lv64_407 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000111";
    constant ap_const_lv64_403 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000011";
    constant ap_const_lv64_401 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000001";
    constant ap_const_lv64_402 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000010";
    constant ap_const_lv64_405 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_45 : STD_LOGIC_VECTOR (7 downto 0) := "01000101";
    constant ap_const_lv18_30D40 : STD_LOGIC_VECTOR (17 downto 0) := "110000110101000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal firstSample : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal calibrationSuccess : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal UART_blk_n_AW : STD_LOGIC;
    signal firstSample_load_load_fu_377_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal UART_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal UART_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal UART_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal firstSample_load_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_578 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_5_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal tmp_2_fu_461_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_4_fu_502_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal OUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal OUT_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_4_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal calibrationSuccess_l_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_AWVALID : STD_LOGIC;
    signal UART_AWREADY : STD_LOGIC;
    signal UART_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_WVALID : STD_LOGIC;
    signal UART_WREADY : STD_LOGIC;
    signal UART_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_ARVALID : STD_LOGIC;
    signal UART_ARREADY : STD_LOGIC;
    signal UART_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_RVALID : STD_LOGIC;
    signal UART_RREADY : STD_LOGIC;
    signal UART_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_RLAST : STD_LOGIC;
    signal UART_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal UART_BVALID : STD_LOGIC;
    signal UART_BREADY : STD_LOGIC;
    signal UART_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal UART_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal UART_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_r_ARVALID : STD_LOGIC;
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RREADY : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_UART_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_UART_AWREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_sig_ioackin_UART_ARREADY : STD_LOGIC;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal UART_addr_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal UART_addr_1_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal UART_addr_3_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal temp_fu_409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state22_io : BOOLEAN;
    signal calibrationSuccess_l_load_fu_430_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op170_writeresp_state28 : BOOLEAN;
    signal ap_block_state28 : BOOLEAN;
    signal ctr_V_fu_440_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal UART_addr_5_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_604 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_OUT_r_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_OUT_r_ARREADY : STD_LOGIC;
    signal OUT_addr_read_reg_615 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal NUM_BYTES_READ_load_reg_631 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_predicate_op234_readreq_state60 : BOOLEAN;
    signal ap_predicate_op237_writereq_state60 : BOOLEAN;
    signal ap_block_state60_io : BOOLEAN;
    signal ap_block_state67_io : BOOLEAN;
    signal tmp_7_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_014_0_i_reg_339 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NUM_BYTES_READ_2_reg_350 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_UART_AWREADY : STD_LOGIC := '0';
    signal ap_block_state7_io : BOOLEAN;
    signal ap_reg_ioackin_UART_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_UART_WREADY : STD_LOGIC := '0';
    signal ap_block_state5_io : BOOLEAN;
    signal ap_reg_ioackin_OUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUT_r_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUT_r_WREADY : STD_LOGIC;
    signal ap_reg_ioackin_OUT_r_ARREADY : STD_LOGIC := '0';
    signal ap_predicate_op277_writeresp_state87 : BOOLEAN;
    signal ap_block_state87 : BOOLEAN;
    signal ap_block_state80 : BOOLEAN;
    signal tmp_s_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal NUM_BYTES_READ_fu_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal NUM_BYTES_READ_1_fu_520_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);
    signal ap_condition_947 : BOOLEAN;
    signal ap_condition_954 : BOOLEAN;
    signal ap_condition_220 : BOOLEAN;

    component AXI_UART_DRIVER_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component AXI_UART_DRIVER_UART_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component AXI_UART_DRIVER_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    AXI_UART_DRIVER_CTRL_s_axi_U : component AXI_UART_DRIVER_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXI_UART_DRIVER_UART_m_axi_U : component AXI_UART_DRIVER_UART_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_UART_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_UART_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_UART_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_UART_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_UART_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_UART_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_UART_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_UART_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_UART_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_UART_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_UART_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_UART_CACHE_VALUE)
    port map (
        AWVALID => m_axi_UART_AWVALID,
        AWREADY => m_axi_UART_AWREADY,
        AWADDR => m_axi_UART_AWADDR,
        AWID => m_axi_UART_AWID,
        AWLEN => m_axi_UART_AWLEN,
        AWSIZE => m_axi_UART_AWSIZE,
        AWBURST => m_axi_UART_AWBURST,
        AWLOCK => m_axi_UART_AWLOCK,
        AWCACHE => m_axi_UART_AWCACHE,
        AWPROT => m_axi_UART_AWPROT,
        AWQOS => m_axi_UART_AWQOS,
        AWREGION => m_axi_UART_AWREGION,
        AWUSER => m_axi_UART_AWUSER,
        WVALID => m_axi_UART_WVALID,
        WREADY => m_axi_UART_WREADY,
        WDATA => m_axi_UART_WDATA,
        WSTRB => m_axi_UART_WSTRB,
        WLAST => m_axi_UART_WLAST,
        WID => m_axi_UART_WID,
        WUSER => m_axi_UART_WUSER,
        ARVALID => m_axi_UART_ARVALID,
        ARREADY => m_axi_UART_ARREADY,
        ARADDR => m_axi_UART_ARADDR,
        ARID => m_axi_UART_ARID,
        ARLEN => m_axi_UART_ARLEN,
        ARSIZE => m_axi_UART_ARSIZE,
        ARBURST => m_axi_UART_ARBURST,
        ARLOCK => m_axi_UART_ARLOCK,
        ARCACHE => m_axi_UART_ARCACHE,
        ARPROT => m_axi_UART_ARPROT,
        ARQOS => m_axi_UART_ARQOS,
        ARREGION => m_axi_UART_ARREGION,
        ARUSER => m_axi_UART_ARUSER,
        RVALID => m_axi_UART_RVALID,
        RREADY => m_axi_UART_RREADY,
        RDATA => m_axi_UART_RDATA,
        RLAST => m_axi_UART_RLAST,
        RID => m_axi_UART_RID,
        RUSER => m_axi_UART_RUSER,
        RRESP => m_axi_UART_RRESP,
        BVALID => m_axi_UART_BVALID,
        BREADY => m_axi_UART_BREADY,
        BRESP => m_axi_UART_BRESP,
        BID => m_axi_UART_BID,
        BUSER => m_axi_UART_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => UART_ARVALID,
        I_ARREADY => UART_ARREADY,
        I_ARADDR => UART_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => UART_RVALID,
        I_RREADY => UART_RREADY,
        I_RDATA => UART_RDATA,
        I_RID => UART_RID,
        I_RUSER => UART_RUSER,
        I_RRESP => UART_RRESP,
        I_RLAST => UART_RLAST,
        I_AWVALID => UART_AWVALID,
        I_AWREADY => UART_AWREADY,
        I_AWADDR => UART_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => UART_WVALID,
        I_WREADY => UART_WREADY,
        I_WDATA => UART_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => UART_BVALID,
        I_BREADY => UART_BREADY,
        I_BRESP => UART_BRESP,
        I_BID => UART_BID,
        I_BUSER => UART_BUSER);

    AXI_UART_DRIVER_OUT_r_m_axi_U : component AXI_UART_DRIVER_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => OUT_r_ARVALID,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => OUT_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => OUT_r_RREADY,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => OUT_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => OUT_r_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => OUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                    if ((ap_sig_ioackin_OUT_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_OUT_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = OUT_r_ARREADY)) then 
                        ap_reg_ioackin_OUT_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state74)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op237_writereq_state60 = ap_const_boolean_1)))) then 
                    ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op237_writereq_state60 = ap_const_boolean_1)))) then 
                    ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_UART_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_UART_ARREADY <= ap_const_logic_0;
            else
                if (((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state67_io))) and (tmp_4_fu_502_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op234_readreq_state60 = ap_const_boolean_1)) or (not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state37_io))) and (tmp_2_fu_461_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    ap_reg_ioackin_UART_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = UART_RVALID) and (tmp_4_fu_502_p1 = ap_const_lv1_1) and (ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op234_readreq_state60 = ap_const_boolean_1)) or ((ap_const_logic_1 = UART_RVALID) and (tmp_2_fu_461_p1 = ap_const_lv1_1) and (ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_logic_1 = UART_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    ap_reg_ioackin_UART_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_UART_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_UART_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_boolean_0 = ap_block_state22_io) and (tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((ap_const_logic_0 = UART_BVALID) or (ap_const_boolean_1 = ap_block_state7_io))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (firstSample = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_reg_ioackin_UART_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (firstSample = ap_const_lv1_1) and (ap_const_logic_1 = UART_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_reg_ioackin_UART_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_UART_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_UART_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_sig_ioackin_UART_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_const_logic_0 = UART_BVALID) or (ap_const_boolean_1 = ap_block_state7_io))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_UART_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = UART_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_UART_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    firstSample_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                firstSample <= ap_const_lv1_1;
            else
                if ((not(((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1))) and (firstSample_load_reg_541 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    firstSample <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    NUM_BYTES_READ_2_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state60_io) and (tmp_8_fu_489_p2 = ap_const_lv1_0) and (tmp_5_reg_620 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                NUM_BYTES_READ_2_reg_350 <= NUM_BYTES_READ_fu_122;
            elsif (((tmp_5_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                NUM_BYTES_READ_2_reg_350 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    NUM_BYTES_READ_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                NUM_BYTES_READ_fu_122 <= NUM_BYTES_READ_1_fu_520_p2;
            elsif (((tmp_5_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                NUM_BYTES_READ_fu_122 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    p_014_0_i_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                p_014_0_i_reg_339 <= ctr_V_fu_440_p2;
            elsif ((not(((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1))) and (calibrationSuccess_l_load_fu_430_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                p_014_0_i_reg_339 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state60_io) and (tmp_5_reg_620 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                NUM_BYTES_READ_load_reg_631 <= NUM_BYTES_READ_fu_122;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = OUT_r_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                OUT_addr_read_reg_615 <= OUT_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state22_io) and (tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                calibrationSuccess <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                calibrationSuccess_l_reg_582 <= calibrationSuccess;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                firstSample_load_reg_541 <= firstSample;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                temp_reg_573 <= temp_fu_409_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state37_io))) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                tmp_2_reg_600 <= tmp_2_fu_461_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                tmp_3_reg_604 <= tmp_3_fu_465_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state67_io))) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                tmp_4_reg_648 <= tmp_4_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                tmp_5_reg_620 <= tmp_5_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                tmp_7_reg_652 <= tmp_7_fu_506_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state22_io) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_reg_578 <= tmp_fu_413_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, firstSample, firstSample_load_load_fu_377_p1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_CS_fsm_state22, tmp_fu_413_p2, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state60, tmp_5_reg_620, tmp_8_fu_489_p2, ap_CS_fsm_state67, tmp_2_fu_461_p1, ap_CS_fsm_state44, tmp_4_fu_502_p1, ap_CS_fsm_state74, ap_CS_fsm_state45, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state58, ap_CS_fsm_state75, ap_CS_fsm_state80, tmp_4_reg_648, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state87, UART_RVALID, UART_BVALID, OUT_r_RVALID, OUT_r_BVALID, ap_sig_ioackin_UART_WREADY, ap_block_state3_io, ap_sig_ioackin_UART_ARREADY, ap_block_state37_io, ap_block_state1_io, ap_block_state2_io, ap_block_state4_io, ap_block_state6_io, ap_block_state22_io, calibrationSuccess_l_load_fu_430_p1, ap_predicate_op170_writeresp_state28, ap_CS_fsm_state29, ap_sig_ioackin_OUT_r_AWREADY, ap_sig_ioackin_OUT_r_ARREADY, ap_block_state60_io, ap_block_state67_io, tmp_6_fu_434_p2, ap_block_state7_io, ap_block_state5_io, ap_sig_ioackin_OUT_r_WREADY, ap_predicate_op277_writeresp_state87)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (firstSample_load_load_fu_377_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (firstSample = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((ap_const_logic_0 = UART_BVALID) or (ap_const_boolean_1 = ap_block_state7_io))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_boolean_0 = ap_block_state22_io) and (tmp_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((ap_const_boolean_0 = ap_block_state22_io) and (tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_sig_ioackin_UART_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if ((not(((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1))) and (calibrationSuccess_l_load_fu_430_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif ((not(((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1))) and (calibrationSuccess_l_load_fu_430_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((tmp_6_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_sig_ioackin_UART_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if ((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state37_io))) and (tmp_2_fu_461_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                elsif ((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state37_io))) and (tmp_2_fu_461_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_sig_ioackin_OUT_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = OUT_r_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((ap_const_boolean_0 = ap_block_state60_io) and (ap_const_logic_1 = ap_CS_fsm_state60) and ((tmp_8_fu_489_p2 = ap_const_lv1_0) or (tmp_5_reg_620 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                elsif (((ap_const_boolean_0 = ap_block_state60_io) and (tmp_8_fu_489_p2 = ap_const_lv1_1) and (tmp_5_reg_620 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if ((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state67_io))) and (tmp_4_fu_502_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                elsif ((not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state67_io))) and (tmp_4_fu_502_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (tmp_4_reg_648 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_predicate_op277_writeresp_state87 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NUM_BYTES_READ_1_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(NUM_BYTES_READ_load_reg_631));
    OUT_r_ARADDR <= ap_const_lv64_1(32 - 1 downto 0);

    OUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state51, ap_reg_ioackin_OUT_r_ARREADY)
    begin
        if (((ap_reg_ioackin_OUT_r_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            OUT_r_ARVALID <= ap_const_logic_1;
        else 
            OUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_AWADDR_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state44, ap_CS_fsm_state74, UART_RVALID, ap_predicate_op237_writereq_state60, tmp_9_fu_510_p1, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0)) then
            if (((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                OUT_r_AWADDR <= tmp_9_fu_510_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op237_writereq_state60 = ap_const_boolean_1))) then 
                OUT_r_AWADDR <= ap_const_lv64_1A(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                OUT_r_AWADDR <= ap_const_lv32_0;
            else 
                OUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_AWLEN_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state44, ap_CS_fsm_state74, UART_RVALID, ap_predicate_op237_writereq_state60, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if (((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op237_writereq_state60 = ap_const_boolean_1))) then 
            OUT_r_AWLEN <= ap_const_lv32_2;
        elsif ((((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            OUT_r_AWLEN <= ap_const_lv32_1;
        else 
            OUT_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state44, ap_CS_fsm_state74, UART_RVALID, ap_predicate_op237_writereq_state60, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op237_writereq_state60 = ap_const_boolean_1)))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state80, tmp_4_reg_648, ap_CS_fsm_state87, OUT_r_BVALID, ap_predicate_op277_writeresp_state87)
    begin
        if (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_predicate_op277_writeresp_state87 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (ap_predicate_op277_writeresp_state87 = ap_const_boolean_1)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (tmp_4_reg_648 = ap_const_lv1_1))) and (tmp_4_reg_648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_RREADY_assign_proc : process(ap_CS_fsm_state58, OUT_r_RVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            OUT_r_RREADY <= ap_const_logic_1;
        else 
            OUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WDATA_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state75, ap_CS_fsm_state81, ap_CS_fsm_state82, tmp_3_reg_604, tmp_7_reg_652, ap_reg_ioackin_OUT_r_WREADY, tmp_s_fu_530_p1)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                OUT_r_WDATA <= tmp_s_fu_530_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                OUT_r_WDATA <= ap_const_lv8_45;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                OUT_r_WDATA <= tmp_7_reg_652;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                OUT_r_WDATA <= tmp_3_reg_604;
            else 
                OUT_r_WDATA <= "XXXXXXXX";
            end if;
        else 
            OUT_r_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state75, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AR_assign_proc : process(m_axi_OUT_r_ARREADY, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            OUT_r_blk_n_AR <= m_axi_OUT_r_ARREADY;
        else 
            OUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_fsm_state60, tmp_5_reg_620, tmp_8_fu_489_p2, ap_CS_fsm_state44, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state60) and ((tmp_8_fu_489_p2 = ap_const_lv1_0) or (tmp_5_reg_620 = ap_const_lv1_0))))) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_CS_fsm_state50, ap_CS_fsm_state80, tmp_4_reg_648, ap_CS_fsm_state87, calibrationSuccess_l_reg_582, tmp_2_reg_600)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or ((tmp_2_reg_600 = ap_const_lv1_1) and (calibrationSuccess_l_reg_582 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((tmp_4_reg_648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80)))) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_R_assign_proc : process(m_axi_OUT_r_RVALID, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            OUT_r_blk_n_R <= m_axi_OUT_r_RVALID;
        else 
            OUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_CS_fsm_state45, ap_CS_fsm_state75, ap_CS_fsm_state81, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    UART_ARADDR_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state60, reg_369, UART_addr_5_reg_594, ap_predicate_op234_readreq_state60, ap_reg_ioackin_UART_ARREADY, ap_condition_947, ap_condition_954)
    begin
        if ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_954)) then 
                UART_ARADDR <= reg_369;
            elsif ((ap_const_boolean_1 = ap_condition_947)) then 
                UART_ARADDR <= ap_const_lv64_400(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op234_readreq_state60 = ap_const_boolean_1))) then 
                UART_ARADDR <= UART_addr_5_reg_594;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                UART_ARADDR <= ap_const_lv64_405(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                UART_ARADDR <= ap_const_lv64_407(32 - 1 downto 0);
            else 
                UART_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            UART_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UART_ARVALID_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state60, ap_CS_fsm_state67, tmp_2_fu_461_p1, tmp_4_fu_502_p1, UART_RVALID, ap_predicate_op234_readreq_state60, ap_reg_ioackin_UART_ARREADY)
    begin
        if ((((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (tmp_4_fu_502_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60) and (ap_predicate_op234_readreq_state60 = ap_const_boolean_1)) or ((ap_const_logic_1 = UART_RVALID) and (ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (tmp_2_fu_461_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            UART_ARVALID <= ap_const_logic_1;
        else 
            UART_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    UART_AWADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state22, tmp_fu_413_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, UART_BVALID, UART_addr_reg_545, UART_addr_1_reg_553, UART_addr_3_reg_560, ap_reg_ioackin_UART_AWREADY, ap_condition_220)
    begin
        if ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                UART_AWADDR <= ap_const_lv64_402(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                UART_AWADDR <= UART_addr_3_reg_560;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                UART_AWADDR <= ap_const_lv64_401(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                UART_AWADDR <= ap_const_lv64_400(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                UART_AWADDR <= UART_addr_1_reg_553;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                UART_AWADDR <= ap_const_lv64_403(32 - 1 downto 0);
            elsif (((tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                UART_AWADDR <= UART_addr_reg_545;
            elsif ((ap_const_boolean_1 = ap_condition_220)) then 
                UART_AWADDR <= ap_const_lv64_407(32 - 1 downto 0);
            else 
                UART_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            UART_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UART_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, firstSample, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state22, tmp_fu_413_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, UART_BVALID, ap_reg_ioackin_UART_AWREADY)
    begin
        if ((((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_reg_ioackin_UART_AWREADY = ap_const_logic_0) and (firstSample = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            UART_AWVALID <= ap_const_logic_1;
        else 
            UART_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    UART_BREADY_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12, UART_BVALID, ap_sig_ioackin_UART_WREADY, ap_predicate_op170_writeresp_state28, ap_block_state7_io)
    begin
        if ((((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = UART_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_sig_ioackin_UART_WREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_BVALID))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1)) or (not(((ap_const_logic_0 = UART_BVALID) or (ap_const_boolean_1 = ap_block_state7_io))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            UART_BREADY <= ap_const_logic_1;
        else 
            UART_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    UART_RREADY_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state37, ap_CS_fsm_state67, ap_CS_fsm_state44, ap_CS_fsm_state74, UART_RVALID, ap_block_state37_io, ap_sig_ioackin_OUT_r_AWREADY, ap_block_state67_io)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state74)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or (ap_const_logic_0 = UART_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state44)) or (not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state67_io))) and (ap_const_logic_1 = ap_CS_fsm_state67)) or (not(((ap_const_logic_0 = UART_RVALID) or (ap_const_boolean_1 = ap_block_state37_io))) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_logic_1 = UART_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            UART_RREADY <= ap_const_logic_1;
        else 
            UART_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    UART_WDATA_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, UART_BVALID, ap_reg_ioackin_UART_WREADY)
    begin
        if ((((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            UART_WDATA <= ap_const_lv32_1;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            UART_WDATA <= ap_const_lv32_1F;
        elsif ((((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            UART_WDATA <= ap_const_lv32_0;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            UART_WDATA <= ap_const_lv32_3E;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            UART_WDATA <= ap_const_lv32_80;
        elsif (((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            UART_WDATA <= ap_const_lv32_45;
        else 
            UART_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UART_WVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, UART_BVALID, ap_reg_ioackin_UART_WREADY)
    begin
        if ((((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = UART_BVALID) and (ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            UART_WVALID <= ap_const_logic_1;
        else 
            UART_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    UART_addr_1_reg_553 <= ap_const_lv64_403(32 - 1 downto 0);
    UART_addr_3_reg_560 <= ap_const_lv64_401(32 - 1 downto 0);
    UART_addr_5_reg_594 <= ap_const_lv64_405(32 - 1 downto 0);
    UART_addr_reg_545 <= ap_const_lv64_407(32 - 1 downto 0);

    UART_blk_n_AR_assign_proc : process(m_axi_UART_ARREADY, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state60, tmp_5_reg_620, tmp_8_fu_489_p2, ap_CS_fsm_state67, tmp_2_fu_461_p1, tmp_4_fu_502_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((tmp_4_fu_502_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((tmp_8_fu_489_p2 = ap_const_lv1_1) and (tmp_5_reg_620 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((tmp_2_fu_461_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            UART_blk_n_AR <= m_axi_UART_ARREADY;
        else 
            UART_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_UART_AWREADY, firstSample, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state22, tmp_fu_413_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_start = ap_const_logic_1) and (firstSample = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            UART_blk_n_AW <= m_axi_UART_AWREADY;
        else 
            UART_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_B_assign_proc : process(m_axi_UART_BVALID, ap_CS_fsm_state7, ap_CS_fsm_state28, firstSample_load_reg_541, tmp_reg_578, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_578 = ap_const_lv1_1) and (firstSample_load_reg_541 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            UART_blk_n_B <= m_axi_UART_BVALID;
        else 
            UART_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_R_assign_proc : process(m_axi_UART_RVALID, ap_CS_fsm_state21, ap_CS_fsm_state37, ap_CS_fsm_state67, ap_CS_fsm_state44, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            UART_blk_n_R <= m_axi_UART_RVALID;
        else 
            UART_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    UART_blk_n_W_assign_proc : process(m_axi_UART_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            UART_blk_n_W <= m_axi_UART_WREADY;
        else 
            UART_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_io_assign_proc : process(firstSample, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state1_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) and (firstSample = ap_const_lv1_1));
    end process;


    ap_block_state22_io_assign_proc : process(tmp_fu_413_p2, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state22_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) and (tmp_fu_413_p2 = ap_const_lv1_1));
    end process;


    ap_block_state28_assign_proc : process(UART_BVALID, ap_predicate_op170_writeresp_state28)
    begin
                ap_block_state28 <= ((ap_const_logic_0 = UART_BVALID) and (ap_predicate_op170_writeresp_state28 = ap_const_boolean_1));
    end process;


    ap_block_state2_io_assign_proc : process(ap_sig_ioackin_UART_WREADY, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_WREADY = ap_const_logic_0));
    end process;


    ap_block_state37_io_assign_proc : process(tmp_2_fu_461_p1, ap_sig_ioackin_UART_ARREADY)
    begin
                ap_block_state37_io <= ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_0) and (tmp_2_fu_461_p1 = ap_const_lv1_1));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_UART_WREADY, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_WREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_UART_WREADY, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_WREADY = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(ap_sig_ioackin_UART_WREADY, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state5_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_WREADY = ap_const_logic_0));
    end process;


    ap_block_state60_io_assign_proc : process(ap_sig_ioackin_UART_ARREADY, ap_sig_ioackin_OUT_r_AWREADY, ap_predicate_op234_readreq_state60, ap_predicate_op237_writereq_state60)
    begin
                ap_block_state60_io <= (((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_predicate_op237_writereq_state60 = ap_const_boolean_1)) or ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_0) and (ap_predicate_op234_readreq_state60 = ap_const_boolean_1)));
    end process;


    ap_block_state67_io_assign_proc : process(tmp_4_fu_502_p1, ap_sig_ioackin_UART_ARREADY)
    begin
                ap_block_state67_io <= ((ap_sig_ioackin_UART_ARREADY = ap_const_logic_0) and (tmp_4_fu_502_p1 = ap_const_lv1_1));
    end process;


    ap_block_state6_io_assign_proc : process(ap_sig_ioackin_UART_WREADY, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state6_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_WREADY = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(ap_sig_ioackin_UART_WREADY, ap_sig_ioackin_UART_AWREADY)
    begin
                ap_block_state7_io <= ((ap_sig_ioackin_UART_AWREADY = ap_const_logic_0) or (ap_sig_ioackin_UART_WREADY = ap_const_logic_0));
    end process;


    ap_block_state80_assign_proc : process(tmp_4_reg_648, OUT_r_BVALID)
    begin
                ap_block_state80 <= ((ap_const_logic_0 = OUT_r_BVALID) and (tmp_4_reg_648 = ap_const_lv1_1));
    end process;


    ap_block_state87_assign_proc : process(OUT_r_BVALID, ap_predicate_op277_writeresp_state87)
    begin
                ap_block_state87 <= ((ap_const_logic_0 = OUT_r_BVALID) and (ap_predicate_op277_writeresp_state87 = ap_const_boolean_1));
    end process;


    ap_condition_220_assign_proc : process(ap_start, ap_CS_fsm_state1, firstSample)
    begin
                ap_condition_220 <= ((ap_start = ap_const_logic_1) and (firstSample = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_947_assign_proc : process(ap_CS_fsm_state37, tmp_2_fu_461_p1, UART_RVALID)
    begin
                ap_condition_947 <= ((ap_const_logic_1 = UART_RVALID) and (tmp_2_fu_461_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37));
    end process;


    ap_condition_954_assign_proc : process(ap_CS_fsm_state67, tmp_4_fu_502_p1, UART_RVALID)
    begin
                ap_condition_954 <= ((ap_const_logic_1 = UART_RVALID) and (tmp_4_fu_502_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state87, OUT_r_BVALID, ap_predicate_op277_writeresp_state87)
    begin
        if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_predicate_op277_writeresp_state87 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op170_writeresp_state28_assign_proc : process(firstSample_load_reg_541, tmp_reg_578)
    begin
                ap_predicate_op170_writeresp_state28 <= ((tmp_reg_578 = ap_const_lv1_1) and (firstSample_load_reg_541 = ap_const_lv1_1));
    end process;


    ap_predicate_op234_readreq_state60_assign_proc : process(tmp_5_reg_620, tmp_8_fu_489_p2)
    begin
                ap_predicate_op234_readreq_state60 <= ((tmp_8_fu_489_p2 = ap_const_lv1_1) and (tmp_5_reg_620 = ap_const_lv1_1));
    end process;


    ap_predicate_op237_writereq_state60_assign_proc : process(tmp_5_reg_620, tmp_8_fu_489_p2)
    begin
                ap_predicate_op237_writereq_state60 <= ((tmp_8_fu_489_p2 = ap_const_lv1_0) or (tmp_5_reg_620 = ap_const_lv1_0));
    end process;


    ap_predicate_op277_writeresp_state87_assign_proc : process(calibrationSuccess_l_reg_582, tmp_2_reg_600)
    begin
                ap_predicate_op277_writeresp_state87 <= ((tmp_2_reg_600 = ap_const_lv1_1) and (calibrationSuccess_l_reg_582 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87, OUT_r_BVALID, ap_predicate_op277_writeresp_state87)
    begin
        if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_predicate_op277_writeresp_state87 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_OUT_r_ARREADY_assign_proc : process(OUT_r_ARREADY, ap_reg_ioackin_OUT_r_ARREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_ARREADY <= OUT_r_ARREADY;
        else 
            ap_sig_ioackin_OUT_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUT_r_AWREADY_assign_proc : process(OUT_r_AWREADY, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_AWREADY <= OUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUT_r_WREADY_assign_proc : process(OUT_r_WREADY, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_WREADY <= OUT_r_WREADY;
        else 
            ap_sig_ioackin_OUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_UART_ARREADY_assign_proc : process(UART_ARREADY, ap_reg_ioackin_UART_ARREADY)
    begin
        if ((ap_reg_ioackin_UART_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_UART_ARREADY <= UART_ARREADY;
        else 
            ap_sig_ioackin_UART_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_UART_AWREADY_assign_proc : process(UART_AWREADY, ap_reg_ioackin_UART_AWREADY)
    begin
        if ((ap_reg_ioackin_UART_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_UART_AWREADY <= UART_AWREADY;
        else 
            ap_sig_ioackin_UART_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_UART_WREADY_assign_proc : process(UART_WREADY, ap_reg_ioackin_UART_WREADY)
    begin
        if ((ap_reg_ioackin_UART_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_UART_WREADY <= UART_WREADY;
        else 
            ap_sig_ioackin_UART_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    calibrationSuccess_l_load_fu_430_p1 <= calibrationSuccess;
    ctr_V_fu_440_p2 <= std_logic_vector(unsigned(p_014_0_i_reg_339) + unsigned(ap_const_lv18_1));
    firstSample_load_load_fu_377_p1 <= firstSample;
    reg_369 <= ap_const_lv64_400(32 - 1 downto 0);
    temp_fu_409_p1 <= UART_RDATA(8 - 1 downto 0);
    tmp_2_fu_461_p1 <= UART_RDATA(1 - 1 downto 0);
    tmp_3_fu_465_p1 <= UART_RDATA(8 - 1 downto 0);
    tmp_4_fu_502_p1 <= UART_RDATA(1 - 1 downto 0);
    tmp_5_fu_476_p2 <= "1" when (OUT_addr_read_reg_615 = ap_const_lv8_F) else "0";
    tmp_6_fu_434_p2 <= "1" when (p_014_0_i_reg_339 = ap_const_lv18_30D40) else "0";
    tmp_7_fu_506_p1 <= UART_RDATA(8 - 1 downto 0);
    tmp_8_fu_489_p2 <= "1" when (unsigned(NUM_BYTES_READ_fu_122) < unsigned(ap_const_lv5_19)) else "0";
    tmp_9_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(NUM_BYTES_READ_load_reg_631),64));
    tmp_fu_413_p2 <= "1" when (temp_reg_573 = ap_const_lv8_45) else "0";
    tmp_s_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(NUM_BYTES_READ_2_reg_350),8));
end behav;
