

================================================================
== Vivado HLS Report for 'AXI_UART_DRIVER'
================================================================
* Date:           Fri May 24 22:51:24 2019

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        SBUS_AXI_UART_Driver
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.750|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+--------+--------+----------+-----------+-----------+--------+----------+
        |          |     Latency     | Iteration|  Initiation Interval  |  Trip  |          |
        | Loop Name|   min  |   max  |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------+--------+--------+----------+-----------+-----------+--------+----------+
        |- Loop 1  |       ?|       ?|  9 ~ 21  |          -|          -|       ?|    no    |
        |- Loop 2  |  200000|  200000|         1|          -|          -|  200000|    no    |
        +----------+--------+--------+----------+-----------+-----------+--------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|DSP              |        -|      -|       -|      -|
|Expression       |        -|      -|       0|    123|
|FIFO             |        -|      -|       -|      -|
|Instance         |        4|      -|    1132|   1440|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|    734|
|Register         |        -|      -|     166|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        4|      0|    1298|   2297|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        1|      0|       1|      4|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    +-------------------------------+-----------------------------+---------+-------+-----+-----+
    |            Instance           |            Module           | BRAM_18K| DSP48E|  FF | LUT |
    +-------------------------------+-----------------------------+---------+-------+-----+-----+
    |AXI_UART_DRIVER_CTRL_s_axi_U   |AXI_UART_DRIVER_CTRL_s_axi   |        0|      0|   36|   40|
    |AXI_UART_DRIVER_OUT_r_m_axi_U  |AXI_UART_DRIVER_OUT_r_m_axi  |        2|      0|  548|  700|
    |AXI_UART_DRIVER_UART_m_axi_U   |AXI_UART_DRIVER_UART_m_axi   |        2|      0|  548|  700|
    +-------------------------------+-----------------------------+---------+-------+-----+-----+
    |Total                          |                             |        4|      0| 1132| 1440|
    +-------------------------------+-----------------------------+---------+-------+-----+-----+

    * DSP48: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    +--------------------------------------+----------+-------+---+----+------------+------------+
    |             Variable Name            | Operation| DSP48E| FF| LUT| Bitwidth P0| Bitwidth P1|
    +--------------------------------------+----------+-------+---+----+------------+------------+
    |NUM_BYTES_READ_1_fu_520_p2            |     +    |      0|  0|  15|           1|           5|
    |ctr_V_fu_440_p2                       |     +    |      0|  0|  25|          18|           1|
    |ap_block_state1_io                    |    and   |      0|  0|   2|           1|           1|
    |ap_block_state22_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state28                      |    and   |      0|  0|   2|           1|           1|
    |ap_block_state37_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state67_io                   |    and   |      0|  0|   2|           1|           1|
    |ap_block_state80                      |    and   |      0|  0|   2|           1|           1|
    |ap_block_state87                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_220                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_947                      |    and   |      0|  0|   2|           1|           1|
    |ap_condition_954                      |    and   |      0|  0|   2|           1|           1|
    |ap_predicate_op170_writeresp_state28  |    and   |      0|  0|   2|           1|           1|
    |ap_predicate_op234_readreq_state60    |    and   |      0|  0|   2|           1|           1|
    |ap_predicate_op277_writeresp_state87  |    and   |      0|  0|   2|           1|           1|
    |tmp_5_fu_476_p2                       |   icmp   |      0|  0|  11|           8|           4|
    |tmp_6_fu_434_p2                       |   icmp   |      0|  0|  18|          18|          17|
    |tmp_8_fu_489_p2                       |   icmp   |      0|  0|  11|           5|           4|
    |tmp_fu_413_p2                         |   icmp   |      0|  0|  11|           8|           7|
    |ap_block_state2_io                    |    or    |      0|  0|   2|           1|           1|
    |ap_block_state60_io                   |    or    |      0|  0|   2|           1|           1|
    |ap_predicate_op237_writereq_state60   |    or    |      0|  0|   2|           1|           1|
    +--------------------------------------+----------+-------+---+----+------------+------------+
    |Total                                 |          |      0|  0| 123|          74|          54|
    +--------------------------------------+----------+-------+---+----+------------+------------+

    * Multiplexer: 
    +------------------------------+-----+-----------+-----+-----------+
    |             Name             | LUT | Input Size| Bits| Total Bits|
    +------------------------------+-----+-----------+-----+-----------+
    |NUM_BYTES_READ_2_reg_350      |    9|          2|    5|         10|
    |NUM_BYTES_READ_fu_122         |    9|          2|    5|         10|
    |OUT_r_AWADDR                  |   21|          4|   32|        128|
    |OUT_r_AWLEN                   |   15|          3|   32|         96|
    |OUT_r_WDATA                   |   27|          5|    8|         40|
    |OUT_r_blk_n_AR                |    9|          2|    1|          2|
    |OUT_r_blk_n_AW                |    9|          2|    1|          2|
    |OUT_r_blk_n_B                 |    9|          2|    1|          2|
    |OUT_r_blk_n_R                 |    9|          2|    1|          2|
    |OUT_r_blk_n_W                 |    9|          2|    1|          2|
    |UART_ARADDR                   |   33|          6|   32|        192|
    |UART_AWADDR                   |   44|          9|   32|        288|
    |UART_WDATA                    |   38|          7|   32|        224|
    |UART_blk_n_AR                 |    9|          2|    1|          2|
    |UART_blk_n_AW                 |    9|          2|    1|          2|
    |UART_blk_n_B                  |    9|          2|    1|          2|
    |UART_blk_n_R                  |    9|          2|    1|          2|
    |UART_blk_n_W                  |    9|          2|    1|          2|
    |ap_NS_fsm                     |  385|         88|    1|         88|
    |ap_sig_ioackin_OUT_r_ARREADY  |    9|          2|    1|          2|
    |ap_sig_ioackin_OUT_r_AWREADY  |    9|          2|    1|          2|
    |ap_sig_ioackin_OUT_r_WREADY   |    9|          2|    1|          2|
    |ap_sig_ioackin_UART_ARREADY   |    9|          2|    1|          2|
    |ap_sig_ioackin_UART_AWREADY   |    9|          2|    1|          2|
    |ap_sig_ioackin_UART_WREADY    |    9|          2|    1|          2|
    |p_014_0_i_reg_339             |    9|          2|   18|         36|
    +------------------------------+-----+-----------+-----+-----------+
    |Total                         |  734|        160|  213|       1144|
    +------------------------------+-----+-----------+-----+-----------+

    * Register: 
    +------------------------------+----+----+-----+-----------+
    |             Name             | FF | LUT| Bits| Const Bits|
    +------------------------------+----+----+-----+-----------+
    |NUM_BYTES_READ_2_reg_350      |   5|   0|    5|          0|
    |NUM_BYTES_READ_fu_122         |   5|   0|    5|          0|
    |NUM_BYTES_READ_load_reg_631   |   5|   0|    5|          0|
    |OUT_addr_read_reg_615         |   8|   0|    8|          0|
    |ap_CS_fsm                     |  87|   0|   87|          0|
    |ap_reg_ioackin_OUT_r_ARREADY  |   1|   0|    1|          0|
    |ap_reg_ioackin_OUT_r_AWREADY  |   1|   0|    1|          0|
    |ap_reg_ioackin_OUT_r_WREADY   |   1|   0|    1|          0|
    |ap_reg_ioackin_UART_ARREADY   |   1|   0|    1|          0|
    |ap_reg_ioackin_UART_AWREADY   |   1|   0|    1|          0|
    |ap_reg_ioackin_UART_WREADY    |   1|   0|    1|          0|
    |calibrationSuccess            |   1|   0|    1|          0|
    |calibrationSuccess_l_reg_582  |   1|   0|    1|          0|
    |firstSample                   |   1|   0|    1|          0|
    |firstSample_load_reg_541      |   1|   0|    1|          0|
    |p_014_0_i_reg_339             |  18|   0|   18|          0|
    |temp_reg_573                  |   8|   0|    8|          0|
    |tmp_2_reg_600                 |   1|   0|    1|          0|
    |tmp_3_reg_604                 |   8|   0|    8|          0|
    |tmp_4_reg_648                 |   1|   0|    1|          0|
    |tmp_5_reg_620                 |   1|   0|    1|          0|
    |tmp_7_reg_652                 |   8|   0|    8|          0|
    |tmp_reg_578                   |   1|   0|    1|          0|
    +------------------------------+----+----+-----+-----------+
    |Total                         | 166|   0|  166|          0|
    +------------------------------+----+----+-----+-----------+



================================================================
== Interface
================================================================
* Summary: 
+----------------------+-----+-----+------------+-----------------+--------------+
|       RTL Ports      | Dir | Bits|  Protocol  |  Source Object  |    C Type    |
+----------------------+-----+-----+------------+-----------------+--------------+
|s_axi_CTRL_AWVALID    |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_AWREADY    | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_AWADDR     |  in |    4|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WVALID     |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WREADY     | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WDATA      |  in |   32|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_WSTRB      |  in |    4|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_ARVALID    |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_ARREADY    | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_ARADDR     |  in |    4|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RVALID     | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RREADY     |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RDATA      | out |   32|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_RRESP      | out |    2|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_BVALID     | out |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_BREADY     |  in |    1|    s_axi   |       CTRL      |  return void |
|s_axi_CTRL_BRESP      | out |    2|    s_axi   |       CTRL      |  return void |
|ap_clk                |  in |    1| ap_ctrl_hs | AXI_UART_DRIVER | return value |
|ap_rst_n              |  in |    1| ap_ctrl_hs | AXI_UART_DRIVER | return value |
|interrupt             | out |    1| ap_ctrl_hs | AXI_UART_DRIVER | return value |
|m_axi_UART_AWVALID    | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWREADY    |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWADDR     | out |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWID       | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWLEN      | out |    8|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWSIZE     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWBURST    | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWLOCK     | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWCACHE    | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWPROT     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWQOS      | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWREGION   | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_AWUSER     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WVALID     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WREADY     |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WDATA      | out |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WSTRB      | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WLAST      | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WID        | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_WUSER      | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARVALID    | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARREADY    |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARADDR     | out |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARID       | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARLEN      | out |    8|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARSIZE     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARBURST    | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARLOCK     | out |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARCACHE    | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARPROT     | out |    3|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARQOS      | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARREGION   | out |    4|    m_axi   |       UART      |    pointer   |
|m_axi_UART_ARUSER     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RVALID     |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RREADY     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RDATA      |  in |   32|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RLAST      |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RID        |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RUSER      |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_RRESP      |  in |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BVALID     |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BREADY     | out |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BRESP      |  in |    2|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BID        |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_UART_BUSER      |  in |    1|    m_axi   |       UART      |    pointer   |
|m_axi_OUT_r_AWVALID   | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWREADY   |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWADDR    | out |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWID      | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWLEN     | out |    8|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWSIZE    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWBURST   | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWLOCK    | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWCACHE   | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWPROT    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWQOS     | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWREGION  | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_AWUSER    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WVALID    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WREADY    |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WDATA     | out |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WSTRB     | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WLAST     | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WID       | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_WUSER     | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARVALID   | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARREADY   |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARADDR    | out |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARID      | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARLEN     | out |    8|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARSIZE    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARBURST   | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARLOCK    | out |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARCACHE   | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARPROT    | out |    3|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARQOS     | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARREGION  | out |    4|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_ARUSER    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RVALID    |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RREADY    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RDATA     |  in |   32|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RLAST     |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RID       |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RUSER     |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_RRESP     |  in |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BVALID    |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BREADY    | out |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BRESP     |  in |    2|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BID       |  in |    1|    m_axi   |      OUT_r      |    pointer   |
|m_axi_OUT_r_BUSER     |  in |    1|    m_axi   |      OUT_r      |    pointer   |
+----------------------+-----+-----+------------+-----------------+--------------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 2
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 87
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (firstSample_load)
	28  / (!firstSample_load)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / (tmp)
	28  / (!tmp)
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	30  / (calibrationSuccess_l)
	29  / (!calibrationSuccess_l)
29 --> 
	29  / (!tmp_6)
	87  / (tmp_6)
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / (tmp_2)
	87  / (!tmp_2)
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / (tmp_5 & tmp_8)
	81  / (!tmp_5) | (!tmp_8)
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / (tmp_4)
	80  / (!tmp_4)
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	60  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 8.75>
ST_1 : Operation 88 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %UART), !map !37"   --->   Operation 88 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 89 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %OUT_r), !map !43"   --->   Operation 89 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 90 [1/1] (0.00ns)   --->   "%dummy = alloca i8, align 1"   --->   Operation 90 'alloca' 'dummy' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 91 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([16 x i8]* @AXI_UART_DRIVER_str) nounwind"   --->   Operation 91 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 92 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 0, [5 x i8]* @p_str2, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:11]   --->   Operation 92 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 93 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %UART, [6 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 4096, [5 x i8]* @p_str4, [4 x i8]* @p_str5, [1 x i8]* @p_str, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str, [1 x i8]* @p_str)"   --->   Operation 93 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 94 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %OUT_r, [6 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str, i32 0, i32 4096, [4 x i8]* @p_str6, [4 x i8]* @p_str5, [1 x i8]* @p_str, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str, [1 x i8]* @p_str)"   --->   Operation 94 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 95 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecReset(i1* @firstSample, i32 1, [1 x i8]* @p_str) nounwind" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:30]   --->   Operation 95 'specreset' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 96 [1/1] (0.00ns)   --->   "%firstSample_load = load i1* @firstSample, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:33]   --->   Operation 96 'load' 'firstSample_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 97 [1/1] (0.00ns)   --->   "br i1 %firstSample_load, label %1, label %._crit_edge" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:33]   --->   Operation 97 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 98 [1/1] (0.00ns)   --->   "%UART_addr = getelementptr i32* %UART, i64 1031"   --->   Operation 98 'getelementptr' 'UART_addr' <Predicate = (firstSample_load)> <Delay = 0.00>
ST_1 : Operation 99 [1/1] (8.75ns)   --->   "%UART_addr_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 99 'writereq' 'UART_addr_req' <Predicate = (firstSample_load)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 2 <SV = 1> <Delay = 8.75>
ST_2 : Operation 100 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr, i32 69, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 100 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%UART_addr_1 = getelementptr i32* %UART, i64 1027"   --->   Operation 101 'getelementptr' 'UART_addr_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (8.75ns)   --->   "%UART_addr_1_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_1, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 102 'writereq' 'UART_addr_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 8.75>
ST_3 : Operation 103 [5/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 103 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 104 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_1, i32 128, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 104 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 105 [1/1] (0.00ns)   --->   "%UART_addr_2 = getelementptr i32* %UART, i64 1024"   --->   Operation 105 'getelementptr' 'UART_addr_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 106 [1/1] (8.75ns)   --->   "%UART_addr_2_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_2, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 106 'writereq' 'UART_addr_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 8.75>
ST_4 : Operation 107 [4/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 107 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 108 [5/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 108 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 109 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_2, i32 62, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 109 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 110 [1/1] (0.00ns)   --->   "%UART_addr_3 = getelementptr i32* %UART, i64 1025"   --->   Operation 110 'getelementptr' 'UART_addr_3' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 111 [1/1] (8.75ns)   --->   "%UART_addr_3_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_3, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 111 'writereq' 'UART_addr_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 8.75>
ST_5 : Operation 112 [3/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 112 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 113 [4/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 113 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 114 [5/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 114 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 115 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_3, i32 0, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 115 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 116 [1/1] (8.75ns)   --->   "%UART_addr_1_req6 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_1, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 116 'writereq' 'UART_addr_1_req6' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 8.75>
ST_6 : Operation 117 [2/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 117 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 118 [3/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 118 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 119 [4/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 119 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 120 [5/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 120 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 121 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_1, i32 31, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 121 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 122 [1/1] (0.00ns)   --->   "%UART_addr_4 = getelementptr i32* %UART, i64 1026"   --->   Operation 122 'getelementptr' 'UART_addr_4' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 123 [1/1] (8.75ns)   --->   "%UART_addr_4_req = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_4, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 123 'writereq' 'UART_addr_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 124 [1/5] (8.75ns)   --->   "%UART_addr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:38]   --->   Operation 124 'writeresp' 'UART_addr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 125 [2/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 125 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 126 [3/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 126 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 127 [4/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 127 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 128 [5/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 128 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 129 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_4, i32 1, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 129 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 130 [1/1] (8.75ns)   --->   "%UART_addr_3_req8 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr_3, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 130 'writereq' 'UART_addr_3_req8' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 8.75>
ST_8 : Operation 131 [1/5] (8.75ns)   --->   "%UART_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:41]   --->   Operation 131 'writeresp' 'UART_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 132 [2/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 132 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 133 [3/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 133 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 134 [4/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 134 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 135 [5/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 135 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 136 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr_3, i32 1, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 136 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 8.75>
ST_9 : Operation 137 [1/5] (8.75ns)   --->   "%UART_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:45]   --->   Operation 137 'writeresp' 'UART_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 138 [2/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 138 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 139 [3/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 139 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 140 [4/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 140 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 141 [5/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 141 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 8.75>
ST_10 : Operation 142 [1/5] (8.75ns)   --->   "%UART_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:49]   --->   Operation 142 'writeresp' 'UART_addr_3_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 143 [2/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 143 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 144 [3/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 144 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 145 [4/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 145 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 8.75>
ST_11 : Operation 146 [1/5] (8.75ns)   --->   "%UART_addr_1_resp7 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:52]   --->   Operation 146 'writeresp' 'UART_addr_1_resp7' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 147 [2/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 147 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 148 [3/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 148 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 11> <Delay = 8.75>
ST_12 : Operation 149 [1/5] (8.75ns)   --->   "%UART_addr_4_resp = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_4)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:55]   --->   Operation 149 'writeresp' 'UART_addr_4_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 150 [2/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 150 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 12> <Delay = 8.75>
ST_13 : Operation 151 [1/5] (8.75ns)   --->   "%UART_addr_3_resp9 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr_3)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:61]   --->   Operation 151 'writeresp' 'UART_addr_3_resp9' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 13> <Delay = 8.75>
ST_14 : Operation 152 [7/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 152 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 15 <SV = 14> <Delay = 8.75>
ST_15 : Operation 153 [6/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 153 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 16 <SV = 15> <Delay = 8.75>
ST_16 : Operation 154 [5/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 154 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 17 <SV = 16> <Delay = 8.75>
ST_17 : Operation 155 [4/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 155 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 18 <SV = 17> <Delay = 8.75>
ST_18 : Operation 156 [3/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 156 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 19 <SV = 18> <Delay = 8.75>
ST_19 : Operation 157 [2/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 157 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 20 <SV = 19> <Delay = 8.75>
ST_20 : Operation 158 [1/7] (8.75ns)   --->   "%UART_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 158 'readreq' 'UART_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 21 <SV = 20> <Delay = 8.75>
ST_21 : Operation 159 [1/1] (8.75ns)   --->   "%UART_addr_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 159 'read' 'UART_addr_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 160 [1/1] (0.00ns)   --->   "%temp = trunc i32 %UART_addr_read to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:65]   --->   Operation 160 'trunc' 'temp' <Predicate = true> <Delay = 0.00>

State 22 <SV = 21> <Delay = 8.75>
ST_22 : Operation 161 [1/1] (1.55ns)   --->   "%tmp = icmp eq i8 %temp, 69" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:66]   --->   Operation 161 'icmp' 'tmp' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_22 : Operation 162 [1/1] (0.00ns)   --->   "br i1 %tmp, label %2, label %._crit_edge1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:66]   --->   Operation 162 'br' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 163 [1/1] (0.00ns)   --->   "store i1 true, i1* @calibrationSuccess, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:68]   --->   Operation 163 'store' <Predicate = (tmp)> <Delay = 0.00>
ST_22 : Operation 164 [1/1] (8.75ns)   --->   "%UART_addr_req4 = call i1 @_ssdm_op_WriteReq.m_axi.i32P(i32* %UART_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 164 'writereq' 'UART_addr_req4' <Predicate = (tmp)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 23 <SV = 22> <Delay = 8.75>
ST_23 : Operation 165 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i32P(i32* %UART_addr, i32 0, i4 -1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 165 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 24 <SV = 23> <Delay = 8.75>
ST_24 : Operation 166 [5/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 166 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 25 <SV = 24> <Delay = 8.75>
ST_25 : Operation 167 [4/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 167 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 26 <SV = 25> <Delay = 8.75>
ST_26 : Operation 168 [3/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 168 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 27 <SV = 26> <Delay = 8.75>
ST_27 : Operation 169 [2/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 169 'writeresp' 'UART_addr_resp5' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 28 <SV = 27> <Delay = 8.75>
ST_28 : Operation 170 [1/5] (8.75ns)   --->   "%UART_addr_resp5 = call i1 @_ssdm_op_WriteResp.m_axi.i32P(i32* %UART_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:69]   --->   Operation 170 'writeresp' 'UART_addr_resp5' <Predicate = (firstSample_load & tmp)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_28 : Operation 171 [1/1] (0.00ns)   --->   "br label %._crit_edge1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:70]   --->   Operation 171 'br' <Predicate = (firstSample_load & tmp)> <Delay = 0.00>
ST_28 : Operation 172 [1/1] (0.00ns)   --->   "store i1 false, i1* @firstSample, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:73]   --->   Operation 172 'store' <Predicate = (firstSample_load)> <Delay = 0.00>
ST_28 : Operation 173 [1/1] (0.00ns)   --->   "br label %._crit_edge" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:74]   --->   Operation 173 'br' <Predicate = (firstSample_load)> <Delay = 0.00>
ST_28 : Operation 174 [1/1] (0.00ns)   --->   "%calibrationSuccess_l = load i1* @calibrationSuccess, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 174 'load' 'calibrationSuccess_l' <Predicate = true> <Delay = 0.00>
ST_28 : Operation 175 [1/1] (0.00ns)   --->   "br i1 %calibrationSuccess_l, label %3, label %7" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:78]   --->   Operation 175 'br' <Predicate = true> <Delay = 0.00>
ST_28 : Operation 176 [1/1] (0.00ns)   --->   "%rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([42 x i8]* @delay_until_ms_MD_2u) nounwind"   --->   Operation 176 'specregionbegin' 'rbegin' <Predicate = (!calibrationSuccess_l)> <Delay = 0.00>
ST_28 : Operation 177 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecProtocol(i32 0, [1 x i8]* @p_str) nounwind" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:43->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 177 'specprotocol' <Predicate = (!calibrationSuccess_l)> <Delay = 0.00>
ST_28 : Operation 178 [1/1] (1.76ns)   --->   "br label %8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:47->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 178 'br' <Predicate = (!calibrationSuccess_l)> <Delay = 1.76>

State 29 <SV = 28> <Delay = 2.43>
ST_29 : Operation 179 [1/1] (0.00ns)   --->   "%p_014_0_i = phi i18 [ 0, %7 ], [ %ctr_V, %9 ]"   --->   Operation 179 'phi' 'p_014_0_i' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 180 [1/1] (2.43ns)   --->   "%tmp_6 = icmp eq i18 %p_014_0_i, -62144" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:47->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 180 'icmp' 'tmp_6' <Predicate = true> <Delay = 2.43> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 181 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 200000, i64 200000, i64 200000) nounwind"   --->   Operation 181 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 182 [1/1] (2.13ns)   --->   "%ctr_V = add i18 %p_014_0_i, 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:47->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 182 'add' 'ctr_V' <Predicate = true> <Delay = 2.13> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.13> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_29 : Operation 183 [1/1] (0.00ns)   --->   "br i1 %tmp_6, label %"delay_until_ms<2ull, 100000000ull>.exit", label %9" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:47->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 183 'br' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 184 [1/1] (0.00ns)   --->   "%dummy_1 = load volatile i8* %dummy, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:48->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 184 'load' 'dummy_1' <Predicate = (!tmp_6)> <Delay = 0.00>
ST_29 : Operation 185 [1/1] (0.00ns)   --->   "store volatile i8 %dummy_1, i8* %dummy, align 1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:48->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 185 'store' <Predicate = (!tmp_6)> <Delay = 0.00>
ST_29 : Operation 186 [1/1] (0.00ns)   --->   "br label %8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.h:47->SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:174]   --->   Operation 186 'br' <Predicate = (!tmp_6)> <Delay = 0.00>
ST_29 : Operation 187 [1/1] (0.00ns)   --->   "%rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([42 x i8]* @delay_until_ms_MD_2u, i32 %rbegin) nounwind"   --->   Operation 187 'specregionend' 'rend' <Predicate = (tmp_6)> <Delay = 0.00>
ST_29 : Operation 188 [1/1] (0.00ns)   --->   "br label %10"   --->   Operation 188 'br' <Predicate = (tmp_6)> <Delay = 0.00>

State 30 <SV = 28> <Delay = 8.75>
ST_30 : Operation 189 [1/1] (0.00ns)   --->   "%UART_addr_5 = getelementptr i32* %UART, i64 1029"   --->   Operation 189 'getelementptr' 'UART_addr_5' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 190 [7/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 190 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 31 <SV = 29> <Delay = 8.75>
ST_31 : Operation 191 [6/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 191 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 32 <SV = 30> <Delay = 8.75>
ST_32 : Operation 192 [5/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 192 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 33 <SV = 31> <Delay = 8.75>
ST_33 : Operation 193 [4/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 193 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 34 <SV = 32> <Delay = 8.75>
ST_34 : Operation 194 [3/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 194 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 35 <SV = 33> <Delay = 8.75>
ST_35 : Operation 195 [2/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 195 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 36 <SV = 34> <Delay = 8.75>
ST_36 : Operation 196 [1/7] (8.75ns)   --->   "%UART_load_1_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 196 'readreq' 'UART_load_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 37 <SV = 35> <Delay = 8.75>
ST_37 : Operation 197 [1/1] (8.75ns)   --->   "%UART_addr_5_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_5)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 197 'read' 'UART_addr_5_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_37 : Operation 198 [1/1] (0.00ns)   --->   "%tmp_2 = trunc i32 %UART_addr_5_read to i1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:143]   --->   Operation 198 'trunc' 'tmp_2' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 199 [1/1] (0.00ns)   --->   "br i1 %tmp_2, label %4, label %._crit_edge2" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:144]   --->   Operation 199 'br' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 200 [1/1] (0.00ns)   --->   "%UART_addr_6 = getelementptr i32* %UART, i64 1024"   --->   Operation 200 'getelementptr' 'UART_addr_6' <Predicate = (tmp_2)> <Delay = 0.00>
ST_37 : Operation 201 [7/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 201 'readreq' 'UART_load_2_req' <Predicate = (tmp_2)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 38 <SV = 36> <Delay = 8.75>
ST_38 : Operation 202 [6/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 202 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 39 <SV = 37> <Delay = 8.75>
ST_39 : Operation 203 [5/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 203 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 40 <SV = 38> <Delay = 8.75>
ST_40 : Operation 204 [4/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 204 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 41 <SV = 39> <Delay = 8.75>
ST_41 : Operation 205 [3/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 205 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 42 <SV = 40> <Delay = 8.75>
ST_42 : Operation 206 [2/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 206 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 43 <SV = 41> <Delay = 8.75>
ST_43 : Operation 207 [1/7] (8.75ns)   --->   "%UART_load_2_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 207 'readreq' 'UART_load_2_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 44 <SV = 42> <Delay = 8.75>
ST_44 : Operation 208 [1/1] (8.75ns)   --->   "%UART_addr_6_read = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_6)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 208 'read' 'UART_addr_6_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_44 : Operation 209 [1/1] (0.00ns)   --->   "%tmp_3 = trunc i32 %UART_addr_6_read to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 209 'trunc' 'tmp_3' <Predicate = true> <Delay = 0.00>
ST_44 : Operation 210 [1/1] (8.75ns)   --->   "%OUT_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %OUT_r, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 210 'writereq' 'OUT_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 45 <SV = 43> <Delay = 8.75>
ST_45 : Operation 211 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_r, i8 %tmp_3, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 211 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 46 <SV = 44> <Delay = 8.75>
ST_46 : Operation 212 [5/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 212 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 47 <SV = 45> <Delay = 8.75>
ST_47 : Operation 213 [4/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 213 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 48 <SV = 46> <Delay = 8.75>
ST_48 : Operation 214 [3/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 214 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 49 <SV = 47> <Delay = 8.75>
ST_49 : Operation 215 [2/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 215 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 50 <SV = 48> <Delay = 8.75>
ST_50 : Operation 216 [1/5] (8.75ns)   --->   "%OUT_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_r)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:146]   --->   Operation 216 'writeresp' 'OUT_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 51 <SV = 49> <Delay = 8.75>
ST_51 : Operation 217 [1/1] (0.00ns)   --->   "%OUT_addr = getelementptr i8* %OUT_r, i64 1"   --->   Operation 217 'getelementptr' 'OUT_addr' <Predicate = true> <Delay = 0.00>
ST_51 : Operation 218 [7/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 218 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 52 <SV = 50> <Delay = 8.75>
ST_52 : Operation 219 [6/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 219 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 53 <SV = 51> <Delay = 8.75>
ST_53 : Operation 220 [5/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 220 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 54 <SV = 52> <Delay = 8.75>
ST_54 : Operation 221 [4/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 221 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 55 <SV = 53> <Delay = 8.75>
ST_55 : Operation 222 [3/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 222 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 56 <SV = 54> <Delay = 8.75>
ST_56 : Operation 223 [2/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 223 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 57 <SV = 55> <Delay = 8.75>
ST_57 : Operation 224 [1/7] (8.75ns)   --->   "%OUT_load_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %OUT_addr, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 224 'readreq' 'OUT_load_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 58 <SV = 56> <Delay = 8.75>
ST_58 : Operation 225 [1/1] (8.75ns)   --->   "%OUT_addr_read = call i8 @_ssdm_op_Read.m_axi.i8P(i8* %OUT_addr)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 225 'read' 'OUT_addr_read' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 59 <SV = 57> <Delay = 3.32>
ST_59 : Operation 226 [1/1] (1.55ns)   --->   "%tmp_5 = icmp eq i8 %OUT_addr_read, 15" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 226 'icmp' 'tmp_5' <Predicate = true> <Delay = 1.55> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_59 : Operation 227 [1/1] (1.76ns)   --->   "br i1 %tmp_5, label %.preheader.preheader, label %.loopexit" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:150]   --->   Operation 227 'br' <Predicate = true> <Delay = 1.76>
ST_59 : Operation 228 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ = alloca i5"   --->   Operation 228 'alloca' 'NUM_BYTES_READ' <Predicate = (tmp_5)> <Delay = 0.00>
ST_59 : Operation 229 [1/1] (1.76ns)   --->   "store i5 1, i5* %NUM_BYTES_READ"   --->   Operation 229 'store' <Predicate = (tmp_5)> <Delay = 1.76>
ST_59 : Operation 230 [1/1] (0.00ns)   --->   "br label %.preheader" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:152]   --->   Operation 230 'br' <Predicate = (tmp_5)> <Delay = 0.00>

State 60 <SV = 58> <Delay = 8.75>
ST_60 : Operation 231 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ_load = load i5* %NUM_BYTES_READ" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:159]   --->   Operation 231 'load' 'NUM_BYTES_READ_load' <Predicate = (tmp_5)> <Delay = 0.00>
ST_60 : Operation 232 [1/1] (1.36ns)   --->   "%tmp_8 = icmp ult i5 %NUM_BYTES_READ_load, -7" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:152]   --->   Operation 232 'icmp' 'tmp_8' <Predicate = (tmp_5)> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_60 : Operation 233 [1/1] (0.00ns)   --->   "br i1 %tmp_8, label %5, label %.loopexit.loopexit" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:152]   --->   Operation 233 'br' <Predicate = (tmp_5)> <Delay = 0.00>
ST_60 : Operation 234 [7/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 234 'readreq' 'UART_load_3_req' <Predicate = (tmp_5 & tmp_8)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_60 : Operation 235 [1/1] (1.76ns)   --->   "br label %.loopexit"   --->   Operation 235 'br' <Predicate = (tmp_5 & !tmp_8)> <Delay = 1.76>
ST_60 : Operation 236 [1/1] (0.00ns)   --->   "%OUT_addr_2 = getelementptr i8* %OUT_r, i64 26"   --->   Operation 236 'getelementptr' 'OUT_addr_2' <Predicate = (!tmp_5) | (!tmp_8)> <Delay = 0.00>
ST_60 : Operation 237 [1/1] (8.75ns)   --->   "%OUT_addr_2_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %OUT_addr_2, i32 2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:165]   --->   Operation 237 'writereq' 'OUT_addr_2_req' <Predicate = (!tmp_5) | (!tmp_8)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 61 <SV = 59> <Delay = 8.75>
ST_61 : Operation 238 [6/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 238 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 62 <SV = 60> <Delay = 8.75>
ST_62 : Operation 239 [5/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 239 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 63 <SV = 61> <Delay = 8.75>
ST_63 : Operation 240 [4/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 240 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 64 <SV = 62> <Delay = 8.75>
ST_64 : Operation 241 [3/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 241 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 65 <SV = 63> <Delay = 8.75>
ST_65 : Operation 242 [2/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 242 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 66 <SV = 64> <Delay = 8.75>
ST_66 : Operation 243 [1/7] (8.75ns)   --->   "%UART_load_3_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_5, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 243 'readreq' 'UART_load_3_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 67 <SV = 65> <Delay = 8.75>
ST_67 : Operation 244 [1/1] (8.75ns)   --->   "%UART_addr_5_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_5)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 244 'read' 'UART_addr_5_read_1' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_67 : Operation 245 [1/1] (0.00ns)   --->   "%tmp_4 = trunc i32 %UART_addr_5_read_1 to i1" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:155]   --->   Operation 245 'trunc' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_67 : Operation 246 [1/1] (0.00ns)   --->   "br i1 %tmp_4, label %6, label %.preheader.backedge" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:156]   --->   Operation 246 'br' <Predicate = true> <Delay = 0.00>
ST_67 : Operation 247 [7/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 247 'readreq' 'UART_load_4_req' <Predicate = (tmp_4)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 68 <SV = 66> <Delay = 8.75>
ST_68 : Operation 248 [6/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 248 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 69 <SV = 67> <Delay = 8.75>
ST_69 : Operation 249 [5/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 249 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 70 <SV = 68> <Delay = 8.75>
ST_70 : Operation 250 [4/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 250 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 71 <SV = 69> <Delay = 8.75>
ST_71 : Operation 251 [3/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 251 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 72 <SV = 70> <Delay = 8.75>
ST_72 : Operation 252 [2/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 252 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 73 <SV = 71> <Delay = 8.75>
ST_73 : Operation 253 [1/7] (8.75ns)   --->   "%UART_load_4_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %UART_addr_6, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 253 'readreq' 'UART_load_4_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 74 <SV = 72> <Delay = 8.75>
ST_74 : Operation 254 [1/1] (8.75ns)   --->   "%UART_addr_6_read_1 = call i32 @_ssdm_op_Read.m_axi.volatile.i32P(i32* %UART_addr_6)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 254 'read' 'UART_addr_6_read_1' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_74 : Operation 255 [1/1] (0.00ns)   --->   "%tmp_7 = trunc i32 %UART_addr_6_read_1 to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 255 'trunc' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_74 : Operation 256 [1/1] (0.00ns)   --->   "%tmp_9 = zext i5 %NUM_BYTES_READ_load to i64" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 256 'zext' 'tmp_9' <Predicate = true> <Delay = 0.00>
ST_74 : Operation 257 [1/1] (0.00ns)   --->   "%OUT_addr_1 = getelementptr i8* %OUT_r, i64 %tmp_9" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 257 'getelementptr' 'OUT_addr_1' <Predicate = true> <Delay = 0.00>
ST_74 : Operation 258 [1/1] (8.75ns)   --->   "%OUT_addr_1_req = call i1 @_ssdm_op_WriteReq.m_axi.i8P(i8* %OUT_addr_1, i32 1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 258 'writereq' 'OUT_addr_1_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_74 : Operation 259 [1/1] (1.78ns)   --->   "%NUM_BYTES_READ_1 = add i5 1, %NUM_BYTES_READ_load" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:159]   --->   Operation 259 'add' 'NUM_BYTES_READ_1' <Predicate = true> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.13> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_74 : Operation 260 [1/1] (1.76ns)   --->   "store i5 %NUM_BYTES_READ_1, i5* %NUM_BYTES_READ" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:159]   --->   Operation 260 'store' <Predicate = true> <Delay = 1.76>

State 75 <SV = 73> <Delay = 8.75>
ST_75 : Operation 261 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_addr_1, i8 %tmp_7, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 261 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 76 <SV = 74> <Delay = 8.75>
ST_76 : Operation 262 [5/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 262 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 77 <SV = 75> <Delay = 8.75>
ST_77 : Operation 263 [4/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 263 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 78 <SV = 76> <Delay = 8.75>
ST_78 : Operation 264 [3/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 264 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 79 <SV = 77> <Delay = 8.75>
ST_79 : Operation 265 [2/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 265 'writeresp' 'OUT_addr_1_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 80 <SV = 78> <Delay = 8.75>
ST_80 : Operation 266 [1/5] (8.75ns)   --->   "%OUT_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_1)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:158]   --->   Operation 266 'writeresp' 'OUT_addr_1_resp' <Predicate = (tmp_4)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_80 : Operation 267 [1/1] (0.00ns)   --->   "br label %.preheader.backedge" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:160]   --->   Operation 267 'br' <Predicate = (tmp_4)> <Delay = 0.00>
ST_80 : Operation 268 [1/1] (0.00ns)   --->   "br label %.preheader"   --->   Operation 268 'br' <Predicate = true> <Delay = 0.00>

State 81 <SV = 59> <Delay = 8.75>
ST_81 : Operation 269 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_addr_2, i8 69, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:165]   --->   Operation 269 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 82 <SV = 60> <Delay = 8.75>
ST_82 : Operation 270 [1/1] (0.00ns)   --->   "%NUM_BYTES_READ_2 = phi i5 [ 1, %4 ], [ %NUM_BYTES_READ_load, %.loopexit.loopexit ]" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:159]   --->   Operation 270 'phi' 'NUM_BYTES_READ_2' <Predicate = true> <Delay = 0.00>
ST_82 : Operation 271 [1/1] (0.00ns)   --->   "%tmp_s = zext i5 %NUM_BYTES_READ_2 to i8" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 271 'zext' 'tmp_s' <Predicate = true> <Delay = 0.00>
ST_82 : Operation 272 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i8P(i8* %OUT_addr_2, i8 %tmp_s, i1 true)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 272 'write' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 83 <SV = 61> <Delay = 8.75>
ST_83 : Operation 273 [5/5] (8.75ns)   --->   "%OUT_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 273 'writeresp' 'OUT_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 84 <SV = 62> <Delay = 8.75>
ST_84 : Operation 274 [4/5] (8.75ns)   --->   "%OUT_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 274 'writeresp' 'OUT_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 85 <SV = 63> <Delay = 8.75>
ST_85 : Operation 275 [3/5] (8.75ns)   --->   "%OUT_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 275 'writeresp' 'OUT_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 86 <SV = 64> <Delay = 8.75>
ST_86 : Operation 276 [2/5] (8.75ns)   --->   "%OUT_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 276 'writeresp' 'OUT_addr_2_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 87 <SV = 65> <Delay = 8.75>
ST_87 : Operation 277 [1/5] (8.75ns)   --->   "%OUT_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i8P(i8* %OUT_addr_2)" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:166]   --->   Operation 277 'writeresp' 'OUT_addr_2_resp' <Predicate = (calibrationSuccess_l & tmp_2)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_87 : Operation 278 [1/1] (0.00ns)   --->   "br label %._crit_edge2" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:167]   --->   Operation 278 'br' <Predicate = (calibrationSuccess_l & tmp_2)> <Delay = 0.00>
ST_87 : Operation 279 [1/1] (0.00ns)   --->   "br label %10" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:171]   --->   Operation 279 'br' <Predicate = (calibrationSuccess_l)> <Delay = 0.00>
ST_87 : Operation 280 [1/1] (0.00ns)   --->   "ret void" [SBUS_AXI_UART_Driver/AXI_UART_Driver.cpp:178]   --->   Operation 280 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Binding
============================================================
STG Binding: 
---------------- STG Properties BEGIN ----------------
- Is combinational: 0
- Is one-state seq: 0
- Is datapath-only: 0
- Is pipelined: 0
- Is top level: 1
Port [ Return ] is wired: 1; IO mode=ap_ctrl_hs:ce=0
Port [ UART]:  wired=1; compound=1; hidden=0; nouse=0; global=0; static=0; extern=0; dir=2; type=4; pingpong=0; private_global=0; IO mode=m_axi:ce=0
Port [ OUT_r]:  wired=1; compound=1; hidden=0; nouse=0; global=0; static=0; extern=0; dir=2; type=4; pingpong=0; private_global=0; IO mode=m_axi:ce=0
Port [ firstSample]:  wired=0; compound=0; hidden=1; nouse=0; global=1; static=1; extern=0; dir=2; type=0; pingpong=0; private_global=1; linkage=7; visibility=0; IO mode=ap_ovld:ce=0
Port [ calibrationSuccess]:  wired=0; compound=0; hidden=1; nouse=0; global=1; static=1; extern=0; dir=2; type=0; pingpong=0; private_global=1; linkage=7; visibility=0; IO mode=ap_ovld:ce=0
---------------- STG Properties END ------------------

---------------- Datapath Model BEGIN ----------------

<LifeTime>
<method=bitvector/>
StgValue_88          (specbitsmap      ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_89          (specbitsmap      ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
dummy                (alloca           ) [ 0011111111111111111111111111110000000000000000000000000000000000000000000000000000000000]
StgValue_91          (spectopmodule    ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_92          (specinterface    ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_93          (specinterface    ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_94          (specinterface    ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_95          (specreset        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
firstSample_load     (load             ) [ 0111111111111111111111111111100000000000000000000000000000000000000000000000000000000000]
StgValue_97          (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr            (getelementptr    ) [ 0011111111111111111111111111100000000000000000000000000000000000000000000000000000000000]
UART_addr_req        (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_100         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1          (getelementptr    ) [ 0001111111110000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_req      (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_104         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_2          (getelementptr    ) [ 0000111111000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_2_req      (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_109         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3          (getelementptr    ) [ 0000011111111100000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_req      (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_115         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_req6     (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_121         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_4          (getelementptr    ) [ 0000000111111000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_4_req      (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_resp       (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_129         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_req8     (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_resp     (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_136         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_2_resp     (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_resp     (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_1_resp7    (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_4_resp     (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_3_resp9    (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_load_req        (readreq          ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_read       (read             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
temp                 (trunc            ) [ 0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000]
tmp                  (icmp             ) [ 0000000000000000000000111111100000000000000000000000000000000000000000000000000000000000]
StgValue_162         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_163         (store            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_req4       (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_165         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_resp5      (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_171         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_172         (store            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_173         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
calibrationSuccess_l (load             ) [ 0000000000000000000000000000111111111111111111111111111111111111111111111111111111111111]
StgValue_175         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
rbegin               (specregionbegin  ) [ 0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000]
StgValue_177         (specprotocol     ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_178         (br               ) [ 0000000000000000000000000000110000000000000000000000000000000000000000000000000000000000]
p_014_0_i            (phi              ) [ 0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000]
tmp_6                (icmp             ) [ 0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000]
empty                (speclooptripcount) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
ctr_V                (add              ) [ 0000000000000000000000000000110000000000000000000000000000000000000000000000000000000000]
StgValue_183         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
dummy_1              (load             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_185         (store            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_186         (br               ) [ 0000000000000000000000000000110000000000000000000000000000000000000000000000000000000000]
rend                 (specregionend    ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_188         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_5          (getelementptr    ) [ 0000000000000000000000000000000111111111111111111111111111111111111111111111111110000000]
UART_load_1_req      (readreq          ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_5_read     (read             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_2                (trunc            ) [ 0000000000000000000000000000000000000111111111111111111111111111111111111111111111111111]
StgValue_199         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_6          (getelementptr    ) [ 0000000000000000000000000000000000000011111111111111111111111111111111111111111110000000]
UART_load_2_req      (readreq          ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_6_read     (read             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_3                (trunc            ) [ 0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000]
OUT_req              (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_211         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_resp             (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr             (getelementptr    ) [ 0000000000000000000000000000000000000000000000000000111111100000000000000000000000000000]
OUT_load_req         (readreq          ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr_read        (read             ) [ 0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000]
tmp_5                (icmp             ) [ 0000000000000000000000000000000000000000000000000000000000011111111111111111111110000000]
StgValue_227         (br               ) [ 0000000000000000000000000000000000000000000000000000000000011111111111111111111111100000]
NUM_BYTES_READ       (alloca           ) [ 0000000000000000000000000000000000000000000000000000000000011111111111111111111110000000]
StgValue_229         (store            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_230         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_load  (load             ) [ 0000000000000000000000000000000000000000000000000000000000011111111111111111111111100000]
tmp_8                (icmp             ) [ 0000000000000000000000000000000000000000000000000000000000001111111111111111111110000000]
StgValue_233         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_235         (br               ) [ 0000000000000000000000000000000000000000000000000000000000011111111111111111111111100000]
OUT_addr_2           (getelementptr    ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000001111111]
OUT_addr_2_req       (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_load_3_req      (readreq          ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_5_read_1   (read             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_4                (trunc            ) [ 0000000000000000000000000000000000000000000000000000000000001111111111111111111110000000]
StgValue_246         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_load_4_req      (readreq          ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
UART_addr_6_read_1   (read             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
tmp_7                (trunc            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000]
tmp_9                (zext             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr_1           (getelementptr    ) [ 0000000000000000000000000000000000000000000000000000000000001111111100000001111110000000]
OUT_addr_1_req       (writereq         ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_1     (add              ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_260         (store            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_261         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr_1_resp      (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_267         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_268         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_269         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
NUM_BYTES_READ_2     (phi              ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000]
tmp_s                (zext             ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_272         (write            ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
OUT_addr_2_resp      (writeresp        ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_278         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_279         (br               ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
StgValue_280         (ret              ) [ 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
</LifeTime>

<model>

<comp_list>
<comp id="0" class="1000" name="UART">
<pin_list>
<pin id="1" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="UART"/></StgValue>
</bind>
</comp>

<comp id="2" class="1000" name="OUT_r">
<pin_list>
<pin id="3" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="OUT_r"/></StgValue>
</bind>
</comp>

<comp id="4" class="1000" name="firstSample">
<pin_list>
<pin id="5" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="firstSample"/></StgValue>
</bind>
</comp>

<comp id="6" class="1000" name="calibrationSuccess">
<pin_list>
<pin id="7" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="calibrationSuccess"/></StgValue>
</bind>
</comp>

<comp id="8" class="1001" name="const_8">
<pin_list>
<pin id="9" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecBitsMap"/></StgValue>
</bind>
</comp>

<comp id="10" class="1001" name="const_10">
<pin_list>
<pin id="11" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="12" class="1001" name="const_12">
<pin_list>
<pin id="13" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecTopModule"/></StgValue>
</bind>
</comp>

<comp id="14" class="1001" name="const_14">
<pin_list>
<pin id="15" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="AXI_UART_DRIVER_str"/></StgValue>
</bind>
</comp>

<comp id="16" class="1001" name="const_16">
<pin_list>
<pin id="17" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecInterface"/></StgValue>
</bind>
</comp>

<comp id="18" class="1001" name="const_18">
<pin_list>
<pin id="19" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="20" class="1001" name="const_20">
<pin_list>
<pin id="21" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str1"/></StgValue>
</bind>
</comp>

<comp id="22" class="1001" name="const_22">
<pin_list>
<pin id="23" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str"/></StgValue>
</bind>
</comp>

<comp id="24" class="1001" name="const_24">
<pin_list>
<pin id="25" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str2"/></StgValue>
</bind>
</comp>

<comp id="26" class="1001" name="const_26">
<pin_list>
<pin id="27" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str3"/></StgValue>
</bind>
</comp>

<comp id="28" class="1001" name="const_28">
<pin_list>
<pin id="29" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="30" class="1001" name="const_30">
<pin_list>
<pin id="31" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str4"/></StgValue>
</bind>
</comp>

<comp id="32" class="1001" name="const_32">
<pin_list>
<pin id="33" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str5"/></StgValue>
</bind>
</comp>

<comp id="34" class="1001" name="const_34">
<pin_list>
<pin id="35" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="36" class="1001" name="const_36">
<pin_list>
<pin id="37" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str6"/></StgValue>
</bind>
</comp>

<comp id="38" class="1001" name="const_38">
<pin_list>
<pin id="39" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecReset"/></StgValue>
</bind>
</comp>

<comp id="40" class="1001" name="const_40">
<pin_list>
<pin id="41" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="42" class="1001" name="const_42">
<pin_list>
<pin id="43" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="44" class="1001" name="const_44">
<pin_list>
<pin id="45" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteReq.m_axi.i32P"/></StgValue>
</bind>
</comp>

<comp id="46" class="1001" name="const_46">
<pin_list>
<pin id="47" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Write.m_axi.volatile.i32P"/></StgValue>
</bind>
</comp>

<comp id="48" class="1001" name="const_48">
<pin_list>
<pin id="49" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="50" class="1001" name="const_50">
<pin_list>
<pin id="51" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="52" class="1001" name="const_52">
<pin_list>
<pin id="53" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="54" class="1001" name="const_54">
<pin_list>
<pin id="55" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteResp.m_axi.i32P"/></StgValue>
</bind>
</comp>

<comp id="56" class="1001" name="const_56">
<pin_list>
<pin id="57" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="58" class="1001" name="const_58">
<pin_list>
<pin id="59" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="60" class="1001" name="const_60">
<pin_list>
<pin id="61" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="62" class="1001" name="const_62">
<pin_list>
<pin id="63" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="64" class="1001" name="const_64">
<pin_list>
<pin id="65" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="66" class="1001" name="const_66">
<pin_list>
<pin id="67" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="68" class="1001" name="const_68">
<pin_list>
<pin id="69" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_ReadReq.m_axi.i32P"/></StgValue>
</bind>
</comp>

<comp id="70" class="1001" name="const_70">
<pin_list>
<pin id="71" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Read.m_axi.volatile.i32P"/></StgValue>
</bind>
</comp>

<comp id="72" class="1001" name="const_72">
<pin_list>
<pin id="73" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="74" class="1001" name="const_74">
<pin_list>
<pin id="75" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="76" class="1001" name="const_76">
<pin_list>
<pin id="77" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="78" class="1001" name="const_78">
<pin_list>
<pin id="79" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecRegionBegin"/></StgValue>
</bind>
</comp>

<comp id="80" class="1001" name="const_80">
<pin_list>
<pin id="81" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="delay_until_ms_MD_2u"/></StgValue>
</bind>
</comp>

<comp id="82" class="1001" name="const_82">
<pin_list>
<pin id="83" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecProtocol"/></StgValue>
</bind>
</comp>

<comp id="84" class="1001" name="const_84">
<pin_list>
<pin id="85" dir="1" index="0" bw="1" slack="1"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="86" class="1001" name="const_86">
<pin_list>
<pin id="87" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="88" class="1001" name="const_88">
<pin_list>
<pin id="89" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecLoopTripCount"/></StgValue>
</bind>
</comp>

<comp id="90" class="1001" name="const_90">
<pin_list>
<pin id="91" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="92" class="1001" name="const_92">
<pin_list>
<pin id="93" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="94" class="1001" name="const_94">
<pin_list>
<pin id="95" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecRegionEnd"/></StgValue>
</bind>
</comp>

<comp id="96" class="1001" name="const_96">
<pin_list>
<pin id="97" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="98" class="1001" name="const_98">
<pin_list>
<pin id="99" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteReq.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="100" class="1001" name="const_100">
<pin_list>
<pin id="101" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Write.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="102" class="1001" name="const_102">
<pin_list>
<pin id="103" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_WriteResp.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="104" class="1001" name="const_104">
<pin_list>
<pin id="105" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_ReadReq.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="106" class="1001" name="const_106">
<pin_list>
<pin id="107" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Read.m_axi.i8P"/></StgValue>
</bind>
</comp>

<comp id="108" class="1001" name="const_108">
<pin_list>
<pin id="109" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="110" class="1001" name="const_110">
<pin_list>
<pin id="111" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="112" class="1001" name="const_112">
<pin_list>
<pin id="113" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="114" class="1001" name="const_114">
<pin_list>
<pin id="115" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="116" class="1001" name="const_116">
<pin_list>
<pin id="117" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="118" class="1004" name="dummy_fu_118">
<pin_list>
<pin id="119" dir="0" index="0" bw="1" slack="0"/>
<pin id="120" dir="1" index="1" bw="8" slack="28"/>
</pin_list>
<bind>
<opcode="alloca(26) " fcode="alloca"/>
<opset="dummy/1 "/>
</bind>
</comp>

<comp id="122" class="1004" name="NUM_BYTES_READ_fu_122">
<pin_list>
<pin id="123" dir="0" index="0" bw="1" slack="0"/>
<pin id="124" dir="1" index="1" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="alloca(26) " fcode="alloca"/>
<opset="NUM_BYTES_READ/59 "/>
</bind>
</comp>

<comp id="126" class="1004" name="grp_writeresp_fu_126">
<pin_list>
<pin id="127" dir="0" index="0" bw="1" slack="0"/>
<pin id="128" dir="0" index="1" bw="32" slack="0"/>
<pin id="129" dir="0" index="2" bw="1" slack="0"/>
<pin id="130" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_req/1 UART_addr_resp/3 UART_load_req/14 UART_addr_req4/22 UART_addr_resp5/24 "/>
</bind>
</comp>

<comp id="133" class="1004" name="StgValue_100_write_fu_133">
<pin_list>
<pin id="134" dir="0" index="0" bw="0" slack="0"/>
<pin id="135" dir="0" index="1" bw="32" slack="1"/>
<pin id="136" dir="0" index="2" bw="8" slack="0"/>
<pin id="137" dir="0" index="3" bw="1" slack="0"/>
<pin id="138" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_100/2 "/>
</bind>
</comp>

<comp id="142" class="1004" name="grp_writeresp_fu_142">
<pin_list>
<pin id="143" dir="0" index="0" bw="1" slack="0"/>
<pin id="144" dir="0" index="1" bw="32" slack="0"/>
<pin id="145" dir="0" index="2" bw="1" slack="0"/>
<pin id="146" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_1_req/2 UART_addr_1_resp/4 UART_addr_1_req6/5 UART_addr_1_resp7/7 "/>
</bind>
</comp>

<comp id="150" class="1004" name="StgValue_104_write_fu_150">
<pin_list>
<pin id="151" dir="0" index="0" bw="0" slack="0"/>
<pin id="152" dir="0" index="1" bw="32" slack="1"/>
<pin id="153" dir="0" index="2" bw="9" slack="0"/>
<pin id="154" dir="0" index="3" bw="1" slack="0"/>
<pin id="155" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_104/3 "/>
</bind>
</comp>

<comp id="159" class="1004" name="grp_writeresp_fu_159">
<pin_list>
<pin id="160" dir="0" index="0" bw="1" slack="0"/>
<pin id="161" dir="0" index="1" bw="32" slack="0"/>
<pin id="162" dir="0" index="2" bw="1" slack="0"/>
<pin id="163" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_2_req/3 UART_addr_2_resp/5 "/>
</bind>
</comp>

<comp id="167" class="1004" name="StgValue_109_write_fu_167">
<pin_list>
<pin id="168" dir="0" index="0" bw="0" slack="0"/>
<pin id="169" dir="0" index="1" bw="32" slack="1"/>
<pin id="170" dir="0" index="2" bw="7" slack="0"/>
<pin id="171" dir="0" index="3" bw="1" slack="0"/>
<pin id="172" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_109/4 "/>
</bind>
</comp>

<comp id="176" class="1004" name="grp_writeresp_fu_176">
<pin_list>
<pin id="177" dir="0" index="0" bw="1" slack="0"/>
<pin id="178" dir="0" index="1" bw="32" slack="0"/>
<pin id="179" dir="0" index="2" bw="1" slack="0"/>
<pin id="180" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_3_req/4 UART_addr_3_resp/6 UART_addr_3_req8/7 UART_addr_3_resp9/9 "/>
</bind>
</comp>

<comp id="184" class="1004" name="StgValue_115_write_fu_184">
<pin_list>
<pin id="185" dir="0" index="0" bw="0" slack="0"/>
<pin id="186" dir="0" index="1" bw="32" slack="1"/>
<pin id="187" dir="0" index="2" bw="1" slack="0"/>
<pin id="188" dir="0" index="3" bw="1" slack="0"/>
<pin id="189" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_115/5 "/>
</bind>
</comp>

<comp id="194" class="1004" name="StgValue_121_write_fu_194">
<pin_list>
<pin id="195" dir="0" index="0" bw="0" slack="0"/>
<pin id="196" dir="0" index="1" bw="32" slack="4"/>
<pin id="197" dir="0" index="2" bw="6" slack="0"/>
<pin id="198" dir="0" index="3" bw="1" slack="0"/>
<pin id="199" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_121/6 "/>
</bind>
</comp>

<comp id="203" class="1004" name="grp_writeresp_fu_203">
<pin_list>
<pin id="204" dir="0" index="0" bw="1" slack="0"/>
<pin id="205" dir="0" index="1" bw="32" slack="0"/>
<pin id="206" dir="0" index="2" bw="1" slack="0"/>
<pin id="207" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="UART_addr_4_req/6 UART_addr_4_resp/8 "/>
</bind>
</comp>

<comp id="210" class="1004" name="StgValue_129_write_fu_210">
<pin_list>
<pin id="211" dir="0" index="0" bw="0" slack="0"/>
<pin id="212" dir="0" index="1" bw="32" slack="1"/>
<pin id="213" dir="0" index="2" bw="1" slack="0"/>
<pin id="214" dir="0" index="3" bw="1" slack="0"/>
<pin id="215" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_129/7 "/>
</bind>
</comp>

<comp id="220" class="1004" name="StgValue_136_write_fu_220">
<pin_list>
<pin id="221" dir="0" index="0" bw="0" slack="0"/>
<pin id="222" dir="0" index="1" bw="32" slack="4"/>
<pin id="223" dir="0" index="2" bw="1" slack="0"/>
<pin id="224" dir="0" index="3" bw="1" slack="0"/>
<pin id="225" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_136/8 "/>
</bind>
</comp>

<comp id="230" class="1004" name="UART_addr_read_read_fu_230">
<pin_list>
<pin id="231" dir="0" index="0" bw="32" slack="0"/>
<pin id="232" dir="0" index="1" bw="32" slack="20"/>
<pin id="233" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="UART_addr_read/21 "/>
</bind>
</comp>

<comp id="235" class="1004" name="StgValue_165_write_fu_235">
<pin_list>
<pin id="236" dir="0" index="0" bw="0" slack="0"/>
<pin id="237" dir="0" index="1" bw="32" slack="22"/>
<pin id="238" dir="0" index="2" bw="1" slack="0"/>
<pin id="239" dir="0" index="3" bw="1" slack="0"/>
<pin id="240" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_165/23 "/>
</bind>
</comp>

<comp id="244" class="1004" name="grp_readreq_fu_244">
<pin_list>
<pin id="245" dir="0" index="0" bw="1" slack="0"/>
<pin id="246" dir="0" index="1" bw="32" slack="0"/>
<pin id="247" dir="0" index="2" bw="1" slack="0"/>
<pin id="248" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) " fcode="readreq"/>
<opset="UART_load_1_req/30 UART_load_3_req/60 "/>
</bind>
</comp>

<comp id="251" class="1004" name="grp_read_fu_251">
<pin_list>
<pin id="252" dir="0" index="0" bw="32" slack="0"/>
<pin id="253" dir="0" index="1" bw="32" slack="7"/>
<pin id="254" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="UART_addr_5_read/37 UART_addr_5_read_1/67 "/>
</bind>
</comp>

<comp id="256" class="1004" name="grp_readreq_fu_256">
<pin_list>
<pin id="257" dir="0" index="0" bw="1" slack="0"/>
<pin id="258" dir="0" index="1" bw="32" slack="0"/>
<pin id="259" dir="0" index="2" bw="1" slack="0"/>
<pin id="260" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) " fcode="readreq"/>
<opset="UART_load_2_req/37 UART_load_4_req/67 "/>
</bind>
</comp>

<comp id="263" class="1004" name="grp_read_fu_263">
<pin_list>
<pin id="264" dir="0" index="0" bw="32" slack="0"/>
<pin id="265" dir="0" index="1" bw="32" slack="7"/>
<pin id="266" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="UART_addr_6_read/44 UART_addr_6_read_1/74 "/>
</bind>
</comp>

<comp id="268" class="1004" name="grp_writeresp_fu_268">
<pin_list>
<pin id="269" dir="0" index="0" bw="1" slack="0"/>
<pin id="270" dir="0" index="1" bw="8" slack="0"/>
<pin id="271" dir="0" index="2" bw="1" slack="0"/>
<pin id="272" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="OUT_req/44 OUT_resp/46 "/>
</bind>
</comp>

<comp id="276" class="1004" name="StgValue_211_write_fu_276">
<pin_list>
<pin id="277" dir="0" index="0" bw="0" slack="0"/>
<pin id="278" dir="0" index="1" bw="8" slack="0"/>
<pin id="279" dir="0" index="2" bw="8" slack="1"/>
<pin id="280" dir="0" index="3" bw="1" slack="0"/>
<pin id="281" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_211/45 "/>
</bind>
</comp>

<comp id="286" class="1004" name="grp_readreq_fu_286">
<pin_list>
<pin id="287" dir="0" index="0" bw="1" slack="0"/>
<pin id="288" dir="0" index="1" bw="8" slack="0"/>
<pin id="289" dir="0" index="2" bw="1" slack="0"/>
<pin id="290" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="readreq(1154) " fcode="readreq"/>
<opset="OUT_load_req/51 "/>
</bind>
</comp>

<comp id="293" class="1004" name="OUT_addr_read_read_fu_293">
<pin_list>
<pin id="294" dir="0" index="0" bw="8" slack="0"/>
<pin id="295" dir="0" index="1" bw="8" slack="7"/>
<pin id="296" dir="1" index="2" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="OUT_addr_read/58 "/>
</bind>
</comp>

<comp id="298" class="1004" name="grp_writeresp_fu_298">
<pin_list>
<pin id="299" dir="0" index="0" bw="1" slack="0"/>
<pin id="300" dir="0" index="1" bw="8" slack="0"/>
<pin id="301" dir="0" index="2" bw="3" slack="0"/>
<pin id="302" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="OUT_addr_2_req/60 OUT_addr_2_resp/83 "/>
</bind>
</comp>

<comp id="305" class="1004" name="grp_writeresp_fu_305">
<pin_list>
<pin id="306" dir="0" index="0" bw="1" slack="0"/>
<pin id="307" dir="0" index="1" bw="8" slack="0"/>
<pin id="308" dir="0" index="2" bw="1" slack="0"/>
<pin id="309" dir="1" index="3" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="writereq(1155) writeresp(1158) " fcode="writeresp"/>
<opset="OUT_addr_1_req/74 OUT_addr_1_resp/76 "/>
</bind>
</comp>

<comp id="312" class="1004" name="StgValue_261_write_fu_312">
<pin_list>
<pin id="313" dir="0" index="0" bw="0" slack="0"/>
<pin id="314" dir="0" index="1" bw="8" slack="1"/>
<pin id="315" dir="0" index="2" bw="8" slack="1"/>
<pin id="316" dir="0" index="3" bw="1" slack="0"/>
<pin id="317" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_261/75 "/>
</bind>
</comp>

<comp id="321" class="1004" name="StgValue_269_write_fu_321">
<pin_list>
<pin id="322" dir="0" index="0" bw="0" slack="0"/>
<pin id="323" dir="0" index="1" bw="8" slack="1"/>
<pin id="324" dir="0" index="2" bw="8" slack="0"/>
<pin id="325" dir="0" index="3" bw="1" slack="0"/>
<pin id="326" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_269/81 "/>
</bind>
</comp>

<comp id="330" class="1004" name="StgValue_272_write_fu_330">
<pin_list>
<pin id="331" dir="0" index="0" bw="0" slack="0"/>
<pin id="332" dir="0" index="1" bw="8" slack="2"/>
<pin id="333" dir="0" index="2" bw="5" slack="0"/>
<pin id="334" dir="0" index="3" bw="1" slack="0"/>
<pin id="335" dir="1" index="4" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="StgValue_272/82 "/>
</bind>
</comp>

<comp id="339" class="1005" name="p_014_0_i_reg_339">
<pin_list>
<pin id="340" dir="0" index="0" bw="18" slack="1"/>
<pin id="341" dir="1" index="1" bw="18" slack="1"/>
</pin_list>
<bind>
<opset="p_014_0_i (phireg) "/>
</bind>
</comp>

<comp id="343" class="1004" name="p_014_0_i_phi_fu_343">
<pin_list>
<pin id="344" dir="0" index="0" bw="1" slack="1"/>
<pin id="345" dir="0" index="1" bw="0" slack="2147483647"/>
<pin id="346" dir="0" index="2" bw="18" slack="0"/>
<pin id="347" dir="0" index="3" bw="0" slack="2147483647"/>
<pin id="348" dir="1" index="4" bw="18" slack="0"/>
</pin_list>
<bind>
<opcode="phi(47) " fcode="phi"/>
<opset="p_014_0_i/29 "/>
</bind>
</comp>

<comp id="350" class="1005" name="NUM_BYTES_READ_2_reg_350">
<pin_list>
<pin id="351" dir="0" index="0" bw="5" slack="3"/>
<pin id="352" dir="1" index="1" bw="5" slack="3"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ_2 (phireg) "/>
</bind>
</comp>

<comp id="354" class="1004" name="NUM_BYTES_READ_2_phi_fu_354">
<pin_list>
<pin id="355" dir="0" index="0" bw="1" slack="3"/>
<pin id="356" dir="0" index="1" bw="0" slack="2147483647"/>
<pin id="357" dir="0" index="2" bw="5" slack="2"/>
<pin id="358" dir="0" index="3" bw="0" slack="2147483647"/>
<pin id="359" dir="1" index="4" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="phi(47) " fcode="phi"/>
<opset="NUM_BYTES_READ_2/82 "/>
</bind>
</comp>

<comp id="361" class="1004" name="grp_fu_361">
<pin_list>
<pin id="362" dir="0" index="0" bw="32" slack="0"/>
<pin id="363" dir="0" index="1" bw="32" slack="0"/>
<pin id="364" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_2/3 UART_addr_6/37 "/>
</bind>
</comp>

<comp id="369" class="1005" name="reg_369">
<pin_list>
<pin id="370" dir="0" index="0" bw="32" slack="1"/>
<pin id="371" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_2 UART_addr_6 "/>
</bind>
</comp>

<comp id="377" class="1004" name="firstSample_load_load_fu_377">
<pin_list>
<pin id="378" dir="0" index="0" bw="1" slack="0"/>
<pin id="379" dir="1" index="1" bw="1" slack="27"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="firstSample_load/1 "/>
</bind>
</comp>

<comp id="381" class="1004" name="UART_addr_fu_381">
<pin_list>
<pin id="382" dir="0" index="0" bw="32" slack="0"/>
<pin id="383" dir="0" index="1" bw="32" slack="0"/>
<pin id="384" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr/1 "/>
</bind>
</comp>

<comp id="388" class="1004" name="UART_addr_1_fu_388">
<pin_list>
<pin id="389" dir="0" index="0" bw="32" slack="0"/>
<pin id="390" dir="0" index="1" bw="32" slack="0"/>
<pin id="391" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_1/2 "/>
</bind>
</comp>

<comp id="395" class="1004" name="UART_addr_3_fu_395">
<pin_list>
<pin id="396" dir="0" index="0" bw="32" slack="0"/>
<pin id="397" dir="0" index="1" bw="32" slack="0"/>
<pin id="398" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_3/4 "/>
</bind>
</comp>

<comp id="402" class="1004" name="UART_addr_4_fu_402">
<pin_list>
<pin id="403" dir="0" index="0" bw="32" slack="0"/>
<pin id="404" dir="0" index="1" bw="32" slack="0"/>
<pin id="405" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_4/6 "/>
</bind>
</comp>

<comp id="409" class="1004" name="temp_fu_409">
<pin_list>
<pin id="410" dir="0" index="0" bw="32" slack="0"/>
<pin id="411" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="temp/21 "/>
</bind>
</comp>

<comp id="413" class="1004" name="tmp_fu_413">
<pin_list>
<pin id="414" dir="0" index="0" bw="8" slack="1"/>
<pin id="415" dir="0" index="1" bw="8" slack="0"/>
<pin id="416" dir="1" index="2" bw="1" slack="6"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp/22 "/>
</bind>
</comp>

<comp id="418" class="1004" name="StgValue_163_store_fu_418">
<pin_list>
<pin id="419" dir="0" index="0" bw="1" slack="0"/>
<pin id="420" dir="0" index="1" bw="1" slack="0"/>
<pin id="421" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_163/22 "/>
</bind>
</comp>

<comp id="424" class="1004" name="StgValue_172_store_fu_424">
<pin_list>
<pin id="425" dir="0" index="0" bw="1" slack="0"/>
<pin id="426" dir="0" index="1" bw="1" slack="0"/>
<pin id="427" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_172/28 "/>
</bind>
</comp>

<comp id="430" class="1004" name="calibrationSuccess_l_load_fu_430">
<pin_list>
<pin id="431" dir="0" index="0" bw="1" slack="0"/>
<pin id="432" dir="1" index="1" bw="1" slack="38"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="calibrationSuccess_l/28 "/>
</bind>
</comp>

<comp id="434" class="1004" name="tmp_6_fu_434">
<pin_list>
<pin id="435" dir="0" index="0" bw="18" slack="0"/>
<pin id="436" dir="0" index="1" bw="18" slack="0"/>
<pin id="437" dir="1" index="2" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp_6/29 "/>
</bind>
</comp>

<comp id="440" class="1004" name="ctr_V_fu_440">
<pin_list>
<pin id="441" dir="0" index="0" bw="18" slack="0"/>
<pin id="442" dir="0" index="1" bw="1" slack="0"/>
<pin id="443" dir="1" index="2" bw="18" slack="0"/>
</pin_list>
<bind>
<opcode="add(8) " fcode="add"/>
<opset="ctr_V/29 "/>
</bind>
</comp>

<comp id="446" class="1004" name="dummy_1_load_fu_446">
<pin_list>
<pin id="447" dir="0" index="0" bw="8" slack="28"/>
<pin id="448" dir="1" index="1" bw="8" slack="0"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="dummy_1/29 "/>
</bind>
</comp>

<comp id="449" class="1004" name="StgValue_185_store_fu_449">
<pin_list>
<pin id="450" dir="0" index="0" bw="8" slack="0"/>
<pin id="451" dir="0" index="1" bw="8" slack="28"/>
<pin id="452" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_185/29 "/>
</bind>
</comp>

<comp id="454" class="1004" name="UART_addr_5_fu_454">
<pin_list>
<pin id="455" dir="0" index="0" bw="32" slack="0"/>
<pin id="456" dir="0" index="1" bw="32" slack="0"/>
<pin id="457" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="UART_addr_5/30 "/>
</bind>
</comp>

<comp id="461" class="1004" name="tmp_2_fu_461">
<pin_list>
<pin id="462" dir="0" index="0" bw="32" slack="0"/>
<pin id="463" dir="1" index="1" bw="1" slack="30"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_2/37 "/>
</bind>
</comp>

<comp id="465" class="1004" name="tmp_3_fu_465">
<pin_list>
<pin id="466" dir="0" index="0" bw="32" slack="0"/>
<pin id="467" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_3/44 "/>
</bind>
</comp>

<comp id="469" class="1004" name="OUT_addr_fu_469">
<pin_list>
<pin id="470" dir="0" index="0" bw="32" slack="0"/>
<pin id="471" dir="0" index="1" bw="32" slack="0"/>
<pin id="472" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="OUT_addr/51 "/>
</bind>
</comp>

<comp id="476" class="1004" name="tmp_5_fu_476">
<pin_list>
<pin id="477" dir="0" index="0" bw="8" slack="1"/>
<pin id="478" dir="0" index="1" bw="8" slack="0"/>
<pin id="479" dir="1" index="2" bw="1" slack="1"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp_5/59 "/>
</bind>
</comp>

<comp id="481" class="1004" name="StgValue_229_store_fu_481">
<pin_list>
<pin id="482" dir="0" index="0" bw="1" slack="0"/>
<pin id="483" dir="0" index="1" bw="5" slack="0"/>
<pin id="484" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_229/59 "/>
</bind>
</comp>

<comp id="486" class="1004" name="NUM_BYTES_READ_load_load_fu_486">
<pin_list>
<pin id="487" dir="0" index="0" bw="5" slack="1"/>
<pin id="488" dir="1" index="1" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="load(27) " fcode="load"/>
<opset="NUM_BYTES_READ_load/60 "/>
</bind>
</comp>

<comp id="489" class="1004" name="tmp_8_fu_489">
<pin_list>
<pin id="490" dir="0" index="0" bw="5" slack="0"/>
<pin id="491" dir="0" index="1" bw="5" slack="0"/>
<pin id="492" dir="1" index="2" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opcode="icmp(45) " fcode="icmp"/>
<opset="tmp_8/60 "/>
</bind>
</comp>

<comp id="495" class="1004" name="OUT_addr_2_fu_495">
<pin_list>
<pin id="496" dir="0" index="0" bw="32" slack="0"/>
<pin id="497" dir="0" index="1" bw="32" slack="0"/>
<pin id="498" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="OUT_addr_2/60 "/>
</bind>
</comp>

<comp id="502" class="1004" name="tmp_4_fu_502">
<pin_list>
<pin id="503" dir="0" index="0" bw="32" slack="0"/>
<pin id="504" dir="1" index="1" bw="1" slack="13"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_4/67 "/>
</bind>
</comp>

<comp id="506" class="1004" name="tmp_7_fu_506">
<pin_list>
<pin id="507" dir="0" index="0" bw="32" slack="0"/>
<pin id="508" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opcode="trunc(33) " fcode="trunc"/>
<opset="tmp_7/74 "/>
</bind>
</comp>

<comp id="510" class="1004" name="tmp_9_fu_510">
<pin_list>
<pin id="511" dir="0" index="0" bw="5" slack="14"/>
<pin id="512" dir="1" index="1" bw="64" slack="0"/>
</pin_list>
<bind>
<opcode="zext(34) " fcode="zext"/>
<opset="tmp_9/74 "/>
</bind>
</comp>

<comp id="513" class="1004" name="OUT_addr_1_fu_513">
<pin_list>
<pin id="514" dir="0" index="0" bw="32" slack="0"/>
<pin id="515" dir="0" index="1" bw="32" slack="0"/>
<pin id="516" dir="1" index="2" bw="32" slack="0"/>
</pin_list>
<bind>
<opcode="getelementptr(29) " fcode="getelementptr"/>
<opset="OUT_addr_1/74 "/>
</bind>
</comp>

<comp id="520" class="1004" name="NUM_BYTES_READ_1_fu_520">
<pin_list>
<pin id="521" dir="0" index="0" bw="1" slack="0"/>
<pin id="522" dir="0" index="1" bw="5" slack="14"/>
<pin id="523" dir="1" index="2" bw="5" slack="0"/>
</pin_list>
<bind>
<opcode="add(8) " fcode="add"/>
<opset="NUM_BYTES_READ_1/74 "/>
</bind>
</comp>

<comp id="525" class="1004" name="StgValue_260_store_fu_525">
<pin_list>
<pin id="526" dir="0" index="0" bw="5" slack="0"/>
<pin id="527" dir="0" index="1" bw="5" slack="15"/>
<pin id="528" dir="1" index="2" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="store(28) " fcode="store"/>
<opset="StgValue_260/74 "/>
</bind>
</comp>

<comp id="530" class="1004" name="tmp_s_fu_530">
<pin_list>
<pin id="531" dir="0" index="0" bw="5" slack="0"/>
<pin id="532" dir="1" index="1" bw="8" slack="0"/>
</pin_list>
<bind>
<opcode="zext(34) " fcode="zext"/>
<opset="tmp_s/82 "/>
</bind>
</comp>

<comp id="535" class="1005" name="dummy_reg_535">
<pin_list>
<pin id="536" dir="0" index="0" bw="8" slack="28"/>
<pin id="537" dir="1" index="1" bw="8" slack="28"/>
</pin_list>
<bind>
<opset="dummy "/>
</bind>
</comp>

<comp id="541" class="1005" name="firstSample_load_reg_541">
<pin_list>
<pin id="542" dir="0" index="0" bw="1" slack="27"/>
<pin id="543" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="firstSample_load "/>
</bind>
</comp>

<comp id="545" class="1005" name="UART_addr_reg_545">
<pin_list>
<pin id="546" dir="0" index="0" bw="32" slack="1"/>
<pin id="547" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr "/>
</bind>
</comp>

<comp id="553" class="1005" name="UART_addr_1_reg_553">
<pin_list>
<pin id="554" dir="0" index="0" bw="32" slack="1"/>
<pin id="555" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_1 "/>
</bind>
</comp>

<comp id="560" class="1005" name="UART_addr_3_reg_560">
<pin_list>
<pin id="561" dir="0" index="0" bw="32" slack="1"/>
<pin id="562" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_3 "/>
</bind>
</comp>

<comp id="567" class="1005" name="UART_addr_4_reg_567">
<pin_list>
<pin id="568" dir="0" index="0" bw="32" slack="1"/>
<pin id="569" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_4 "/>
</bind>
</comp>

<comp id="573" class="1005" name="temp_reg_573">
<pin_list>
<pin id="574" dir="0" index="0" bw="8" slack="1"/>
<pin id="575" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="temp "/>
</bind>
</comp>

<comp id="578" class="1005" name="tmp_reg_578">
<pin_list>
<pin id="579" dir="0" index="0" bw="1" slack="6"/>
<pin id="580" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp "/>
</bind>
</comp>

<comp id="582" class="1005" name="calibrationSuccess_l_reg_582">
<pin_list>
<pin id="583" dir="0" index="0" bw="1" slack="38"/>
<pin id="584" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="calibrationSuccess_l "/>
</bind>
</comp>

<comp id="589" class="1005" name="ctr_V_reg_589">
<pin_list>
<pin id="590" dir="0" index="0" bw="18" slack="0"/>
<pin id="591" dir="1" index="1" bw="18" slack="0"/>
</pin_list>
<bind>
<opset="ctr_V "/>
</bind>
</comp>

<comp id="594" class="1005" name="UART_addr_5_reg_594">
<pin_list>
<pin id="595" dir="0" index="0" bw="32" slack="1"/>
<pin id="596" dir="1" index="1" bw="32" slack="1"/>
</pin_list>
<bind>
<opset="UART_addr_5 "/>
</bind>
</comp>

<comp id="600" class="1005" name="tmp_2_reg_600">
<pin_list>
<pin id="601" dir="0" index="0" bw="1" slack="30"/>
<pin id="602" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_2 "/>
</bind>
</comp>

<comp id="604" class="1005" name="tmp_3_reg_604">
<pin_list>
<pin id="605" dir="0" index="0" bw="8" slack="1"/>
<pin id="606" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="tmp_3 "/>
</bind>
</comp>

<comp id="609" class="1005" name="OUT_addr_reg_609">
<pin_list>
<pin id="610" dir="0" index="0" bw="8" slack="1"/>
<pin id="611" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="OUT_addr "/>
</bind>
</comp>

<comp id="615" class="1005" name="OUT_addr_read_reg_615">
<pin_list>
<pin id="616" dir="0" index="0" bw="8" slack="1"/>
<pin id="617" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="OUT_addr_read "/>
</bind>
</comp>

<comp id="620" class="1005" name="tmp_5_reg_620">
<pin_list>
<pin id="621" dir="0" index="0" bw="1" slack="1"/>
<pin id="622" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_5 "/>
</bind>
</comp>

<comp id="624" class="1005" name="NUM_BYTES_READ_reg_624">
<pin_list>
<pin id="625" dir="0" index="0" bw="5" slack="0"/>
<pin id="626" dir="1" index="1" bw="5" slack="0"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ "/>
</bind>
</comp>

<comp id="631" class="1005" name="NUM_BYTES_READ_load_reg_631">
<pin_list>
<pin id="632" dir="0" index="0" bw="5" slack="2"/>
<pin id="633" dir="1" index="1" bw="5" slack="2"/>
</pin_list>
<bind>
<opset="NUM_BYTES_READ_load "/>
</bind>
</comp>

<comp id="641" class="1005" name="OUT_addr_2_reg_641">
<pin_list>
<pin id="642" dir="0" index="0" bw="8" slack="1"/>
<pin id="643" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="OUT_addr_2 "/>
</bind>
</comp>

<comp id="648" class="1005" name="tmp_4_reg_648">
<pin_list>
<pin id="649" dir="0" index="0" bw="1" slack="13"/>
<pin id="650" dir="1" index="1" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<opset="tmp_4 "/>
</bind>
</comp>

<comp id="652" class="1005" name="tmp_7_reg_652">
<pin_list>
<pin id="653" dir="0" index="0" bw="8" slack="1"/>
<pin id="654" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="tmp_7 "/>
</bind>
</comp>

<comp id="657" class="1005" name="OUT_addr_1_reg_657">
<pin_list>
<pin id="658" dir="0" index="0" bw="8" slack="1"/>
<pin id="659" dir="1" index="1" bw="8" slack="1"/>
</pin_list>
<bind>
<opset="OUT_addr_1 "/>
</bind>
</comp>

</comp_list>

<net_list>
<net id="121"><net_src comp="10" pin="0"/><net_sink comp="118" pin=0"/></net>

<net id="125"><net_src comp="40" pin="0"/><net_sink comp="122" pin=0"/></net>

<net id="131"><net_src comp="44" pin="0"/><net_sink comp="126" pin=0"/></net>

<net id="132"><net_src comp="40" pin="0"/><net_sink comp="126" pin=2"/></net>

<net id="139"><net_src comp="46" pin="0"/><net_sink comp="133" pin=0"/></net>

<net id="140"><net_src comp="48" pin="0"/><net_sink comp="133" pin=2"/></net>

<net id="141"><net_src comp="50" pin="0"/><net_sink comp="133" pin=3"/></net>

<net id="147"><net_src comp="44" pin="0"/><net_sink comp="142" pin=0"/></net>

<net id="148"><net_src comp="40" pin="0"/><net_sink comp="142" pin=2"/></net>

<net id="149"><net_src comp="54" pin="0"/><net_sink comp="126" pin=0"/></net>

<net id="156"><net_src comp="46" pin="0"/><net_sink comp="150" pin=0"/></net>

<net id="157"><net_src comp="56" pin="0"/><net_sink comp="150" pin=2"/></net>

<net id="158"><net_src comp="50" pin="0"/><net_sink comp="150" pin=3"/></net>

<net id="164"><net_src comp="44" pin="0"/><net_sink comp="159" pin=0"/></net>

<net id="165"><net_src comp="40" pin="0"/><net_sink comp="159" pin=2"/></net>

<net id="166"><net_src comp="54" pin="0"/><net_sink comp="142" pin=0"/></net>

<net id="173"><net_src comp="46" pin="0"/><net_sink comp="167" pin=0"/></net>

<net id="174"><net_src comp="60" pin="0"/><net_sink comp="167" pin=2"/></net>

<net id="175"><net_src comp="50" pin="0"/><net_sink comp="167" pin=3"/></net>

<net id="181"><net_src comp="44" pin="0"/><net_sink comp="176" pin=0"/></net>

<net id="182"><net_src comp="40" pin="0"/><net_sink comp="176" pin=2"/></net>

<net id="183"><net_src comp="54" pin="0"/><net_sink comp="159" pin=0"/></net>

<net id="190"><net_src comp="46" pin="0"/><net_sink comp="184" pin=0"/></net>

<net id="191"><net_src comp="18" pin="0"/><net_sink comp="184" pin=2"/></net>

<net id="192"><net_src comp="50" pin="0"/><net_sink comp="184" pin=3"/></net>

<net id="193"><net_src comp="54" pin="0"/><net_sink comp="176" pin=0"/></net>

<net id="200"><net_src comp="46" pin="0"/><net_sink comp="194" pin=0"/></net>

<net id="201"><net_src comp="64" pin="0"/><net_sink comp="194" pin=2"/></net>

<net id="202"><net_src comp="50" pin="0"/><net_sink comp="194" pin=3"/></net>

<net id="208"><net_src comp="44" pin="0"/><net_sink comp="203" pin=0"/></net>

<net id="209"><net_src comp="40" pin="0"/><net_sink comp="203" pin=2"/></net>

<net id="216"><net_src comp="46" pin="0"/><net_sink comp="210" pin=0"/></net>

<net id="217"><net_src comp="40" pin="0"/><net_sink comp="210" pin=2"/></net>

<net id="218"><net_src comp="50" pin="0"/><net_sink comp="210" pin=3"/></net>

<net id="219"><net_src comp="54" pin="0"/><net_sink comp="203" pin=0"/></net>

<net id="226"><net_src comp="46" pin="0"/><net_sink comp="220" pin=0"/></net>

<net id="227"><net_src comp="40" pin="0"/><net_sink comp="220" pin=2"/></net>

<net id="228"><net_src comp="50" pin="0"/><net_sink comp="220" pin=3"/></net>

<net id="229"><net_src comp="68" pin="0"/><net_sink comp="126" pin=0"/></net>

<net id="234"><net_src comp="70" pin="0"/><net_sink comp="230" pin=0"/></net>

<net id="241"><net_src comp="46" pin="0"/><net_sink comp="235" pin=0"/></net>

<net id="242"><net_src comp="18" pin="0"/><net_sink comp="235" pin=2"/></net>

<net id="243"><net_src comp="50" pin="0"/><net_sink comp="235" pin=3"/></net>

<net id="249"><net_src comp="68" pin="0"/><net_sink comp="244" pin=0"/></net>

<net id="250"><net_src comp="40" pin="0"/><net_sink comp="244" pin=2"/></net>

<net id="255"><net_src comp="70" pin="0"/><net_sink comp="251" pin=0"/></net>

<net id="261"><net_src comp="68" pin="0"/><net_sink comp="256" pin=0"/></net>

<net id="262"><net_src comp="40" pin="0"/><net_sink comp="256" pin=2"/></net>

<net id="267"><net_src comp="70" pin="0"/><net_sink comp="263" pin=0"/></net>

<net id="273"><net_src comp="98" pin="0"/><net_sink comp="268" pin=0"/></net>

<net id="274"><net_src comp="2" pin="0"/><net_sink comp="268" pin=1"/></net>

<net id="275"><net_src comp="40" pin="0"/><net_sink comp="268" pin=2"/></net>

<net id="282"><net_src comp="100" pin="0"/><net_sink comp="276" pin=0"/></net>

<net id="283"><net_src comp="2" pin="0"/><net_sink comp="276" pin=1"/></net>

<net id="284"><net_src comp="74" pin="0"/><net_sink comp="276" pin=3"/></net>

<net id="285"><net_src comp="102" pin="0"/><net_sink comp="268" pin=0"/></net>

<net id="291"><net_src comp="104" pin="0"/><net_sink comp="286" pin=0"/></net>

<net id="292"><net_src comp="40" pin="0"/><net_sink comp="286" pin=2"/></net>

<net id="297"><net_src comp="106" pin="0"/><net_sink comp="293" pin=0"/></net>

<net id="303"><net_src comp="98" pin="0"/><net_sink comp="298" pin=0"/></net>

<net id="304"><net_src comp="116" pin="0"/><net_sink comp="298" pin=2"/></net>

<net id="310"><net_src comp="98" pin="0"/><net_sink comp="305" pin=0"/></net>

<net id="311"><net_src comp="40" pin="0"/><net_sink comp="305" pin=2"/></net>

<net id="318"><net_src comp="100" pin="0"/><net_sink comp="312" pin=0"/></net>

<net id="319"><net_src comp="74" pin="0"/><net_sink comp="312" pin=3"/></net>

<net id="320"><net_src comp="102" pin="0"/><net_sink comp="305" pin=0"/></net>

<net id="327"><net_src comp="100" pin="0"/><net_sink comp="321" pin=0"/></net>

<net id="328"><net_src comp="72" pin="0"/><net_sink comp="321" pin=2"/></net>

<net id="329"><net_src comp="74" pin="0"/><net_sink comp="321" pin=3"/></net>

<net id="336"><net_src comp="100" pin="0"/><net_sink comp="330" pin=0"/></net>

<net id="337"><net_src comp="74" pin="0"/><net_sink comp="330" pin=3"/></net>

<net id="338"><net_src comp="102" pin="0"/><net_sink comp="298" pin=0"/></net>

<net id="342"><net_src comp="84" pin="0"/><net_sink comp="339" pin=0"/></net>

<net id="349"><net_src comp="339" pin="1"/><net_sink comp="343" pin=0"/></net>

<net id="353"><net_src comp="110" pin="0"/><net_sink comp="350" pin=0"/></net>

<net id="360"><net_src comp="350" pin="1"/><net_sink comp="354" pin=0"/></net>

<net id="365"><net_src comp="0" pin="0"/><net_sink comp="361" pin=0"/></net>

<net id="366"><net_src comp="58" pin="0"/><net_sink comp="361" pin=1"/></net>

<net id="367"><net_src comp="361" pin="2"/><net_sink comp="159" pin=1"/></net>

<net id="368"><net_src comp="361" pin="2"/><net_sink comp="256" pin=1"/></net>

<net id="372"><net_src comp="361" pin="2"/><net_sink comp="369" pin=0"/></net>

<net id="373"><net_src comp="369" pin="1"/><net_sink comp="167" pin=1"/></net>

<net id="374"><net_src comp="369" pin="1"/><net_sink comp="159" pin=1"/></net>

<net id="375"><net_src comp="369" pin="1"/><net_sink comp="256" pin=1"/></net>

<net id="376"><net_src comp="369" pin="1"/><net_sink comp="263" pin=1"/></net>

<net id="380"><net_src comp="4" pin="0"/><net_sink comp="377" pin=0"/></net>

<net id="385"><net_src comp="0" pin="0"/><net_sink comp="381" pin=0"/></net>

<net id="386"><net_src comp="42" pin="0"/><net_sink comp="381" pin=1"/></net>

<net id="387"><net_src comp="381" pin="2"/><net_sink comp="126" pin=1"/></net>

<net id="392"><net_src comp="0" pin="0"/><net_sink comp="388" pin=0"/></net>

<net id="393"><net_src comp="52" pin="0"/><net_sink comp="388" pin=1"/></net>

<net id="394"><net_src comp="388" pin="2"/><net_sink comp="142" pin=1"/></net>

<net id="399"><net_src comp="0" pin="0"/><net_sink comp="395" pin=0"/></net>

<net id="400"><net_src comp="62" pin="0"/><net_sink comp="395" pin=1"/></net>

<net id="401"><net_src comp="395" pin="2"/><net_sink comp="176" pin=1"/></net>

<net id="406"><net_src comp="0" pin="0"/><net_sink comp="402" pin=0"/></net>

<net id="407"><net_src comp="66" pin="0"/><net_sink comp="402" pin=1"/></net>

<net id="408"><net_src comp="402" pin="2"/><net_sink comp="203" pin=1"/></net>

<net id="412"><net_src comp="230" pin="2"/><net_sink comp="409" pin=0"/></net>

<net id="417"><net_src comp="72" pin="0"/><net_sink comp="413" pin=1"/></net>

<net id="422"><net_src comp="74" pin="0"/><net_sink comp="418" pin=0"/></net>

<net id="423"><net_src comp="6" pin="0"/><net_sink comp="418" pin=1"/></net>

<net id="428"><net_src comp="76" pin="0"/><net_sink comp="424" pin=0"/></net>

<net id="429"><net_src comp="4" pin="0"/><net_sink comp="424" pin=1"/></net>

<net id="433"><net_src comp="6" pin="0"/><net_sink comp="430" pin=0"/></net>

<net id="438"><net_src comp="343" pin="4"/><net_sink comp="434" pin=0"/></net>

<net id="439"><net_src comp="86" pin="0"/><net_sink comp="434" pin=1"/></net>

<net id="444"><net_src comp="343" pin="4"/><net_sink comp="440" pin=0"/></net>

<net id="445"><net_src comp="92" pin="0"/><net_sink comp="440" pin=1"/></net>

<net id="453"><net_src comp="446" pin="1"/><net_sink comp="449" pin=0"/></net>

<net id="458"><net_src comp="0" pin="0"/><net_sink comp="454" pin=0"/></net>

<net id="459"><net_src comp="96" pin="0"/><net_sink comp="454" pin=1"/></net>

<net id="460"><net_src comp="454" pin="2"/><net_sink comp="244" pin=1"/></net>

<net id="464"><net_src comp="251" pin="2"/><net_sink comp="461" pin=0"/></net>

<net id="468"><net_src comp="263" pin="2"/><net_sink comp="465" pin=0"/></net>

<net id="473"><net_src comp="2" pin="0"/><net_sink comp="469" pin=0"/></net>

<net id="474"><net_src comp="10" pin="0"/><net_sink comp="469" pin=1"/></net>

<net id="475"><net_src comp="469" pin="2"/><net_sink comp="286" pin=1"/></net>

<net id="480"><net_src comp="108" pin="0"/><net_sink comp="476" pin=1"/></net>

<net id="485"><net_src comp="110" pin="0"/><net_sink comp="481" pin=0"/></net>

<net id="493"><net_src comp="486" pin="1"/><net_sink comp="489" pin=0"/></net>

<net id="494"><net_src comp="112" pin="0"/><net_sink comp="489" pin=1"/></net>

<net id="499"><net_src comp="2" pin="0"/><net_sink comp="495" pin=0"/></net>

<net id="500"><net_src comp="114" pin="0"/><net_sink comp="495" pin=1"/></net>

<net id="501"><net_src comp="495" pin="2"/><net_sink comp="298" pin=1"/></net>

<net id="505"><net_src comp="251" pin="2"/><net_sink comp="502" pin=0"/></net>

<net id="509"><net_src comp="263" pin="2"/><net_sink comp="506" pin=0"/></net>

<net id="517"><net_src comp="2" pin="0"/><net_sink comp="513" pin=0"/></net>

<net id="518"><net_src comp="510" pin="1"/><net_sink comp="513" pin=1"/></net>

<net id="519"><net_src comp="513" pin="2"/><net_sink comp="305" pin=1"/></net>

<net id="524"><net_src comp="110" pin="0"/><net_sink comp="520" pin=0"/></net>

<net id="529"><net_src comp="520" pin="2"/><net_sink comp="525" pin=0"/></net>

<net id="533"><net_src comp="354" pin="4"/><net_sink comp="530" pin=0"/></net>

<net id="534"><net_src comp="530" pin="1"/><net_sink comp="330" pin=2"/></net>

<net id="538"><net_src comp="118" pin="1"/><net_sink comp="535" pin=0"/></net>

<net id="539"><net_src comp="535" pin="1"/><net_sink comp="446" pin=0"/></net>

<net id="540"><net_src comp="535" pin="1"/><net_sink comp="449" pin=1"/></net>

<net id="544"><net_src comp="377" pin="1"/><net_sink comp="541" pin=0"/></net>

<net id="548"><net_src comp="381" pin="2"/><net_sink comp="545" pin=0"/></net>

<net id="549"><net_src comp="545" pin="1"/><net_sink comp="133" pin=1"/></net>

<net id="550"><net_src comp="545" pin="1"/><net_sink comp="126" pin=1"/></net>

<net id="551"><net_src comp="545" pin="1"/><net_sink comp="230" pin=1"/></net>

<net id="552"><net_src comp="545" pin="1"/><net_sink comp="235" pin=1"/></net>

<net id="556"><net_src comp="388" pin="2"/><net_sink comp="553" pin=0"/></net>

<net id="557"><net_src comp="553" pin="1"/><net_sink comp="150" pin=1"/></net>

<net id="558"><net_src comp="553" pin="1"/><net_sink comp="142" pin=1"/></net>

<net id="559"><net_src comp="553" pin="1"/><net_sink comp="194" pin=1"/></net>

<net id="563"><net_src comp="395" pin="2"/><net_sink comp="560" pin=0"/></net>

<net id="564"><net_src comp="560" pin="1"/><net_sink comp="184" pin=1"/></net>

<net id="565"><net_src comp="560" pin="1"/><net_sink comp="176" pin=1"/></net>

<net id="566"><net_src comp="560" pin="1"/><net_sink comp="220" pin=1"/></net>

<net id="570"><net_src comp="402" pin="2"/><net_sink comp="567" pin=0"/></net>

<net id="571"><net_src comp="567" pin="1"/><net_sink comp="210" pin=1"/></net>

<net id="572"><net_src comp="567" pin="1"/><net_sink comp="203" pin=1"/></net>

<net id="576"><net_src comp="409" pin="1"/><net_sink comp="573" pin=0"/></net>

<net id="577"><net_src comp="573" pin="1"/><net_sink comp="413" pin=0"/></net>

<net id="581"><net_src comp="413" pin="2"/><net_sink comp="578" pin=0"/></net>

<net id="585"><net_src comp="430" pin="1"/><net_sink comp="582" pin=0"/></net>

<net id="592"><net_src comp="440" pin="2"/><net_sink comp="589" pin=0"/></net>

<net id="593"><net_src comp="589" pin="1"/><net_sink comp="343" pin=2"/></net>

<net id="597"><net_src comp="454" pin="2"/><net_sink comp="594" pin=0"/></net>

<net id="598"><net_src comp="594" pin="1"/><net_sink comp="244" pin=1"/></net>

<net id="599"><net_src comp="594" pin="1"/><net_sink comp="251" pin=1"/></net>

<net id="603"><net_src comp="461" pin="1"/><net_sink comp="600" pin=0"/></net>

<net id="607"><net_src comp="465" pin="1"/><net_sink comp="604" pin=0"/></net>

<net id="608"><net_src comp="604" pin="1"/><net_sink comp="276" pin=2"/></net>

<net id="612"><net_src comp="469" pin="2"/><net_sink comp="609" pin=0"/></net>

<net id="613"><net_src comp="609" pin="1"/><net_sink comp="286" pin=1"/></net>

<net id="614"><net_src comp="609" pin="1"/><net_sink comp="293" pin=1"/></net>

<net id="618"><net_src comp="293" pin="2"/><net_sink comp="615" pin=0"/></net>

<net id="619"><net_src comp="615" pin="1"/><net_sink comp="476" pin=0"/></net>

<net id="623"><net_src comp="476" pin="2"/><net_sink comp="620" pin=0"/></net>

<net id="627"><net_src comp="122" pin="1"/><net_sink comp="624" pin=0"/></net>

<net id="628"><net_src comp="624" pin="1"/><net_sink comp="481" pin=1"/></net>

<net id="629"><net_src comp="624" pin="1"/><net_sink comp="486" pin=0"/></net>

<net id="630"><net_src comp="624" pin="1"/><net_sink comp="525" pin=1"/></net>

<net id="634"><net_src comp="486" pin="1"/><net_sink comp="631" pin=0"/></net>

<net id="635"><net_src comp="631" pin="1"/><net_sink comp="510" pin=0"/></net>

<net id="636"><net_src comp="631" pin="1"/><net_sink comp="520" pin=1"/></net>

<net id="637"><net_src comp="631" pin="1"/><net_sink comp="354" pin=2"/></net>

<net id="644"><net_src comp="495" pin="2"/><net_sink comp="641" pin=0"/></net>

<net id="645"><net_src comp="641" pin="1"/><net_sink comp="321" pin=1"/></net>

<net id="646"><net_src comp="641" pin="1"/><net_sink comp="330" pin=1"/></net>

<net id="647"><net_src comp="641" pin="1"/><net_sink comp="298" pin=1"/></net>

<net id="651"><net_src comp="502" pin="1"/><net_sink comp="648" pin=0"/></net>

<net id="655"><net_src comp="506" pin="1"/><net_sink comp="652" pin=0"/></net>

<net id="656"><net_src comp="652" pin="1"/><net_sink comp="312" pin=2"/></net>

<net id="660"><net_src comp="513" pin="2"/><net_sink comp="657" pin=0"/></net>

<net id="661"><net_src comp="657" pin="1"/><net_sink comp="312" pin=1"/></net>

<net id="662"><net_src comp="657" pin="1"/><net_sink comp="305" pin=1"/></net>

</net_list>

</model> 
---------------- Datapath Model END ------------------

* FSMD analyzer results:
  - Output states:
	Port: UART | {1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 }
	Port: OUT_r | {44 45 46 47 48 49 50 60 74 75 76 77 78 79 80 81 82 83 84 85 86 87 }
	Port: firstSample | {28 }
	Port: calibrationSuccess | {22 }
 - Input state : 
	Port: AXI_UART_DRIVER : UART | {14 15 16 17 18 19 20 21 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 }
	Port: AXI_UART_DRIVER : OUT_r | {51 52 53 54 55 56 57 58 }
	Port: AXI_UART_DRIVER : firstSample | {1 }
	Port: AXI_UART_DRIVER : calibrationSuccess | {28 }
  - Chain level:
	State 1
		StgValue_97 : 1
		UART_addr_req : 1
	State 2
		UART_addr_1_req : 1
	State 3
		UART_addr_2_req : 1
	State 4
		UART_addr_3_req : 1
	State 5
	State 6
		UART_addr_4_req : 1
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
		StgValue_162 : 1
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
		StgValue_175 : 1
	State 29
		tmp_6 : 1
		ctr_V : 1
		StgValue_183 : 2
		StgValue_185 : 1
	State 30
		UART_load_1_req : 1
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
		StgValue_199 : 1
		UART_load_2_req : 1
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
		OUT_load_req : 1
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
		StgValue_227 : 1
		StgValue_229 : 1
	State 60
		tmp_8 : 1
		StgValue_233 : 2
		OUT_addr_2_req : 1
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
		StgValue_246 : 1
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
		OUT_addr_1 : 1
		OUT_addr_1_req : 2
		StgValue_260 : 1
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
		tmp_s : 1
		StgValue_272 : 2
	State 83
	State 84
	State 85
	State 86
	State 87


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================

* Functional unit list:
|----------|----------------------------|---------|---------|
| Operation|       Functional Unit      |    FF   |   LUT   |
|----------|----------------------------|---------|---------|
|          |         tmp_fu_413         |    0    |    11   |
|   icmp   |        tmp_6_fu_434        |    0    |    18   |
|          |        tmp_5_fu_476        |    0    |    11   |
|          |        tmp_8_fu_489        |    0    |    11   |
|----------|----------------------------|---------|---------|
|    add   |        ctr_V_fu_440        |    0    |    25   |
|          |   NUM_BYTES_READ_1_fu_520  |    0    |    15   |
|----------|----------------------------|---------|---------|
|          |    grp_writeresp_fu_126    |    0    |    0    |
|          |    grp_writeresp_fu_142    |    0    |    0    |
|          |    grp_writeresp_fu_159    |    0    |    0    |
| writeresp|    grp_writeresp_fu_176    |    0    |    0    |
|          |    grp_writeresp_fu_203    |    0    |    0    |
|          |    grp_writeresp_fu_268    |    0    |    0    |
|          |    grp_writeresp_fu_298    |    0    |    0    |
|          |    grp_writeresp_fu_305    |    0    |    0    |
|----------|----------------------------|---------|---------|
|          |  StgValue_100_write_fu_133 |    0    |    0    |
|          |  StgValue_104_write_fu_150 |    0    |    0    |
|          |  StgValue_109_write_fu_167 |    0    |    0    |
|          |  StgValue_115_write_fu_184 |    0    |    0    |
|          |  StgValue_121_write_fu_194 |    0    |    0    |
|   write  |  StgValue_129_write_fu_210 |    0    |    0    |
|          |  StgValue_136_write_fu_220 |    0    |    0    |
|          |  StgValue_165_write_fu_235 |    0    |    0    |
|          |  StgValue_211_write_fu_276 |    0    |    0    |
|          |  StgValue_261_write_fu_312 |    0    |    0    |
|          |  StgValue_269_write_fu_321 |    0    |    0    |
|          |  StgValue_272_write_fu_330 |    0    |    0    |
|----------|----------------------------|---------|---------|
|          | UART_addr_read_read_fu_230 |    0    |    0    |
|   read   |       grp_read_fu_251      |    0    |    0    |
|          |       grp_read_fu_263      |    0    |    0    |
|          |  OUT_addr_read_read_fu_293 |    0    |    0    |
|----------|----------------------------|---------|---------|
|          |     grp_readreq_fu_244     |    0    |    0    |
|  readreq |     grp_readreq_fu_256     |    0    |    0    |
|          |     grp_readreq_fu_286     |    0    |    0    |
|----------|----------------------------|---------|---------|
|          |         temp_fu_409        |    0    |    0    |
|          |        tmp_2_fu_461        |    0    |    0    |
|   trunc  |        tmp_3_fu_465        |    0    |    0    |
|          |        tmp_4_fu_502        |    0    |    0    |
|          |        tmp_7_fu_506        |    0    |    0    |
|----------|----------------------------|---------|---------|
|   zext   |        tmp_9_fu_510        |    0    |    0    |
|          |        tmp_s_fu_530        |    0    |    0    |
|----------|----------------------------|---------|---------|
|   Total  |                            |    0    |    91   |
|----------|----------------------------|---------|---------|

Memories:
N/A

* Register list:
+----------------------------+--------+
|                            |   FF   |
+----------------------------+--------+
|  NUM_BYTES_READ_2_reg_350  |    5   |
| NUM_BYTES_READ_load_reg_631|    5   |
|   NUM_BYTES_READ_reg_624   |    5   |
|     OUT_addr_1_reg_657     |    8   |
|     OUT_addr_2_reg_641     |    8   |
|    OUT_addr_read_reg_615   |    8   |
|      OUT_addr_reg_609      |    8   |
|     UART_addr_1_reg_553    |   32   |
|     UART_addr_3_reg_560    |   32   |
|     UART_addr_4_reg_567    |   32   |
|     UART_addr_5_reg_594    |   32   |
|      UART_addr_reg_545     |   32   |
|calibrationSuccess_l_reg_582|    1   |
|        ctr_V_reg_589       |   18   |
|        dummy_reg_535       |    8   |
|  firstSample_load_reg_541  |    1   |
|      p_014_0_i_reg_339     |   18   |
|           reg_369          |   32   |
|        temp_reg_573        |    8   |
|        tmp_2_reg_600       |    1   |
|        tmp_3_reg_604       |    8   |
|        tmp_4_reg_648       |    1   |
|        tmp_5_reg_620       |    1   |
|        tmp_7_reg_652       |    8   |
|         tmp_reg_578        |    1   |
+----------------------------+--------+
|            Total           |   313  |
+----------------------------+--------+

* Multiplexer (MUX) list: 
|----------------------|------|------|------|--------||---------||---------|
|         Comp         |  Pin | Size |  BW  | S x BW ||  Delay  ||   LUT   |
|----------------------|------|------|------|--------||---------||---------|
| grp_writeresp_fu_126 |  p0  |   3  |   1  |    3   |
| grp_writeresp_fu_126 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_142 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_142 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_159 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_159 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_176 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_176 |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_203 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_203 |  p1  |   2  |  32  |   64   ||    9    |
|  grp_readreq_fu_244  |  p1  |   2  |  32  |   64   ||    9    |
|  grp_readreq_fu_256  |  p1  |   2  |  32  |   64   ||    9    |
| grp_writeresp_fu_268 |  p0  |   2  |   1  |    2   |
|  grp_readreq_fu_286  |  p1  |   2  |   8  |   16   ||    9    |
| grp_writeresp_fu_298 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_298 |  p1  |   2  |   8  |   16   ||    9    |
| grp_writeresp_fu_305 |  p0  |   2  |   1  |    2   |
| grp_writeresp_fu_305 |  p1  |   2  |   8  |   16   ||    9    |
|----------------------|------|------|------|--------||---------||---------|
|         Total        |      |      |      |   513  || 31.8877 ||    90   |
|----------------------|------|------|------|--------||---------||---------|



* Summary:
+-----------+--------+--------+--------+
|           |  Delay |   FF   |   LUT  |
+-----------+--------+--------+--------+
|  Function |    -   |    0   |   91   |
|   Memory  |    -   |    -   |    -   |
|Multiplexer|   31   |    -   |   90   |
|  Register |    -   |   313  |    -   |
+-----------+--------+--------+--------+
|   Total   |   31   |   313  |   181  |
+-----------+--------+--------+--------+
