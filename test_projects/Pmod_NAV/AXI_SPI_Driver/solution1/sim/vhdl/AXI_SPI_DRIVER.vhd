-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXI_SPI_DRIVER is
generic (
    C_M_AXI_SPI_CORE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_SPI_CORE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SPI_CORE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPI_CORE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SPI_CORE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPI_CORE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPI_CORE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPI_CORE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPI_CORE_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_SPI_CORE_USER_VALUE : INTEGER := 0;
    C_M_AXI_SPI_CORE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SPI_CORE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_spi_core_AWVALID : OUT STD_LOGIC;
    m_axi_spi_core_AWREADY : IN STD_LOGIC;
    m_axi_spi_core_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ADDR_WIDTH-1 downto 0);
    m_axi_spi_core_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ID_WIDTH-1 downto 0);
    m_axi_spi_core_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_spi_core_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_spi_core_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_spi_core_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_spi_core_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_spi_core_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_spi_core_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_spi_core_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_spi_core_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_AWUSER_WIDTH-1 downto 0);
    m_axi_spi_core_WVALID : OUT STD_LOGIC;
    m_axi_spi_core_WREADY : IN STD_LOGIC;
    m_axi_spi_core_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_DATA_WIDTH-1 downto 0);
    m_axi_spi_core_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_DATA_WIDTH/8-1 downto 0);
    m_axi_spi_core_WLAST : OUT STD_LOGIC;
    m_axi_spi_core_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ID_WIDTH-1 downto 0);
    m_axi_spi_core_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_WUSER_WIDTH-1 downto 0);
    m_axi_spi_core_ARVALID : OUT STD_LOGIC;
    m_axi_spi_core_ARREADY : IN STD_LOGIC;
    m_axi_spi_core_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ADDR_WIDTH-1 downto 0);
    m_axi_spi_core_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ID_WIDTH-1 downto 0);
    m_axi_spi_core_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_spi_core_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_spi_core_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_spi_core_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_spi_core_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_spi_core_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_spi_core_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_spi_core_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_spi_core_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ARUSER_WIDTH-1 downto 0);
    m_axi_spi_core_RVALID : IN STD_LOGIC;
    m_axi_spi_core_RREADY : OUT STD_LOGIC;
    m_axi_spi_core_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_DATA_WIDTH-1 downto 0);
    m_axi_spi_core_RLAST : IN STD_LOGIC;
    m_axi_spi_core_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ID_WIDTH-1 downto 0);
    m_axi_spi_core_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_RUSER_WIDTH-1 downto 0);
    m_axi_spi_core_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_spi_core_BVALID : IN STD_LOGIC;
    m_axi_spi_core_BREADY : OUT STD_LOGIC;
    m_axi_spi_core_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_spi_core_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_ID_WIDTH-1 downto 0);
    m_axi_spi_core_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SPI_CORE_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of AXI_SPI_DRIVER is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AXI_SPI_DRIVER,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=530,HLS_SYN_LUT=728,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111111111111110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal spi_core_blk_n_AW : STD_LOGIC;
    signal spi_core_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal spi_core_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal state_load_reg_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal spi_core_AWVALID : STD_LOGIC;
    signal spi_core_AWREADY : STD_LOGIC;
    signal spi_core_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal spi_core_WVALID : STD_LOGIC;
    signal spi_core_WREADY : STD_LOGIC;
    signal spi_core_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal spi_core_ARREADY : STD_LOGIC;
    signal spi_core_RVALID : STD_LOGIC;
    signal spi_core_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal spi_core_RLAST : STD_LOGIC;
    signal spi_core_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal spi_core_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal spi_core_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal spi_core_BVALID : STD_LOGIC;
    signal spi_core_BREADY : STD_LOGIC;
    signal spi_core_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal spi_core_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal spi_core_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_spi_core_AWREADY : STD_LOGIC;
    signal ap_block_state1_io : BOOLEAN;
    signal ap_reg_ioackin_spi_core_AWREADY : STD_LOGIC := '0';
    signal ap_block_state7 : BOOLEAN;
    signal ap_reg_ioackin_spi_core_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_spi_core_WREADY : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_332 : BOOLEAN;
    signal ap_condition_210 : BOOLEAN;

    component AXI_SPI_DRIVER_spi_core_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    AXI_SPI_DRIVER_spi_core_m_axi_U : component AXI_SPI_DRIVER_spi_core_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_SPI_CORE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_SPI_CORE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_SPI_CORE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_SPI_CORE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_SPI_CORE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_SPI_CORE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_SPI_CORE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_SPI_CORE_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_SPI_CORE_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_SPI_CORE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SPI_CORE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SPI_CORE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_spi_core_AWVALID,
        AWREADY => m_axi_spi_core_AWREADY,
        AWADDR => m_axi_spi_core_AWADDR,
        AWID => m_axi_spi_core_AWID,
        AWLEN => m_axi_spi_core_AWLEN,
        AWSIZE => m_axi_spi_core_AWSIZE,
        AWBURST => m_axi_spi_core_AWBURST,
        AWLOCK => m_axi_spi_core_AWLOCK,
        AWCACHE => m_axi_spi_core_AWCACHE,
        AWPROT => m_axi_spi_core_AWPROT,
        AWQOS => m_axi_spi_core_AWQOS,
        AWREGION => m_axi_spi_core_AWREGION,
        AWUSER => m_axi_spi_core_AWUSER,
        WVALID => m_axi_spi_core_WVALID,
        WREADY => m_axi_spi_core_WREADY,
        WDATA => m_axi_spi_core_WDATA,
        WSTRB => m_axi_spi_core_WSTRB,
        WLAST => m_axi_spi_core_WLAST,
        WID => m_axi_spi_core_WID,
        WUSER => m_axi_spi_core_WUSER,
        ARVALID => m_axi_spi_core_ARVALID,
        ARREADY => m_axi_spi_core_ARREADY,
        ARADDR => m_axi_spi_core_ARADDR,
        ARID => m_axi_spi_core_ARID,
        ARLEN => m_axi_spi_core_ARLEN,
        ARSIZE => m_axi_spi_core_ARSIZE,
        ARBURST => m_axi_spi_core_ARBURST,
        ARLOCK => m_axi_spi_core_ARLOCK,
        ARCACHE => m_axi_spi_core_ARCACHE,
        ARPROT => m_axi_spi_core_ARPROT,
        ARQOS => m_axi_spi_core_ARQOS,
        ARREGION => m_axi_spi_core_ARREGION,
        ARUSER => m_axi_spi_core_ARUSER,
        RVALID => m_axi_spi_core_RVALID,
        RREADY => m_axi_spi_core_RREADY,
        RDATA => m_axi_spi_core_RDATA,
        RLAST => m_axi_spi_core_RLAST,
        RID => m_axi_spi_core_RID,
        RUSER => m_axi_spi_core_RUSER,
        RRESP => m_axi_spi_core_RRESP,
        BVALID => m_axi_spi_core_BVALID,
        BREADY => m_axi_spi_core_BREADY,
        BRESP => m_axi_spi_core_BRESP,
        BID => m_axi_spi_core_BID,
        BUSER => m_axi_spi_core_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => spi_core_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => spi_core_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => spi_core_RDATA,
        I_RID => spi_core_RID,
        I_RUSER => spi_core_RUSER,
        I_RRESP => spi_core_RRESP,
        I_RLAST => spi_core_RLAST,
        I_AWVALID => spi_core_AWVALID,
        I_AWREADY => spi_core_AWREADY,
        I_AWADDR => spi_core_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => spi_core_WVALID,
        I_WREADY => spi_core_WREADY,
        I_WDATA => spi_core_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => spi_core_BVALID,
        I_BREADY => spi_core_BREADY,
        I_BRESP => spi_core_BRESP,
        I_BID => spi_core_BID,
        I_BUSER => spi_core_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_spi_core_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_spi_core_AWREADY <= ap_const_logic_0;
            else
                if (((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (state = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (state = ap_const_lv8_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_reg_ioackin_spi_core_AWREADY <= ap_const_logic_0;
                elsif ((((state = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (spi_core_AWREADY = ap_const_logic_1) and (ap_start = ap_const_logic_1)) or ((state = ap_const_lv8_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (spi_core_AWREADY = ap_const_logic_1) and (ap_start = ap_const_logic_1)))) then 
                    ap_reg_ioackin_spi_core_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_spi_core_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_spi_core_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_spi_core_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_sig_ioackin_spi_core_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_spi_core_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state8) and (spi_core_WREADY = ap_const_logic_1)) or ((spi_core_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_spi_core_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                state(0) <= '0';
                state(1) <= '0';
            else
                if ((ap_const_boolean_1 = ap_condition_210)) then
                    if ((state = ap_const_lv8_0)) then 
                        state(0) <= '1';
                        state(1) <= '0';
                    elsif ((state = ap_const_lv8_1)) then 
                        state(0) <= '0';
                        state(1) <= '1';
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    state_load_reg_120(1 downto 0) <= state(1 downto 0);
            end if;
        end if;
    end process;
    state(7 downto 2) <= "000000";
    state_load_reg_120(7 downto 2) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, state, ap_CS_fsm_state8, ap_CS_fsm_state7, state_load_reg_120, ap_CS_fsm_state2, spi_core_BVALID, ap_block_state1_io, ap_sig_ioackin_spi_core_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (state = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not((state = ap_const_lv8_0)) and not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and not((state = ap_const_lv8_1)) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (state = ap_const_lv8_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_spi_core_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if ((not((((spi_core_BVALID = ap_const_logic_0) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (spi_core_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_sig_ioackin_spi_core_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_io_assign_proc : process(state, ap_sig_ioackin_spi_core_AWREADY)
    begin
                ap_block_state1_io <= (((state = ap_const_lv8_0) and (ap_sig_ioackin_spi_core_AWREADY = ap_const_logic_0)) or ((state = ap_const_lv8_1) and (ap_sig_ioackin_spi_core_AWREADY = ap_const_logic_0)));
    end process;


    ap_block_state7_assign_proc : process(state_load_reg_120, spi_core_BVALID)
    begin
                ap_block_state7 <= (((spi_core_BVALID = ap_const_logic_0) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (spi_core_BVALID = ap_const_logic_0)));
    end process;


    ap_condition_210_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
                ap_condition_210 <= (not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_332_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_spi_core_AWREADY)
    begin
                ap_condition_332 <= ((ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, state_load_reg_120, spi_core_BVALID)
    begin
        if ((not((((spi_core_BVALID = ap_const_logic_0) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (spi_core_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, state_load_reg_120, spi_core_BVALID)
    begin
        if ((not((((spi_core_BVALID = ap_const_logic_0) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (spi_core_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_spi_core_AWREADY_assign_proc : process(spi_core_AWREADY, ap_reg_ioackin_spi_core_AWREADY)
    begin
        if ((ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_spi_core_AWREADY <= spi_core_AWREADY;
        else 
            ap_sig_ioackin_spi_core_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_spi_core_WREADY_assign_proc : process(spi_core_WREADY, ap_reg_ioackin_spi_core_WREADY)
    begin
        if ((ap_reg_ioackin_spi_core_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_spi_core_WREADY <= spi_core_WREADY;
        else 
            ap_sig_ioackin_spi_core_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    spi_core_AWADDR_assign_proc : process(state, ap_condition_332)
    begin
        if ((ap_const_boolean_1 = ap_condition_332)) then
            if ((state = ap_const_lv8_0)) then 
                spi_core_AWADDR <= ap_const_lv64_18(32 - 1 downto 0);
            elsif ((state = ap_const_lv8_1)) then 
                spi_core_AWADDR <= ap_const_lv64_1C(32 - 1 downto 0);
            else 
                spi_core_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            spi_core_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    spi_core_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, state, ap_reg_ioackin_spi_core_AWREADY)
    begin
        if ((((state = ap_const_lv8_0) and (ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((state = ap_const_lv8_1) and (ap_reg_ioackin_spi_core_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            spi_core_AWVALID <= ap_const_logic_1;
        else 
            spi_core_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    spi_core_BREADY_assign_proc : process(ap_CS_fsm_state7, state_load_reg_120, spi_core_BVALID)
    begin
        if (((not((((spi_core_BVALID = ap_const_logic_0) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (spi_core_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (state_load_reg_120 = ap_const_lv8_1)) or (not((((spi_core_BVALID = ap_const_logic_0) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (spi_core_BVALID = ap_const_logic_0)))) and (state_load_reg_120 = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            spi_core_BREADY <= ap_const_logic_1;
        else 
            spi_core_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    spi_core_WDATA_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state2, ap_reg_ioackin_spi_core_WREADY)
    begin
        if ((ap_reg_ioackin_spi_core_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                spi_core_WDATA <= ap_const_lv32_6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                spi_core_WDATA <= ap_const_lv32_FFFE;
            else 
                spi_core_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            spi_core_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    spi_core_WVALID_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state2, ap_reg_ioackin_spi_core_WREADY)
    begin
        if ((((ap_reg_ioackin_spi_core_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_reg_ioackin_spi_core_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            spi_core_WVALID <= ap_const_logic_1;
        else 
            spi_core_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    spi_core_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_spi_core_AWREADY, state)
    begin
        if ((((state = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((state = ap_const_lv8_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            spi_core_blk_n_AW <= m_axi_spi_core_AWREADY;
        else 
            spi_core_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    spi_core_blk_n_B_assign_proc : process(m_axi_spi_core_BVALID, ap_CS_fsm_state7, state_load_reg_120)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (state_load_reg_120 = ap_const_lv8_1)) or ((state_load_reg_120 = ap_const_lv8_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            spi_core_blk_n_B <= m_axi_spi_core_BVALID;
        else 
            spi_core_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    spi_core_blk_n_W_assign_proc : process(m_axi_spi_core_WREADY, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            spi_core_blk_n_W <= m_axi_spi_core_WREADY;
        else 
            spi_core_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

end behav;
