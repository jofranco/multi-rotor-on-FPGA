// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AXI_SPI_DRIVER,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1223,HLS_SYN_LUT=1759,HLS_VERSION=2018_2}" *)

module AXI_SPI_DRIVER (
        ap_clk,
        ap_rst_n,
        m_axi_SPI_AWVALID,
        m_axi_SPI_AWREADY,
        m_axi_SPI_AWADDR,
        m_axi_SPI_AWID,
        m_axi_SPI_AWLEN,
        m_axi_SPI_AWSIZE,
        m_axi_SPI_AWBURST,
        m_axi_SPI_AWLOCK,
        m_axi_SPI_AWCACHE,
        m_axi_SPI_AWPROT,
        m_axi_SPI_AWQOS,
        m_axi_SPI_AWREGION,
        m_axi_SPI_AWUSER,
        m_axi_SPI_WVALID,
        m_axi_SPI_WREADY,
        m_axi_SPI_WDATA,
        m_axi_SPI_WSTRB,
        m_axi_SPI_WLAST,
        m_axi_SPI_WID,
        m_axi_SPI_WUSER,
        m_axi_SPI_ARVALID,
        m_axi_SPI_ARREADY,
        m_axi_SPI_ARADDR,
        m_axi_SPI_ARID,
        m_axi_SPI_ARLEN,
        m_axi_SPI_ARSIZE,
        m_axi_SPI_ARBURST,
        m_axi_SPI_ARLOCK,
        m_axi_SPI_ARCACHE,
        m_axi_SPI_ARPROT,
        m_axi_SPI_ARQOS,
        m_axi_SPI_ARREGION,
        m_axi_SPI_ARUSER,
        m_axi_SPI_RVALID,
        m_axi_SPI_RREADY,
        m_axi_SPI_RDATA,
        m_axi_SPI_RLAST,
        m_axi_SPI_RID,
        m_axi_SPI_RUSER,
        m_axi_SPI_RRESP,
        m_axi_SPI_BVALID,
        m_axi_SPI_BREADY,
        m_axi_SPI_BRESP,
        m_axi_SPI_BID,
        m_axi_SPI_BUSER,
        m_axi_TEST_AWVALID,
        m_axi_TEST_AWREADY,
        m_axi_TEST_AWADDR,
        m_axi_TEST_AWID,
        m_axi_TEST_AWLEN,
        m_axi_TEST_AWSIZE,
        m_axi_TEST_AWBURST,
        m_axi_TEST_AWLOCK,
        m_axi_TEST_AWCACHE,
        m_axi_TEST_AWPROT,
        m_axi_TEST_AWQOS,
        m_axi_TEST_AWREGION,
        m_axi_TEST_AWUSER,
        m_axi_TEST_WVALID,
        m_axi_TEST_WREADY,
        m_axi_TEST_WDATA,
        m_axi_TEST_WSTRB,
        m_axi_TEST_WLAST,
        m_axi_TEST_WID,
        m_axi_TEST_WUSER,
        m_axi_TEST_ARVALID,
        m_axi_TEST_ARREADY,
        m_axi_TEST_ARADDR,
        m_axi_TEST_ARID,
        m_axi_TEST_ARLEN,
        m_axi_TEST_ARSIZE,
        m_axi_TEST_ARBURST,
        m_axi_TEST_ARLOCK,
        m_axi_TEST_ARCACHE,
        m_axi_TEST_ARPROT,
        m_axi_TEST_ARQOS,
        m_axi_TEST_ARREGION,
        m_axi_TEST_ARUSER,
        m_axi_TEST_RVALID,
        m_axi_TEST_RREADY,
        m_axi_TEST_RDATA,
        m_axi_TEST_RLAST,
        m_axi_TEST_RID,
        m_axi_TEST_RUSER,
        m_axi_TEST_RRESP,
        m_axi_TEST_BVALID,
        m_axi_TEST_BREADY,
        m_axi_TEST_BRESP,
        m_axi_TEST_BID,
        m_axi_TEST_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_DATA_AWVALID,
        s_axi_DATA_AWREADY,
        s_axi_DATA_AWADDR,
        s_axi_DATA_WVALID,
        s_axi_DATA_WREADY,
        s_axi_DATA_WDATA,
        s_axi_DATA_WSTRB,
        s_axi_DATA_ARVALID,
        s_axi_DATA_ARREADY,
        s_axi_DATA_ARADDR,
        s_axi_DATA_RVALID,
        s_axi_DATA_RREADY,
        s_axi_DATA_RDATA,
        s_axi_DATA_RRESP,
        s_axi_DATA_BVALID,
        s_axi_DATA_BREADY,
        s_axi_DATA_BRESP
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_DATA_DATA_WIDTH = 32;
parameter    C_S_AXI_DATA_ADDR_WIDTH = 14;
parameter    C_M_AXI_SPI_ID_WIDTH = 1;
parameter    C_M_AXI_SPI_ADDR_WIDTH = 32;
parameter    C_M_AXI_SPI_DATA_WIDTH = 32;
parameter    C_M_AXI_SPI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_WUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_RUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_BUSER_WIDTH = 1;
parameter    C_M_AXI_SPI_TARGET_ADDR = 0;
parameter    C_M_AXI_SPI_USER_VALUE = 0;
parameter    C_M_AXI_SPI_PROT_VALUE = 0;
parameter    C_M_AXI_SPI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_TEST_ID_WIDTH = 1;
parameter    C_M_AXI_TEST_ADDR_WIDTH = 32;
parameter    C_M_AXI_TEST_DATA_WIDTH = 32;
parameter    C_M_AXI_TEST_AWUSER_WIDTH = 1;
parameter    C_M_AXI_TEST_ARUSER_WIDTH = 1;
parameter    C_M_AXI_TEST_WUSER_WIDTH = 1;
parameter    C_M_AXI_TEST_RUSER_WIDTH = 1;
parameter    C_M_AXI_TEST_BUSER_WIDTH = 1;
parameter    C_M_AXI_TEST_TARGET_ADDR = 0;
parameter    C_M_AXI_TEST_USER_VALUE = 0;
parameter    C_M_AXI_TEST_PROT_VALUE = 0;
parameter    C_M_AXI_TEST_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_SPI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_TEST_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_SPI_AWVALID;
input   m_axi_SPI_AWREADY;
output  [C_M_AXI_SPI_ADDR_WIDTH - 1:0] m_axi_SPI_AWADDR;
output  [C_M_AXI_SPI_ID_WIDTH - 1:0] m_axi_SPI_AWID;
output  [7:0] m_axi_SPI_AWLEN;
output  [2:0] m_axi_SPI_AWSIZE;
output  [1:0] m_axi_SPI_AWBURST;
output  [1:0] m_axi_SPI_AWLOCK;
output  [3:0] m_axi_SPI_AWCACHE;
output  [2:0] m_axi_SPI_AWPROT;
output  [3:0] m_axi_SPI_AWQOS;
output  [3:0] m_axi_SPI_AWREGION;
output  [C_M_AXI_SPI_AWUSER_WIDTH - 1:0] m_axi_SPI_AWUSER;
output   m_axi_SPI_WVALID;
input   m_axi_SPI_WREADY;
output  [C_M_AXI_SPI_DATA_WIDTH - 1:0] m_axi_SPI_WDATA;
output  [C_M_AXI_SPI_WSTRB_WIDTH - 1:0] m_axi_SPI_WSTRB;
output   m_axi_SPI_WLAST;
output  [C_M_AXI_SPI_ID_WIDTH - 1:0] m_axi_SPI_WID;
output  [C_M_AXI_SPI_WUSER_WIDTH - 1:0] m_axi_SPI_WUSER;
output   m_axi_SPI_ARVALID;
input   m_axi_SPI_ARREADY;
output  [C_M_AXI_SPI_ADDR_WIDTH - 1:0] m_axi_SPI_ARADDR;
output  [C_M_AXI_SPI_ID_WIDTH - 1:0] m_axi_SPI_ARID;
output  [7:0] m_axi_SPI_ARLEN;
output  [2:0] m_axi_SPI_ARSIZE;
output  [1:0] m_axi_SPI_ARBURST;
output  [1:0] m_axi_SPI_ARLOCK;
output  [3:0] m_axi_SPI_ARCACHE;
output  [2:0] m_axi_SPI_ARPROT;
output  [3:0] m_axi_SPI_ARQOS;
output  [3:0] m_axi_SPI_ARREGION;
output  [C_M_AXI_SPI_ARUSER_WIDTH - 1:0] m_axi_SPI_ARUSER;
input   m_axi_SPI_RVALID;
output   m_axi_SPI_RREADY;
input  [C_M_AXI_SPI_DATA_WIDTH - 1:0] m_axi_SPI_RDATA;
input   m_axi_SPI_RLAST;
input  [C_M_AXI_SPI_ID_WIDTH - 1:0] m_axi_SPI_RID;
input  [C_M_AXI_SPI_RUSER_WIDTH - 1:0] m_axi_SPI_RUSER;
input  [1:0] m_axi_SPI_RRESP;
input   m_axi_SPI_BVALID;
output   m_axi_SPI_BREADY;
input  [1:0] m_axi_SPI_BRESP;
input  [C_M_AXI_SPI_ID_WIDTH - 1:0] m_axi_SPI_BID;
input  [C_M_AXI_SPI_BUSER_WIDTH - 1:0] m_axi_SPI_BUSER;
output   m_axi_TEST_AWVALID;
input   m_axi_TEST_AWREADY;
output  [C_M_AXI_TEST_ADDR_WIDTH - 1:0] m_axi_TEST_AWADDR;
output  [C_M_AXI_TEST_ID_WIDTH - 1:0] m_axi_TEST_AWID;
output  [7:0] m_axi_TEST_AWLEN;
output  [2:0] m_axi_TEST_AWSIZE;
output  [1:0] m_axi_TEST_AWBURST;
output  [1:0] m_axi_TEST_AWLOCK;
output  [3:0] m_axi_TEST_AWCACHE;
output  [2:0] m_axi_TEST_AWPROT;
output  [3:0] m_axi_TEST_AWQOS;
output  [3:0] m_axi_TEST_AWREGION;
output  [C_M_AXI_TEST_AWUSER_WIDTH - 1:0] m_axi_TEST_AWUSER;
output   m_axi_TEST_WVALID;
input   m_axi_TEST_WREADY;
output  [C_M_AXI_TEST_DATA_WIDTH - 1:0] m_axi_TEST_WDATA;
output  [C_M_AXI_TEST_WSTRB_WIDTH - 1:0] m_axi_TEST_WSTRB;
output   m_axi_TEST_WLAST;
output  [C_M_AXI_TEST_ID_WIDTH - 1:0] m_axi_TEST_WID;
output  [C_M_AXI_TEST_WUSER_WIDTH - 1:0] m_axi_TEST_WUSER;
output   m_axi_TEST_ARVALID;
input   m_axi_TEST_ARREADY;
output  [C_M_AXI_TEST_ADDR_WIDTH - 1:0] m_axi_TEST_ARADDR;
output  [C_M_AXI_TEST_ID_WIDTH - 1:0] m_axi_TEST_ARID;
output  [7:0] m_axi_TEST_ARLEN;
output  [2:0] m_axi_TEST_ARSIZE;
output  [1:0] m_axi_TEST_ARBURST;
output  [1:0] m_axi_TEST_ARLOCK;
output  [3:0] m_axi_TEST_ARCACHE;
output  [2:0] m_axi_TEST_ARPROT;
output  [3:0] m_axi_TEST_ARQOS;
output  [3:0] m_axi_TEST_ARREGION;
output  [C_M_AXI_TEST_ARUSER_WIDTH - 1:0] m_axi_TEST_ARUSER;
input   m_axi_TEST_RVALID;
output   m_axi_TEST_RREADY;
input  [C_M_AXI_TEST_DATA_WIDTH - 1:0] m_axi_TEST_RDATA;
input   m_axi_TEST_RLAST;
input  [C_M_AXI_TEST_ID_WIDTH - 1:0] m_axi_TEST_RID;
input  [C_M_AXI_TEST_RUSER_WIDTH - 1:0] m_axi_TEST_RUSER;
input  [1:0] m_axi_TEST_RRESP;
input   m_axi_TEST_BVALID;
output   m_axi_TEST_BREADY;
input  [1:0] m_axi_TEST_BRESP;
input  [C_M_AXI_TEST_ID_WIDTH - 1:0] m_axi_TEST_BID;
input  [C_M_AXI_TEST_BUSER_WIDTH - 1:0] m_axi_TEST_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_DATA_AWVALID;
output   s_axi_DATA_AWREADY;
input  [C_S_AXI_DATA_ADDR_WIDTH - 1:0] s_axi_DATA_AWADDR;
input   s_axi_DATA_WVALID;
output   s_axi_DATA_WREADY;
input  [C_S_AXI_DATA_DATA_WIDTH - 1:0] s_axi_DATA_WDATA;
input  [C_S_AXI_DATA_WSTRB_WIDTH - 1:0] s_axi_DATA_WSTRB;
input   s_axi_DATA_ARVALID;
output   s_axi_DATA_ARREADY;
input  [C_S_AXI_DATA_ADDR_WIDTH - 1:0] s_axi_DATA_ARADDR;
output   s_axi_DATA_RVALID;
input   s_axi_DATA_RREADY;
output  [C_S_AXI_DATA_DATA_WIDTH - 1:0] s_axi_DATA_RDATA;
output  [1:0] s_axi_DATA_RRESP;
output   s_axi_DATA_BVALID;
input   s_axi_DATA_BREADY;
output  [1:0] s_axi_DATA_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [11:0] pmod_data_address0;
reg    pmod_data_ce0;
reg    pmod_data_we0;
reg   [15:0] pmod_data_d0;
reg   [3:0] state;
reg    SPI_blk_n_AW;
reg    SPI_blk_n_W;
wire    ap_CS_fsm_state8;
reg    SPI_blk_n_B;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
reg    SPI_blk_n_AR;
wire    ap_CS_fsm_state20;
reg    SPI_blk_n_R;
wire    ap_CS_fsm_state27;
reg    TEST_blk_n_AW;
reg    TEST_blk_n_W;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    TEST_blk_n_B;
wire    ap_CS_fsm_state28;
reg   [3:0] state_load_reg_410;
reg    SPI_AWVALID;
wire    SPI_AWREADY;
reg   [31:0] SPI_AWADDR;
reg    SPI_WVALID;
wire    SPI_WREADY;
reg   [31:0] SPI_WDATA;
reg    SPI_ARVALID;
wire    SPI_ARREADY;
wire   [31:0] SPI_ARADDR;
wire    SPI_RVALID;
reg    SPI_RREADY;
wire   [31:0] SPI_RDATA;
wire    SPI_RLAST;
wire   [0:0] SPI_RID;
wire   [0:0] SPI_RUSER;
wire   [1:0] SPI_RRESP;
wire    SPI_BVALID;
reg    SPI_BREADY;
wire   [1:0] SPI_BRESP;
wire   [0:0] SPI_BID;
wire   [0:0] SPI_BUSER;
reg    TEST_AWVALID;
wire    TEST_AWREADY;
reg    TEST_WVALID;
wire    TEST_WREADY;
reg   [15:0] TEST_WDATA;
wire    TEST_ARREADY;
wire    TEST_RVALID;
wire   [15:0] TEST_RDATA;
wire    TEST_RLAST;
wire   [0:0] TEST_RID;
wire   [0:0] TEST_RUSER;
wire   [1:0] TEST_RRESP;
wire    TEST_BVALID;
reg    TEST_BREADY;
wire   [1:0] TEST_BRESP;
wire   [0:0] TEST_BID;
wire   [0:0] TEST_BUSER;
reg    ap_sig_ioackin_SPI_AWREADY;
reg    ap_sig_ioackin_TEST_AWREADY;
reg    ap_predicate_op48_writereq_state1;
reg    ap_block_state1_io;
reg    ap_sig_ioackin_TEST_WREADY;
reg    ap_sig_ioackin_SPI_ARREADY;
reg    ap_block_state20_io;
wire   [15:0] tmp_fu_401_p1;
reg   [15:0] tmp_reg_438;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg    ap_reg_ioackin_SPI_AWREADY;
reg    ap_reg_ioackin_TEST_AWREADY;
reg    ap_predicate_op107_writeresp_state28;
reg    ap_block_state28;
reg    ap_reg_ioackin_SPI_WREADY;
reg    ap_sig_ioackin_SPI_WREADY;
reg    ap_reg_ioackin_TEST_WREADY;
reg    ap_block_state14_io;
reg    ap_reg_ioackin_SPI_ARREADY;
reg   [27:0] ap_NS_fsm;
reg    ap_condition_803;
reg    ap_condition_503;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 state = 4'd0;
#0 ap_reg_ioackin_SPI_AWREADY = 1'b0;
#0 ap_reg_ioackin_TEST_AWREADY = 1'b0;
#0 ap_reg_ioackin_SPI_WREADY = 1'b0;
#0 ap_reg_ioackin_TEST_WREADY = 1'b0;
#0 ap_reg_ioackin_SPI_ARREADY = 1'b0;
end

AXI_SPI_DRIVER_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
AXI_SPI_DRIVER_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

AXI_SPI_DRIVER_DATA_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DATA_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DATA_DATA_WIDTH ))
AXI_SPI_DRIVER_DATA_s_axi_U(
    .AWVALID(s_axi_DATA_AWVALID),
    .AWREADY(s_axi_DATA_AWREADY),
    .AWADDR(s_axi_DATA_AWADDR),
    .WVALID(s_axi_DATA_WVALID),
    .WREADY(s_axi_DATA_WREADY),
    .WDATA(s_axi_DATA_WDATA),
    .WSTRB(s_axi_DATA_WSTRB),
    .ARVALID(s_axi_DATA_ARVALID),
    .ARREADY(s_axi_DATA_ARREADY),
    .ARADDR(s_axi_DATA_ARADDR),
    .RVALID(s_axi_DATA_RVALID),
    .RREADY(s_axi_DATA_RREADY),
    .RDATA(s_axi_DATA_RDATA),
    .RRESP(s_axi_DATA_RRESP),
    .BVALID(s_axi_DATA_BVALID),
    .BREADY(s_axi_DATA_BREADY),
    .BRESP(s_axi_DATA_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .pmod_data_address0(pmod_data_address0),
    .pmod_data_ce0(pmod_data_ce0),
    .pmod_data_we0(pmod_data_we0),
    .pmod_data_d0(pmod_data_d0)
);

AXI_SPI_DRIVER_SPI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SPI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SPI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SPI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SPI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SPI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SPI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SPI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SPI_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_SPI_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_SPI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SPI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SPI_CACHE_VALUE ))
AXI_SPI_DRIVER_SPI_m_axi_U(
    .AWVALID(m_axi_SPI_AWVALID),
    .AWREADY(m_axi_SPI_AWREADY),
    .AWADDR(m_axi_SPI_AWADDR),
    .AWID(m_axi_SPI_AWID),
    .AWLEN(m_axi_SPI_AWLEN),
    .AWSIZE(m_axi_SPI_AWSIZE),
    .AWBURST(m_axi_SPI_AWBURST),
    .AWLOCK(m_axi_SPI_AWLOCK),
    .AWCACHE(m_axi_SPI_AWCACHE),
    .AWPROT(m_axi_SPI_AWPROT),
    .AWQOS(m_axi_SPI_AWQOS),
    .AWREGION(m_axi_SPI_AWREGION),
    .AWUSER(m_axi_SPI_AWUSER),
    .WVALID(m_axi_SPI_WVALID),
    .WREADY(m_axi_SPI_WREADY),
    .WDATA(m_axi_SPI_WDATA),
    .WSTRB(m_axi_SPI_WSTRB),
    .WLAST(m_axi_SPI_WLAST),
    .WID(m_axi_SPI_WID),
    .WUSER(m_axi_SPI_WUSER),
    .ARVALID(m_axi_SPI_ARVALID),
    .ARREADY(m_axi_SPI_ARREADY),
    .ARADDR(m_axi_SPI_ARADDR),
    .ARID(m_axi_SPI_ARID),
    .ARLEN(m_axi_SPI_ARLEN),
    .ARSIZE(m_axi_SPI_ARSIZE),
    .ARBURST(m_axi_SPI_ARBURST),
    .ARLOCK(m_axi_SPI_ARLOCK),
    .ARCACHE(m_axi_SPI_ARCACHE),
    .ARPROT(m_axi_SPI_ARPROT),
    .ARQOS(m_axi_SPI_ARQOS),
    .ARREGION(m_axi_SPI_ARREGION),
    .ARUSER(m_axi_SPI_ARUSER),
    .RVALID(m_axi_SPI_RVALID),
    .RREADY(m_axi_SPI_RREADY),
    .RDATA(m_axi_SPI_RDATA),
    .RLAST(m_axi_SPI_RLAST),
    .RID(m_axi_SPI_RID),
    .RUSER(m_axi_SPI_RUSER),
    .RRESP(m_axi_SPI_RRESP),
    .BVALID(m_axi_SPI_BVALID),
    .BREADY(m_axi_SPI_BREADY),
    .BRESP(m_axi_SPI_BRESP),
    .BID(m_axi_SPI_BID),
    .BUSER(m_axi_SPI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(SPI_ARVALID),
    .I_ARREADY(SPI_ARREADY),
    .I_ARADDR(SPI_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(SPI_RVALID),
    .I_RREADY(SPI_RREADY),
    .I_RDATA(SPI_RDATA),
    .I_RID(SPI_RID),
    .I_RUSER(SPI_RUSER),
    .I_RRESP(SPI_RRESP),
    .I_RLAST(SPI_RLAST),
    .I_AWVALID(SPI_AWVALID),
    .I_AWREADY(SPI_AWREADY),
    .I_AWADDR(SPI_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(SPI_WVALID),
    .I_WREADY(SPI_WREADY),
    .I_WDATA(SPI_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(SPI_BVALID),
    .I_BREADY(SPI_BREADY),
    .I_BRESP(SPI_BRESP),
    .I_BID(SPI_BID),
    .I_BUSER(SPI_BUSER)
);

AXI_SPI_DRIVER_TEST_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_TEST_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_TEST_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_TEST_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_TEST_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_TEST_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_TEST_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_TEST_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_TEST_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_TEST_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_TEST_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_TEST_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_TEST_CACHE_VALUE ))
AXI_SPI_DRIVER_TEST_m_axi_U(
    .AWVALID(m_axi_TEST_AWVALID),
    .AWREADY(m_axi_TEST_AWREADY),
    .AWADDR(m_axi_TEST_AWADDR),
    .AWID(m_axi_TEST_AWID),
    .AWLEN(m_axi_TEST_AWLEN),
    .AWSIZE(m_axi_TEST_AWSIZE),
    .AWBURST(m_axi_TEST_AWBURST),
    .AWLOCK(m_axi_TEST_AWLOCK),
    .AWCACHE(m_axi_TEST_AWCACHE),
    .AWPROT(m_axi_TEST_AWPROT),
    .AWQOS(m_axi_TEST_AWQOS),
    .AWREGION(m_axi_TEST_AWREGION),
    .AWUSER(m_axi_TEST_AWUSER),
    .WVALID(m_axi_TEST_WVALID),
    .WREADY(m_axi_TEST_WREADY),
    .WDATA(m_axi_TEST_WDATA),
    .WSTRB(m_axi_TEST_WSTRB),
    .WLAST(m_axi_TEST_WLAST),
    .WID(m_axi_TEST_WID),
    .WUSER(m_axi_TEST_WUSER),
    .ARVALID(m_axi_TEST_ARVALID),
    .ARREADY(m_axi_TEST_ARREADY),
    .ARADDR(m_axi_TEST_ARADDR),
    .ARID(m_axi_TEST_ARID),
    .ARLEN(m_axi_TEST_ARLEN),
    .ARSIZE(m_axi_TEST_ARSIZE),
    .ARBURST(m_axi_TEST_ARBURST),
    .ARLOCK(m_axi_TEST_ARLOCK),
    .ARCACHE(m_axi_TEST_ARCACHE),
    .ARPROT(m_axi_TEST_ARPROT),
    .ARQOS(m_axi_TEST_ARQOS),
    .ARREGION(m_axi_TEST_ARREGION),
    .ARUSER(m_axi_TEST_ARUSER),
    .RVALID(m_axi_TEST_RVALID),
    .RREADY(m_axi_TEST_RREADY),
    .RDATA(m_axi_TEST_RDATA),
    .RLAST(m_axi_TEST_RLAST),
    .RID(m_axi_TEST_RID),
    .RUSER(m_axi_TEST_RUSER),
    .RRESP(m_axi_TEST_RRESP),
    .BVALID(m_axi_TEST_BVALID),
    .BREADY(m_axi_TEST_BREADY),
    .BRESP(m_axi_TEST_BRESP),
    .BID(m_axi_TEST_BID),
    .BUSER(m_axi_TEST_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(TEST_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(TEST_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(TEST_RDATA),
    .I_RID(TEST_RID),
    .I_RUSER(TEST_RUSER),
    .I_RRESP(TEST_RRESP),
    .I_RLAST(TEST_RLAST),
    .I_AWVALID(TEST_AWVALID),
    .I_AWREADY(TEST_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd8),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(TEST_WVALID),
    .I_WREADY(TEST_WREADY),
    .I_WDATA(TEST_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(TEST_BVALID),
    .I_BREADY(TEST_BREADY),
    .I_BRESP(TEST_BRESP),
    .I_BID(TEST_BID),
    .I_BUSER(TEST_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_SPI_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            if ((1'b0 == ap_block_state20_io)) begin
                ap_reg_ioackin_SPI_ARREADY <= 1'b0;
            end else if ((1'b1 == SPI_ARREADY)) begin
                ap_reg_ioackin_SPI_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_SPI_AWREADY <= 1'b0;
    end else begin
        if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (ap_predicate_op48_writereq_state1 == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd1)) | (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd0)))) begin
            ap_reg_ioackin_SPI_AWREADY <= 1'b0;
        end else if ((((ap_predicate_op48_writereq_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == SPI_AWREADY)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == SPI_AWREADY) & (state == 4'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == SPI_AWREADY) & (state == 4'd0)))) begin
            ap_reg_ioackin_SPI_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_SPI_WREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)) | ((ap_sig_ioackin_SPI_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_sig_ioackin_SPI_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_SPI_WREADY <= 1'b0;
        end else if ((((1'b1 == SPI_WREADY) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == SPI_WREADY) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == SPI_WREADY) & (1'b1 == ap_CS_fsm_state8)))) begin
            ap_reg_ioackin_SPI_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_TEST_AWREADY <= 1'b0;
    end else begin
        if (((ap_predicate_op48_writereq_state1 == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            if (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0))) begin
                ap_reg_ioackin_TEST_AWREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == TEST_AWREADY))) begin
                ap_reg_ioackin_TEST_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_TEST_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20)) | (~((ap_sig_ioackin_TEST_WREADY == 1'b0) | (1'b0 == SPI_BVALID)) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)))) begin
            ap_reg_ioackin_TEST_WREADY <= 1'b0;
        end else if ((((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == SPI_BVALID) & (1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == TEST_WREADY) & (1'b1 == ap_CS_fsm_state14)))) begin
            ap_reg_ioackin_TEST_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                state[0] <= 1'b0;
        state[1] <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_503)) begin
            if ((state == 4'd0)) begin
                                state[0] <= 1'b1;
                state[1] <= 1'b0;
            end else if ((state == 4'd1)) begin
                                state[0] <= 1'b0;
                state[1] <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_load_reg_410[1 : 0] <= state[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == SPI_RVALID) & (1'b1 == ap_CS_fsm_state27))) begin
        tmp_reg_438 <= tmp_fu_401_p1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_SPI_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
        SPI_ARVALID = 1'b1;
    end else begin
        SPI_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_803)) begin
        if ((ap_predicate_op48_writereq_state1 == 1'b1)) begin
            SPI_AWADDR = 64'd26;
        end else if ((state == 4'd0)) begin
            SPI_AWADDR = 64'd24;
        end else if ((state == 4'd1)) begin
            SPI_AWADDR = 64'd28;
        end else begin
            SPI_AWADDR = 'bx;
        end
    end else begin
        SPI_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op48_writereq_state1 == 1'b1) & (ap_start == 1'b1) & (ap_reg_ioackin_SPI_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (ap_reg_ioackin_SPI_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd1)) | ((ap_start == 1'b1) & (ap_reg_ioackin_SPI_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd0)))) begin
        SPI_AWVALID = 1'b1;
    end else begin
        SPI_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_sig_ioackin_TEST_WREADY == 1'b0) | (1'b0 == SPI_BVALID)) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == SPI_BVALID) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == SPI_BVALID) & (1'b1 == ap_CS_fsm_state13)))) begin
        SPI_BREADY = 1'b1;
    end else begin
        SPI_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == SPI_RVALID) & (1'b1 == ap_CS_fsm_state27))) begin
        SPI_RREADY = 1'b1;
    end else begin
        SPI_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_SPI_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            SPI_WDATA = 32'd3735928559;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            SPI_WDATA = 32'd6;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            SPI_WDATA = 32'd65534;
        end else begin
            SPI_WDATA = 'bx;
        end
    end else begin
        SPI_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_SPI_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((ap_reg_ioackin_SPI_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_reg_ioackin_SPI_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        SPI_WVALID = 1'b1;
    end else begin
        SPI_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        SPI_blk_n_AR = m_axi_SPI_ARREADY;
    end else begin
        SPI_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((~(state == 4'd1) & ~(state == 4'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd0)))) begin
        SPI_blk_n_AW = m_axi_SPI_AWREADY;
    end else begin
        SPI_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13))) begin
        SPI_blk_n_B = m_axi_SPI_BVALID;
    end else begin
        SPI_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        SPI_blk_n_R = m_axi_SPI_RVALID;
    end else begin
        SPI_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        SPI_blk_n_W = m_axi_SPI_WREADY;
    end else begin
        SPI_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op48_writereq_state1 == 1'b1) & (ap_start == 1'b1) & (ap_reg_ioackin_TEST_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        TEST_AWVALID = 1'b1;
    end else begin
        TEST_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID)) & (ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        TEST_BREADY = 1'b1;
    end else begin
        TEST_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_TEST_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            TEST_WDATA = 16'd34952;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            TEST_WDATA = 16'd30583;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            TEST_WDATA = 16'd26214;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            TEST_WDATA = 16'd21845;
        end else if (((1'b1 == SPI_BVALID) & (1'b1 == ap_CS_fsm_state19))) begin
            TEST_WDATA = 16'd17476;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            TEST_WDATA = 16'd13107;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            TEST_WDATA = 16'd8738;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            TEST_WDATA = 16'd4369;
        end else begin
            TEST_WDATA = 'bx;
        end
    end else begin
        TEST_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22)) | ((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18)) | ((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == SPI_BVALID) & (ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((ap_reg_ioackin_TEST_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14)))) begin
        TEST_WVALID = 1'b1;
    end else begin
        TEST_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(state == 4'd1) & ~(state == 4'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        TEST_blk_n_AW = m_axi_TEST_AWREADY;
    end else begin
        TEST_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((~(state_load_reg_410 == 4'd1) & ~(state_load_reg_410 == 4'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        TEST_blk_n_B = m_axi_TEST_BVALID;
    end else begin
        TEST_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        TEST_blk_n_W = m_axi_TEST_WREADY;
    end else begin
        TEST_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID)) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID)) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_SPI_ARREADY == 1'b0)) begin
        ap_sig_ioackin_SPI_ARREADY = SPI_ARREADY;
    end else begin
        ap_sig_ioackin_SPI_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_SPI_AWREADY == 1'b0)) begin
        ap_sig_ioackin_SPI_AWREADY = SPI_AWREADY;
    end else begin
        ap_sig_ioackin_SPI_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_SPI_WREADY == 1'b0)) begin
        ap_sig_ioackin_SPI_WREADY = SPI_WREADY;
    end else begin
        ap_sig_ioackin_SPI_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_TEST_AWREADY == 1'b0)) begin
        ap_sig_ioackin_TEST_AWREADY = TEST_AWREADY;
    end else begin
        ap_sig_ioackin_TEST_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_TEST_WREADY == 1'b0)) begin
        ap_sig_ioackin_TEST_WREADY = TEST_WREADY;
    end else begin
        ap_sig_ioackin_TEST_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        pmod_data_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        pmod_data_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        pmod_data_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        pmod_data_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        pmod_data_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        pmod_data_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        pmod_data_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        pmod_data_address0 = 64'd1;
    end else begin
        pmod_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (~((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID)) & (1'b1 == ap_CS_fsm_state28)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == SPI_RVALID) & (1'b1 == ap_CS_fsm_state27)))) begin
        pmod_data_ce0 = 1'b1;
    end else begin
        pmod_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        pmod_data_d0 = tmp_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        pmod_data_d0 = 16'd34952;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        pmod_data_d0 = 16'd30583;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        pmod_data_d0 = 16'd26214;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        pmod_data_d0 = 16'd21845;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        pmod_data_d0 = 16'd17476;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        pmod_data_d0 = 16'd13107;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        pmod_data_d0 = 16'd8738;
    end else begin
        pmod_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (~((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID)) & (ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == SPI_RVALID) & (1'b1 == ap_CS_fsm_state27)))) begin
        pmod_data_we0 = 1'b1;
    end else begin
        pmod_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & ~(state == 4'd1) & ~(state == 4'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (state == 4'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_SPI_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == SPI_BVALID) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_SPI_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == SPI_BVALID) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((ap_sig_ioackin_TEST_WREADY == 1'b0) | (1'b0 == SPI_BVALID)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_io) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_sig_ioackin_TEST_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == SPI_RVALID) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SPI_ARADDR = 64'd27;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state14_io = ((ap_sig_ioackin_SPI_WREADY == 1'b0) | (ap_sig_ioackin_TEST_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = (((ap_predicate_op48_writereq_state1 == 1'b1) & (ap_sig_ioackin_TEST_AWREADY == 1'b0)) | ((ap_predicate_op48_writereq_state1 == 1'b1) & (ap_sig_ioackin_SPI_AWREADY == 1'b0)) | ((ap_sig_ioackin_SPI_AWREADY == 1'b0) & (state == 4'd1)) | ((ap_sig_ioackin_SPI_AWREADY == 1'b0) & (state == 4'd0)));
end

always @ (*) begin
    ap_block_state20_io = ((ap_sig_ioackin_SPI_ARREADY == 1'b0) | (ap_sig_ioackin_TEST_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state28 = ((ap_predicate_op107_writeresp_state28 == 1'b1) & (1'b0 == TEST_BVALID));
end

always @ (*) begin
    ap_condition_503 = (~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_condition_803 = ((ap_start == 1'b1) & (ap_reg_ioackin_SPI_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_predicate_op107_writeresp_state28 = (~(state_load_reg_410 == 4'd1) & ~(state_load_reg_410 == 4'd0));
end

always @ (*) begin
    ap_predicate_op48_writereq_state1 = (~(state == 4'd1) & ~(state == 4'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign tmp_fu_401_p1 = SPI_RDATA[15:0];

always @ (posedge ap_clk) begin
    state[3:2] <= 2'b00;
    state_load_reg_410[3:2] <= 2'b00;
end

endmodule //AXI_SPI_DRIVER
