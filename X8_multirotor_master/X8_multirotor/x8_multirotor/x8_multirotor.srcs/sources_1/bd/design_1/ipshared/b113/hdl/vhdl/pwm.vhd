-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pwm is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST2_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST2_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_AWVALID : IN STD_LOGIC;
    s_axi_TEST_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_WVALID : IN STD_LOGIC;
    s_axi_TEST_WREADY : OUT STD_LOGIC;
    s_axi_TEST_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_ARVALID : IN STD_LOGIC;
    s_axi_TEST_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_RVALID : OUT STD_LOGIC;
    s_axi_TEST_RREADY : IN STD_LOGIC;
    s_axi_TEST_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_BVALID : OUT STD_LOGIC;
    s_axi_TEST_BREADY : IN STD_LOGIC;
    s_axi_TEST_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST2_AWVALID : IN STD_LOGIC;
    s_axi_TEST2_AWREADY : OUT STD_LOGIC;
    s_axi_TEST2_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST2_ADDR_WIDTH-1 downto 0);
    s_axi_TEST2_WVALID : IN STD_LOGIC;
    s_axi_TEST2_WREADY : OUT STD_LOGIC;
    s_axi_TEST2_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST2_DATA_WIDTH-1 downto 0);
    s_axi_TEST2_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST2_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST2_ARVALID : IN STD_LOGIC;
    s_axi_TEST2_ARREADY : OUT STD_LOGIC;
    s_axi_TEST2_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST2_ADDR_WIDTH-1 downto 0);
    s_axi_TEST2_RVALID : OUT STD_LOGIC;
    s_axi_TEST2_RREADY : IN STD_LOGIC;
    s_axi_TEST2_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST2_DATA_WIDTH-1 downto 0);
    s_axi_TEST2_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST2_BVALID : OUT STD_LOGIC;
    s_axi_TEST2_BREADY : IN STD_LOGIC;
    s_axi_TEST2_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of pwm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pwm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=11,HLS_SYN_TPT=11,HLS_SYN_MEM=18,HLS_SYN_DSP=8,HLS_SYN_FF=996,HLS_SYN_LUT=2016,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv32_333 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal motorCmd_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal motorCmd_V_ce0 : STD_LOGIC;
    signal motorCmd_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_duty : STD_LOGIC_VECTOR (31 downto 0);
    signal max_duty : STD_LOGIC_VECTOR (31 downto 0);
    signal period : STD_LOGIC_VECTOR (31 downto 0);
    signal test_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal test_ce0 : STD_LOGIC;
    signal test_we0 : STD_LOGIC;
    signal test_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal test2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal test2_V_ce0 : STD_LOGIC;
    signal test2_V_we0 : STD_LOGIC;
    signal test2_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal out_p_V : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Val2_2_reg_1398 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_1408 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_1413 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_load_reg_1419 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1432 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_4_fu_556_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_4_reg_1444 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_4_7_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_reg_1459 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_7_fu_1339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_7_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_576_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_72_reg_1475 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_5_cast_fu_591_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_cast_reg_1485 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_1_6_fu_1346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_6_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_595_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_70_reg_1501 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1506 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_7_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_7_reg_1518 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal p_Val2_1_5_fu_1352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_5_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_666_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_68_reg_1533 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_6_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_6_reg_1538 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal p_Val2_1_4_fu_1358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_4_reg_1548 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_732_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_66_reg_1553 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_5_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_5_reg_1558 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal p_Val2_1_3_fu_1364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_3_reg_1568 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_798_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_64_reg_1573 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_4_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_4_reg_1578 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal p_Val2_1_2_fu_1370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_2_reg_1588 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_864_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_62_reg_1593 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_3_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_3_reg_1598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal p_Val2_1_fu_1376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_reg_1608 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_930_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_58_reg_1613 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_2_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_2_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_1_fu_1382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_1_reg_1623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal tmp_60_fu_1053_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_60_reg_1628 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_0_trunc_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_0_trunc_reg_1638 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_trunc_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_trunc_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_trunc_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_trunc_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_trunc_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_trunc_reg_1653 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_4_trunc_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_4_trunc_reg_1658 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_5_trunc_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_5_trunc_reg_1663 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_6_trunc_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_6_trunc_reg_1668 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_7_trunc_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_7_trunc_reg_1673 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal tmp_15_fu_500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_7_fu_1308_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_3_fu_1326_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_4_6_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_fu_1304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_991_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_440_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_fu_484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_fu_524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_532_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_532_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_fu_514_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_542_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_83_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_fu_548_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_584_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_7_fu_598_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_7_fu_601_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_52_fu_620_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_7_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_71_fu_607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_6_fu_669_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_6_fu_672_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_48_fu_690_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_6_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_700_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_706_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_fu_714_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_5_fu_735_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_5_fu_738_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_44_fu_756_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_5_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_766_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_fu_743_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_772_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_780_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_4_fu_801_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_4_fu_804_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_40_fu_822_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_4_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_809_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_838_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_846_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_3_fu_867_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_3_fu_870_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_36_fu_888_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_3_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_898_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_875_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_912_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_2_fu_933_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_2_fu_936_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_32_fu_954_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_2_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_964_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_941_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_970_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_978_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_1000_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_fu_1003_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_1021_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_1008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1037_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1045_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_1_fu_1061_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_1_fu_1064_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_28_fu_1082_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_1_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1092_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_1069_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1098_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_fu_1118_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_s_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1106_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_75_fu_1142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_1_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_1_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_1166_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_2_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_1189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_3_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_1212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_4_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_1235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_5_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_1258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_6_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_1281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_7_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_7_fu_1339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_6_fu_1346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_5_fu_1352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_4_fu_1358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_3_fu_1364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_2_fu_1370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_1376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_1_fu_1382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal p_Val2_1_7_fu_1339_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component pwm_mul_mul_16s_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pwm_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        motorCmd_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        motorCmd_V_ce0 : IN STD_LOGIC;
        motorCmd_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        min_duty : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_duty : OUT STD_LOGIC_VECTOR (31 downto 0);
        period : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pwm_TEST_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        test_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        test_ce0 : IN STD_LOGIC;
        test_we0 : IN STD_LOGIC;
        test_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pwm_TEST2_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        test2_V_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        test2_V_ce0 : IN STD_LOGIC;
        test2_V_we0 : IN STD_LOGIC;
        test2_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pwm_CTRL_s_axi_U : component pwm_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        motorCmd_V_address0 => motorCmd_V_address0,
        motorCmd_V_ce0 => motorCmd_V_ce0,
        motorCmd_V_q0 => motorCmd_V_q0,
        min_duty => min_duty,
        max_duty => max_duty,
        period => period);

    pwm_TEST_s_axi_U : component pwm_TEST_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_AWVALID,
        AWREADY => s_axi_TEST_AWREADY,
        AWADDR => s_axi_TEST_AWADDR,
        WVALID => s_axi_TEST_WVALID,
        WREADY => s_axi_TEST_WREADY,
        WDATA => s_axi_TEST_WDATA,
        WSTRB => s_axi_TEST_WSTRB,
        ARVALID => s_axi_TEST_ARVALID,
        ARREADY => s_axi_TEST_ARREADY,
        ARADDR => s_axi_TEST_ARADDR,
        RVALID => s_axi_TEST_RVALID,
        RREADY => s_axi_TEST_RREADY,
        RDATA => s_axi_TEST_RDATA,
        RRESP => s_axi_TEST_RRESP,
        BVALID => s_axi_TEST_BVALID,
        BREADY => s_axi_TEST_BREADY,
        BRESP => s_axi_TEST_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        test_address0 => test_address0,
        test_ce0 => test_ce0,
        test_we0 => test_we0,
        test_d0 => test_d0);

    pwm_TEST2_s_axi_U : component pwm_TEST2_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST2_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST2_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST2_AWVALID,
        AWREADY => s_axi_TEST2_AWREADY,
        AWADDR => s_axi_TEST2_AWADDR,
        WVALID => s_axi_TEST2_WVALID,
        WREADY => s_axi_TEST2_WREADY,
        WDATA => s_axi_TEST2_WDATA,
        WSTRB => s_axi_TEST2_WSTRB,
        ARVALID => s_axi_TEST2_ARVALID,
        ARREADY => s_axi_TEST2_ARREADY,
        ARADDR => s_axi_TEST2_ARADDR,
        RVALID => s_axi_TEST2_RVALID,
        RREADY => s_axi_TEST2_RREADY,
        RDATA => s_axi_TEST2_RDATA,
        RRESP => s_axi_TEST2_RRESP,
        BVALID => s_axi_TEST2_BVALID,
        BREADY => s_axi_TEST2_BREADY,
        BRESP => s_axi_TEST2_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        test2_V_address0 => test2_V_address0,
        test2_V_ce0 => test2_V_ce0,
        test2_V_we0 => test2_V_we0,
        test2_V_d0 => test2_V_d0);

    pwm_mul_mul_16s_1bkb_U1 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_7_fu_1339_p1,
        dout => p_Val2_1_7_fu_1339_p2);

    pwm_mul_mul_16s_1bkb_U2 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_6_fu_1346_p1,
        dout => p_Val2_1_6_fu_1346_p2);

    pwm_mul_mul_16s_1bkb_U3 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_5_fu_1352_p1,
        dout => p_Val2_1_5_fu_1352_p2);

    pwm_mul_mul_16s_1bkb_U4 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_4_fu_1358_p1,
        dout => p_Val2_1_4_fu_1358_p2);

    pwm_mul_mul_16s_1bkb_U5 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_3_fu_1364_p1,
        dout => p_Val2_1_3_fu_1364_p2);

    pwm_mul_mul_16s_1bkb_U6 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_2_fu_1370_p1,
        dout => p_Val2_1_2_fu_1370_p2);

    pwm_mul_mul_16s_1bkb_U7 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_fu_1376_p1,
        dout => p_Val2_1_fu_1376_p2);

    pwm_mul_mul_16s_1bkb_U8 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => motorCmd_V_q0,
        din1 => p_Val2_1_1_fu_1382_p1,
        dout => p_Val2_1_1_fu_1382_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    OP1_V_reg_1459(15 downto 0) <= OP1_V_fu_573_p1(15 downto 0);
                p_Val2_1_7_reg_1470 <= p_Val2_1_7_fu_1339_p2;
                tmp_4_7_reg_1454 <= tmp_4_7_fu_569_p1;
                tmp_72_reg_1475 <= tmp_72_fu_576_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                acc <= tmp_15_fu_500_p3;
                p_Val2_2_reg_1398 <= motorCmd_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                acc_load_reg_1419 <= acc;
                icmp_reg_1403 <= icmp_fu_450_p2;
                p_4_reg_1444 <= p_4_fu_556_p3;
                p_Val2_s_reg_1413 <= p_Val2_s_fu_466_p1;
                tmp_12_reg_1408 <= tmp_12_fu_462_p1;
                tmp_24_reg_1432 <= tmp_24_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_p_V <= p_Result_4_7_fu_1308_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                p_Repl2_0_trunc_reg_1638 <= p_Repl2_0_trunc_fu_1132_p2;
                p_Repl2_1_trunc_reg_1643 <= p_Repl2_1_trunc_fu_1161_p2;
                p_Repl2_2_trunc_reg_1648 <= p_Repl2_2_trunc_fu_1184_p2;
                p_Repl2_3_trunc_reg_1653 <= p_Repl2_3_trunc_fu_1207_p2;
                p_Repl2_4_trunc_reg_1658 <= p_Repl2_4_trunc_fu_1230_p2;
                p_Repl2_5_trunc_reg_1663 <= p_Repl2_5_trunc_fu_1253_p2;
                p_Repl2_6_trunc_reg_1668 <= p_Repl2_6_trunc_fu_1276_p2;
                p_Repl2_7_trunc_reg_1673 <= p_Repl2_7_trunc_fu_1299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                p_Val2_1_1_reg_1623 <= p_Val2_1_1_fu_1382_p2;
                tmp_19_reg_1633 <= tmp_19_fu_1056_p2;
                tmp_60_reg_1628 <= tmp_60_fu_1053_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                p_Val2_1_2_reg_1588 <= p_Val2_1_2_fu_1370_p2;
                tmp_19_3_reg_1598 <= tmp_19_3_fu_920_p2;
                tmp_62_reg_1593 <= tmp_62_fu_864_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                p_Val2_1_3_reg_1568 <= p_Val2_1_3_fu_1364_p2;
                tmp_19_4_reg_1578 <= tmp_19_4_fu_854_p2;
                tmp_64_reg_1573 <= tmp_64_fu_798_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                p_Val2_1_4_reg_1548 <= p_Val2_1_4_fu_1358_p2;
                tmp_19_5_reg_1558 <= tmp_19_5_fu_788_p2;
                tmp_66_reg_1553 <= tmp_66_fu_732_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                p_Val2_1_5_reg_1528 <= p_Val2_1_5_fu_1352_p2;
                tmp_19_6_reg_1538 <= tmp_19_6_fu_722_p2;
                tmp_68_reg_1533 <= tmp_68_fu_666_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                p_Val2_1_6_reg_1496 <= p_Val2_1_6_fu_1346_p2;
                tmp_16_reg_1506 <= tmp_16_fu_652_p2;
                tmp_19_7_reg_1518 <= tmp_19_7_fu_656_p2;
                    tmp_5_cast_reg_1485(28 downto 13) <= tmp_5_cast_fu_591_p1(28 downto 13);
                tmp_70_reg_1501 <= tmp_70_fu_595_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                p_Val2_1_reg_1608 <= p_Val2_1_fu_1376_p2;
                tmp_19_2_reg_1618 <= tmp_19_2_fu_986_p2;
                tmp_58_reg_1613 <= tmp_58_fu_930_p1;
            end if;
        end if;
    end process;
    OP1_V_reg_1459(31 downto 16) <= "0000000000000000";
    tmp_5_cast_reg_1485(12 downto 0) <= "0000000000000";
    tmp_5_cast_reg_1485(32 downto 29) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage10_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    OP1_V_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_1408),32));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_fu_450_p2 <= "1" when (signed(tmp_6_fu_440_p4) > signed(ap_const_lv4_0)) else "0";

    motorCmd_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                motorCmd_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                motorCmd_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                motorCmd_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                motorCmd_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                motorCmd_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                motorCmd_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                motorCmd_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                motorCmd_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                motorCmd_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            else 
                motorCmd_V_address0 <= "XXXX";
            end if;
        else 
            motorCmd_V_address0 <= "XXXX";
        end if; 
    end process;


    motorCmd_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            motorCmd_V_ce0 <= ap_const_logic_1;
        else 
            motorCmd_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V <= p_3_fu_1326_p3;
    p_2_fu_548_p3 <= 
        ret_V_fu_514_p4 when (tmp_22_fu_536_p2(0) = '1') else 
        ret_V_1_fu_542_p2;
    p_3_fu_1326_p3 <= 
        p_Result_4_7_fu_1308_p9 when (icmp_reg_1403(0) = '1') else 
        ap_const_lv8_0;
    p_4_fu_556_p3 <= 
        p_2_fu_548_p3 when (tmp_83_fu_524_p3(0) = '1') else 
        ret_V_fu_514_p4;
    p_Repl2_0_trunc_fu_1132_p2 <= (tmp_24_reg_1432 and tmp_1_fu_1127_p2);
    p_Repl2_1_trunc_fu_1161_p2 <= (tmp_3_fu_1156_p2 and tmp_24_reg_1432);
    p_Repl2_2_trunc_fu_1184_p2 <= (tmp_7_fu_1179_p2 and tmp_24_reg_1432);
    p_Repl2_3_trunc_fu_1207_p2 <= (tmp_8_fu_1202_p2 and tmp_24_reg_1432);
    p_Repl2_4_trunc_fu_1230_p2 <= (tmp_24_reg_1432 and tmp_10_fu_1225_p2);
    p_Repl2_5_trunc_fu_1253_p2 <= (tmp_24_reg_1432 and tmp_17_fu_1248_p2);
    p_Repl2_6_trunc_fu_1276_p2 <= (tmp_24_reg_1432 and tmp_18_fu_1271_p2);
    p_Repl2_7_trunc_fu_1299_p2 <= (tmp_24_reg_1432 and tmp_20_fu_1294_p2);
    p_Result_4_7_fu_1308_p9 <= (((((((p_Repl2_7_trunc_reg_1673 & p_Repl2_6_trunc_reg_1668) & p_Repl2_5_trunc_reg_1663) & p_Repl2_4_trunc_reg_1658) & p_Repl2_3_trunc_reg_1653) & p_Repl2_2_trunc_reg_1648) & p_Repl2_1_trunc_reg_1643) & p_Repl2_0_trunc_reg_1638);
    p_Val2_1_1_fu_1382_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_1_2_fu_1370_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_1_3_fu_1364_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_1_4_fu_1358_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_1_5_fu_1352_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_1_6_fu_1346_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_1_7_fu_1339_p1 <= p_Val2_1_7_fu_1339_p10(16 - 1 downto 0);
    p_Val2_1_7_fu_1339_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_1408),32));
    p_Val2_1_fu_1376_p1 <= OP1_V_reg_1459(16 - 1 downto 0);
    p_Val2_s_fu_466_p1 <= min_duty(16 - 1 downto 0);
    r_V_1_fu_1064_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_1_fu_1061_p1));
    r_V_2_fu_936_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_2_fu_933_p1));
    r_V_3_fu_870_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_3_fu_867_p1));
    r_V_4_fu_804_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_4_fu_801_p1));
    r_V_5_fu_738_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_5_fu_735_p1));
    r_V_6_fu_672_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_6_fu_669_p1));
    r_V_7_fu_601_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_591_p1) + unsigned(tmp_9_7_fu_598_p1));
    r_V_fu_1003_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1485) + unsigned(tmp_9_fu_1000_p1));
    ret_V_1_fu_542_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ret_V_fu_514_p4));
    ret_V_fu_514_p1 <= motorCmd_V_q0;
    ret_V_fu_514_p4 <= ret_V_fu_514_p1(15 downto 13);

    test2_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test2_V_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test2_V_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test2_V_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test2_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            test2_V_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            test2_V_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            test2_V_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            test2_V_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            test2_V_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            test2_V_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            test2_V_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        else 
            test2_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    test2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            test2_V_ce0 <= ap_const_logic_1;
        else 
            test2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test2_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_4_7_reg_1454, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, tmp_4_6_fu_579_p1, tmp_4_5_fu_661_p1, tmp_4_4_fu_727_p1, tmp_4_3_fu_793_p1, tmp_4_2_fu_859_p1, tmp_4_fu_925_p1, tmp_4_1_fu_995_p1, tmp_4_8_fu_1304_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test2_V_d0 <= tmp_4_8_fu_1304_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test2_V_d0 <= tmp_4_7_reg_1454;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test2_V_d0 <= tmp_4_1_fu_995_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test2_V_d0 <= tmp_4_fu_925_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            test2_V_d0 <= tmp_4_2_fu_859_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            test2_V_d0 <= tmp_4_3_fu_793_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            test2_V_d0 <= tmp_4_4_fu_727_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            test2_V_d0 <= tmp_4_5_fu_661_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            test2_V_d0 <= tmp_4_6_fu_579_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            test2_V_d0 <= ap_const_lv32_333;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            test2_V_d0 <= ap_const_lv32_1000;
        else 
            test2_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test2_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            test2_V_we0 <= ap_const_logic_1;
        else 
            test2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    test_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            test_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            test_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            test_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            test_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            test_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            test_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            test_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        else 
            test_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    test_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            test_ce0 <= ap_const_logic_1;
        else 
            test_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, tmp_25_fu_564_p1, tmp_23_fu_991_p1, tmp_21_fu_1334_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_d0 <= tmp_21_fu_1334_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            test_d0 <= tmp_23_fu_991_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            test_d0 <= ap_const_lv32_45;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            test_d0 <= ap_const_lv32_0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            test_d0 <= ap_const_lv32_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            test_d0 <= tmp_25_fu_564_p1;
        else 
            test_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            test_we0 <= ap_const_logic_1;
        else 
            test_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1225_p2 <= (tmp_22_4_fu_1220_p2 or tmp_16_reg_1506);
    tmp_11_1_fu_1077_p2 <= "1" when (tmp_60_reg_1628 = ap_const_lv13_0) else "0";
    tmp_11_2_fu_949_p2 <= "1" when (tmp_62_reg_1593 = ap_const_lv13_0) else "0";
    tmp_11_3_fu_883_p2 <= "1" when (tmp_64_reg_1573 = ap_const_lv13_0) else "0";
    tmp_11_4_fu_817_p2 <= "1" when (tmp_66_reg_1553 = ap_const_lv13_0) else "0";
    tmp_11_5_fu_751_p2 <= "1" when (tmp_68_reg_1533 = ap_const_lv13_0) else "0";
    tmp_11_6_fu_685_p2 <= "1" when (tmp_70_reg_1501 = ap_const_lv13_0) else "0";
    tmp_11_7_fu_615_p2 <= "1" when (tmp_72_reg_1475 = ap_const_lv13_0) else "0";
    tmp_11_fu_1031_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_fu_1021_p4));
    tmp_12_fu_462_p1 <= tmp_2_fu_456_p2(16 - 1 downto 0);
    tmp_13_fu_488_p2 <= "1" when (unsigned(acc) < unsigned(tmp_82_fu_484_p1)) else "0";
    tmp_14_fu_494_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(acc));
    tmp_15_fu_500_p3 <= 
        tmp_14_fu_494_p2 when (tmp_13_fu_488_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_16_fu_652_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(p_Val2_s_reg_1413)) else "0";
    tmp_17_fu_1248_p2 <= (tmp_22_5_fu_1243_p2 or tmp_16_reg_1506);
    tmp_18_fu_1271_p2 <= (tmp_22_6_fu_1266_p2 or tmp_16_reg_1506);
    tmp_19_1_fu_1137_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_31_fu_1106_p3)) else "0";
    tmp_19_2_fu_986_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_35_fu_978_p3)) else "0";
    tmp_19_3_fu_920_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_39_fu_912_p3)) else "0";
    tmp_19_4_fu_854_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_43_fu_846_p3)) else "0";
    tmp_19_5_fu_788_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_47_fu_780_p3)) else "0";
    tmp_19_6_fu_722_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_51_fu_714_p3)) else "0";
    tmp_19_7_fu_656_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_55_fu_644_p3)) else "0";
    tmp_19_fu_1056_p2 <= "1" when (unsigned(acc_load_reg_1419) < unsigned(tmp_27_fu_1045_p3)) else "0";
    tmp_1_fu_1127_p2 <= (tmp_22_s_fu_1122_p2 or tmp_16_reg_1506);
    tmp_20_fu_1294_p2 <= (tmp_22_7_fu_1289_p2 or tmp_16_reg_1506);
    tmp_21_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_3_fu_1326_p3),32));
    tmp_22_1_fu_1150_p2 <= (tmp_75_fu_1142_p3 and tmp_19_1_fu_1137_p2);
    tmp_22_2_fu_1174_p2 <= (tmp_76_fu_1166_p3 and tmp_19_2_reg_1618);
    tmp_22_3_fu_1197_p2 <= (tmp_77_fu_1189_p3 and tmp_19_3_reg_1598);
    tmp_22_4_fu_1220_p2 <= (tmp_78_fu_1212_p3 and tmp_19_4_reg_1578);
    tmp_22_5_fu_1243_p2 <= (tmp_79_fu_1235_p3 and tmp_19_5_reg_1558);
    tmp_22_6_fu_1266_p2 <= (tmp_80_fu_1258_p3 and tmp_19_6_reg_1538);
    tmp_22_7_fu_1289_p2 <= (tmp_81_fu_1281_p3 and tmp_19_7_reg_1518);
    tmp_22_fu_536_p2 <= "1" when (tmp_84_fu_532_p1 = ap_const_lv13_0) else "0";
    tmp_22_s_fu_1122_p2 <= (tmp_74_fu_1118_p1 and tmp_19_reg_1633);
        tmp_23_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_4_reg_1444),32));

    tmp_24_fu_478_p2 <= "1" when (unsigned(acc) < unsigned(tmp_73_fu_470_p1)) else "0";
    tmp_25_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_fu_450_p2),32));
    tmp_26_fu_1037_p3 <= 
        tmp_fu_1021_p4 when (tmp_s_fu_1016_p2(0) = '1') else 
        tmp_11_fu_1031_p2;
    tmp_27_fu_1045_p3 <= 
        tmp_26_fu_1037_p3 when (tmp_57_fu_1008_p3(0) = '1') else 
        tmp_fu_1021_p4;
    tmp_28_fu_1082_p4 <= r_V_1_fu_1064_p2(28 downto 13);
    tmp_29_fu_1092_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_28_fu_1082_p4));
    tmp_2_fu_456_p2 <= std_logic_vector(unsigned(max_duty) - unsigned(min_duty));
    tmp_30_fu_1098_p3 <= 
        tmp_28_fu_1082_p4 when (tmp_11_1_fu_1077_p2(0) = '1') else 
        tmp_29_fu_1092_p2;
    tmp_31_fu_1106_p3 <= 
        tmp_30_fu_1098_p3 when (tmp_59_fu_1069_p3(0) = '1') else 
        tmp_28_fu_1082_p4;
    tmp_32_fu_954_p4 <= r_V_2_fu_936_p2(28 downto 13);
    tmp_33_fu_964_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_32_fu_954_p4));
    tmp_34_fu_970_p3 <= 
        tmp_32_fu_954_p4 when (tmp_11_2_fu_949_p2(0) = '1') else 
        tmp_33_fu_964_p2;
    tmp_35_fu_978_p3 <= 
        tmp_34_fu_970_p3 when (tmp_61_fu_941_p3(0) = '1') else 
        tmp_32_fu_954_p4;
    tmp_36_fu_888_p4 <= r_V_3_fu_870_p2(28 downto 13);
    tmp_37_fu_898_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_36_fu_888_p4));
    tmp_38_fu_904_p3 <= 
        tmp_36_fu_888_p4 when (tmp_11_3_fu_883_p2(0) = '1') else 
        tmp_37_fu_898_p2;
    tmp_39_fu_912_p3 <= 
        tmp_38_fu_904_p3 when (tmp_63_fu_875_p3(0) = '1') else 
        tmp_36_fu_888_p4;
    tmp_3_fu_1156_p2 <= (tmp_22_1_fu_1150_p2 or tmp_16_reg_1506);
    tmp_40_fu_822_p4 <= r_V_4_fu_804_p2(28 downto 13);
    tmp_41_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_40_fu_822_p4));
    tmp_42_fu_838_p3 <= 
        tmp_40_fu_822_p4 when (tmp_11_4_fu_817_p2(0) = '1') else 
        tmp_41_fu_832_p2;
    tmp_43_fu_846_p3 <= 
        tmp_42_fu_838_p3 when (tmp_65_fu_809_p3(0) = '1') else 
        tmp_40_fu_822_p4;
    tmp_44_fu_756_p4 <= r_V_5_fu_738_p2(28 downto 13);
    tmp_45_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_44_fu_756_p4));
    tmp_46_fu_772_p3 <= 
        tmp_44_fu_756_p4 when (tmp_11_5_fu_751_p2(0) = '1') else 
        tmp_45_fu_766_p2;
    tmp_47_fu_780_p3 <= 
        tmp_46_fu_772_p3 when (tmp_67_fu_743_p3(0) = '1') else 
        tmp_44_fu_756_p4;
    tmp_48_fu_690_p4 <= r_V_6_fu_672_p2(28 downto 13);
    tmp_49_fu_700_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_48_fu_690_p4));
        tmp_4_1_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_2_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_3_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_4_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_5_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_6_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_7_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

        tmp_4_8_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_1398),32));

        tmp_4_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(motorCmd_V_q0),32));

    tmp_50_fu_706_p3 <= 
        tmp_48_fu_690_p4 when (tmp_11_6_fu_685_p2(0) = '1') else 
        tmp_49_fu_700_p2;
    tmp_51_fu_714_p3 <= 
        tmp_50_fu_706_p3 when (tmp_69_fu_677_p3(0) = '1') else 
        tmp_48_fu_690_p4;
    tmp_52_fu_620_p4 <= r_V_7_fu_601_p2(28 downto 13);
    tmp_53_fu_630_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_52_fu_620_p4));
    tmp_54_fu_636_p3 <= 
        tmp_52_fu_620_p4 when (tmp_11_7_fu_615_p2(0) = '1') else 
        tmp_53_fu_630_p2;
    tmp_55_fu_644_p3 <= 
        tmp_54_fu_636_p3 when (tmp_71_fu_607_p3(0) = '1') else 
        tmp_52_fu_620_p4;
    tmp_57_fu_1008_p3 <= r_V_fu_1003_p2(32 downto 32);
    tmp_58_fu_930_p1 <= p_Val2_1_fu_1376_p2(13 - 1 downto 0);
    tmp_59_fu_1069_p3 <= r_V_1_fu_1064_p2(32 downto 32);
    tmp_5_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_584_p3),33));
    tmp_5_fu_584_p3 <= (p_Val2_s_reg_1413 & ap_const_lv13_0);
    tmp_60_fu_1053_p1 <= p_Val2_1_1_fu_1382_p2(13 - 1 downto 0);
    tmp_61_fu_941_p3 <= r_V_2_fu_936_p2(32 downto 32);
    tmp_62_fu_864_p1 <= p_Val2_1_2_fu_1370_p2(13 - 1 downto 0);
    tmp_63_fu_875_p3 <= r_V_3_fu_870_p2(32 downto 32);
    tmp_64_fu_798_p1 <= p_Val2_1_3_fu_1364_p2(13 - 1 downto 0);
    tmp_65_fu_809_p3 <= r_V_4_fu_804_p2(32 downto 32);
    tmp_66_fu_732_p1 <= p_Val2_1_4_fu_1358_p2(13 - 1 downto 0);
    tmp_67_fu_743_p3 <= r_V_5_fu_738_p2(32 downto 32);
    tmp_68_fu_666_p1 <= p_Val2_1_5_fu_1352_p2(13 - 1 downto 0);
    tmp_69_fu_677_p3 <= r_V_6_fu_672_p2(32 downto 32);
    tmp_6_fu_440_p1 <= motorCmd_V_q0;
    tmp_6_fu_440_p4 <= tmp_6_fu_440_p1(15 downto 12);
    tmp_70_fu_595_p1 <= p_Val2_1_6_fu_1346_p2(13 - 1 downto 0);
    tmp_71_fu_607_p3 <= r_V_7_fu_601_p2(32 downto 32);
    tmp_72_fu_576_p1 <= p_Val2_1_7_fu_1339_p2(13 - 1 downto 0);
    tmp_73_fu_470_p1 <= max_duty(16 - 1 downto 0);
    tmp_74_fu_1118_p1 <= out_p_V(1 - 1 downto 0);
    tmp_75_fu_1142_p3 <= out_p_V(1 downto 1);
    tmp_76_fu_1166_p3 <= out_p_V(2 downto 2);
    tmp_77_fu_1189_p3 <= out_p_V(3 downto 3);
    tmp_78_fu_1212_p3 <= out_p_V(4 downto 4);
    tmp_79_fu_1235_p3 <= out_p_V(5 downto 5);
    tmp_7_fu_1179_p2 <= (tmp_22_2_fu_1174_p2 or tmp_16_reg_1506);
    tmp_80_fu_1258_p3 <= out_p_V(6 downto 6);
    tmp_81_fu_1281_p3 <= out_p_V(7 downto 7);
    tmp_82_fu_484_p1 <= period(16 - 1 downto 0);
    tmp_83_fu_524_p1 <= motorCmd_V_q0;
    tmp_83_fu_524_p3 <= tmp_83_fu_524_p1(15 downto 15);
    tmp_84_fu_532_p0 <= motorCmd_V_q0;
    tmp_84_fu_532_p1 <= tmp_84_fu_532_p0(13 - 1 downto 0);
    tmp_8_fu_1202_p2 <= (tmp_22_3_fu_1197_p2 or tmp_16_reg_1506);
        tmp_9_1_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_1_reg_1623),33));

        tmp_9_2_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_2_reg_1588),33));

        tmp_9_3_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_3_reg_1568),33));

        tmp_9_4_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_4_reg_1548),33));

        tmp_9_5_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_5_reg_1528),33));

        tmp_9_6_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_6_reg_1496),33));

        tmp_9_7_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_7_reg_1470),33));

        tmp_9_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_1608),33));

    tmp_fu_1021_p4 <= r_V_fu_1003_p2(28 downto 13);
    tmp_s_fu_1016_p2 <= "1" when (tmp_58_reg_1613 = ap_const_lv13_0) else "0";
end behav;
