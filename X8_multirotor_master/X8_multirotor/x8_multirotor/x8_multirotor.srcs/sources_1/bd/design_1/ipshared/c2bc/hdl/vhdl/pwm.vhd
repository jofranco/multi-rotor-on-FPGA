-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pwm is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_AWVALID : IN STD_LOGIC;
    s_axi_TEST_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_WVALID : IN STD_LOGIC;
    s_axi_TEST_WREADY : OUT STD_LOGIC;
    s_axi_TEST_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_ARVALID : IN STD_LOGIC;
    s_axi_TEST_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_RVALID : OUT STD_LOGIC;
    s_axi_TEST_RREADY : IN STD_LOGIC;
    s_axi_TEST_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_BVALID : OUT STD_LOGIC;
    s_axi_TEST_BREADY : IN STD_LOGIC;
    s_axi_TEST_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of pwm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pwm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=16,HLS_SYN_TPT=17,HLS_SYN_MEM=10,HLS_SYN_DSP=8,HLS_SYN_FF=871,HLS_SYN_LUT=2032,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal min_duty : STD_LOGIC_VECTOR (31 downto 0);
    signal max_duty : STD_LOGIC_VECTOR (31 downto 0);
    signal period : STD_LOGIC_VECTOR (31 downto 0);
    signal m_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_V_ce0 : STD_LOGIC;
    signal m_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal test_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal test_ce0 : STD_LOGIC;
    signal test_we0 : STD_LOGIC;
    signal test_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal out_p_V : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    signal tmp_7_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1654 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_1659 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_load_reg_1665 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1678 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP1_V_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_s_fu_1600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_1701 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_491_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_73_reg_1706 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_11_fu_520_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_11_reg_1716 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_cast_fu_538_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_cast_reg_1721 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_1_fu_1607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_reg_1732 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_597_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_75_reg_1737 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1747 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1759 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_12_fu_635_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_12_reg_1764 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_2_fu_1613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_1769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_77_fu_700_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_77_reg_1774 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_1_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_1_reg_1784 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_13_fu_734_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_13_reg_1789 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_6_fu_1619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_6_reg_1794 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_79_fu_799_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_79_reg_1799 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_2_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_2_reg_1809 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_14_fu_833_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_14_reg_1814 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_3_fu_1625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_reg_1819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_81_fu_898_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_81_reg_1824 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_3_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_3_reg_1834 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_15_fu_932_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_15_reg_1839 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_4_fu_1631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_1844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_83_fu_997_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_83_reg_1849 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_4_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_4_reg_1859 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_16_fu_1035_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_16_reg_1864 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_5_fu_1637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_1869 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_85_fu_1100_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_85_reg_1874 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_5_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_5_reg_1884 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_17_fu_1138_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_17_reg_1889 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_6_fu_1643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_1899 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_1203_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_87_reg_1904 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_6_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_6_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_18_fu_1241_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_18_reg_1914 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1919 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Repl2_0_trunc_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_0_trunc_reg_1925 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_trunc_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_trunc_reg_1930 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_trunc_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_trunc_reg_1935 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_trunc_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_trunc_reg_1940 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_4_trunc_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_4_trunc_reg_1945 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_5_trunc_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_5_trunc_reg_1950 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_6_trunc_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_6_trunc_reg_1955 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_7_trunc_fu_1503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_7_trunc_reg_1960 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_reg_1965 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_10_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_7_fu_1547_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_1576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_1580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_1584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_1588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_1592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_410_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_97_fu_454_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_100_fu_494_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_101_fu_502_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_101_fu_502_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_100_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_3_fu_512_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_531_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_528_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_fu_542_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_fu_561_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_72_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_577_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_585_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_102_fu_609_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_103_fu_617_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_103_fu_617_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_4_fu_627_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_1_fu_643_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_1_fu_646_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_43_fu_664_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_1_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_674_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_680_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_688_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_104_fu_708_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_105_fu_716_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_105_fu_716_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_fu_726_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_2_fu_742_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_2_fu_745_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_47_fu_763_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_2_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_773_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_76_fu_750_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_779_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_787_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_fu_807_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_fu_815_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_fu_815_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_31_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_6_fu_825_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_3_fu_841_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_3_fu_844_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_51_fu_862_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_3_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_872_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_fu_849_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_878_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_886_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_fu_906_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_914_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_914_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_906_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_7_fu_924_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_4_fu_940_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_4_fu_943_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_55_fu_961_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_4_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_971_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_977_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_985_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_1009_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_fu_1017_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_fu_1017_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_35_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_1009_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_8_fu_1027_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_5_fu_1043_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_5_fu_1046_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_59_fu_1064_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_5_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1074_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_fu_1051_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_1080_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_fu_1088_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_fu_1112_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_fu_1120_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_fu_1120_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_1112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_9_fu_1130_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_6_fu_1146_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_6_fu_1149_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_63_fu_1167_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_6_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1177_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_1154_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1183_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_1191_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_114_fu_1215_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_fu_1223_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_fu_1223_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_1215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_10_fu_1233_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1249_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_7_fu_1265_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_7_fu_1268_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_67_fu_1286_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_7_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_1296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_86_fu_1273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_1302_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_89_fu_1322_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_s_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_1341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_1_fu_1349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_1364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_2_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_1387_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_3_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_4_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_5_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_1456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_6_fu_1464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_1310_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_96_fu_1484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_7_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_7_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_1516_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_1520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_1508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_fu_1526_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_1_fu_1534_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_1600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_1607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_1613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_6_fu_1619_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_fu_1625_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_1631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_1637_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_1643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_fu_1600_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component pwm_mul_mul_16s_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pwm_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        min_duty : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_duty : OUT STD_LOGIC_VECTOR (31 downto 0);
        period : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        m_V_ce0 : IN STD_LOGIC;
        m_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pwm_TEST_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        test_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        test_ce0 : IN STD_LOGIC;
        test_we0 : IN STD_LOGIC;
        test_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pwm_CTRL_s_axi_U : component pwm_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        min_duty => min_duty,
        max_duty => max_duty,
        period => period,
        m_V_address0 => m_V_address0,
        m_V_ce0 => m_V_ce0,
        m_V_q0 => m_V_q0);

    pwm_TEST_s_axi_U : component pwm_TEST_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_AWVALID,
        AWREADY => s_axi_TEST_AWREADY,
        AWADDR => s_axi_TEST_AWADDR,
        WVALID => s_axi_TEST_WVALID,
        WREADY => s_axi_TEST_WREADY,
        WDATA => s_axi_TEST_WDATA,
        WSTRB => s_axi_TEST_WSTRB,
        ARVALID => s_axi_TEST_ARVALID,
        ARREADY => s_axi_TEST_ARREADY,
        ARADDR => s_axi_TEST_ARADDR,
        RVALID => s_axi_TEST_RVALID,
        RREADY => s_axi_TEST_RREADY,
        RDATA => s_axi_TEST_RDATA,
        RRESP => s_axi_TEST_RRESP,
        BVALID => s_axi_TEST_BVALID,
        BREADY => s_axi_TEST_BREADY,
        BRESP => s_axi_TEST_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        test_address0 => test_address0,
        test_ce0 => test_ce0,
        test_we0 => test_we0,
        test_d0 => test_d0);

    pwm_mul_mul_16s_1bkb_U1 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_s_fu_1600_p1,
        dout => p_Val2_s_fu_1600_p2);

    pwm_mul_mul_16s_1bkb_U2 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_1_fu_1607_p1,
        dout => p_Val2_1_fu_1607_p2);

    pwm_mul_mul_16s_1bkb_U3 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_2_fu_1613_p1,
        dout => p_Val2_2_fu_1613_p2);

    pwm_mul_mul_16s_1bkb_U4 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_s_6_fu_1619_p1,
        dout => p_Val2_s_6_fu_1619_p2);

    pwm_mul_mul_16s_1bkb_U5 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_3_fu_1625_p1,
        dout => p_Val2_3_fu_1625_p2);

    pwm_mul_mul_16s_1bkb_U6 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_4_fu_1631_p1,
        dout => p_Val2_4_fu_1631_p2);

    pwm_mul_mul_16s_1bkb_U7 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_5_fu_1637_p1,
        dout => p_Val2_5_fu_1637_p2);

    pwm_mul_mul_16s_1bkb_U8 : component pwm_mul_mul_16s_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => m_V_q0,
        din1 => p_Val2_6_fu_1643_p1,
        dout => p_Val2_6_fu_1643_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    OP1_V_reg_1690(15 downto 0) <= OP1_V_fu_484_p1(15 downto 0);
                p_11_reg_1716 <= p_11_fu_520_p3;
                p_Val2_s_reg_1701 <= p_Val2_s_fu_1600_p2;
                tmp_73_reg_1706 <= tmp_73_fu_491_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                acc <= tmp_10_fu_470_p3;
                acc_load_reg_1665 <= acc;
                p_Val2_7_reg_1659 <= p_Val2_7_fu_436_p1;
                tmp_20_reg_1678 <= tmp_20_fu_448_p2;
                tmp_7_reg_1654 <= tmp_7_fu_432_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_reg_1919 <= icmp_fu_1259_p2;
                p_Repl2_0_trunc_reg_1925 <= p_Repl2_0_trunc_fu_1336_p2;
                p_Repl2_1_trunc_reg_1930 <= p_Repl2_1_trunc_fu_1359_p2;
                p_Repl2_2_trunc_reg_1935 <= p_Repl2_2_trunc_fu_1382_p2;
                p_Repl2_3_trunc_reg_1940 <= p_Repl2_3_trunc_fu_1405_p2;
                p_Repl2_4_trunc_reg_1945 <= p_Repl2_4_trunc_fu_1428_p2;
                p_Repl2_5_trunc_reg_1950 <= p_Repl2_5_trunc_fu_1451_p2;
                p_Repl2_6_trunc_reg_1955 <= p_Repl2_6_trunc_fu_1474_p2;
                p_Repl2_7_trunc_reg_1960 <= p_Repl2_7_trunc_fu_1503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                out_p_V <= p_Result_4_7_fu_1547_p9;
                p_s_reg_1965 <= p_s_fu_1565_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_12_reg_1764 <= p_12_fu_635_p3;
                p_Val2_1_reg_1732 <= p_Val2_1_fu_1607_p2;
                tmp_12_reg_1747 <= tmp_12_fu_600_p2;
                tmp_15_reg_1759 <= tmp_15_fu_604_p2;
                    tmp_6_cast_reg_1721(28 downto 13) <= tmp_6_cast_fu_538_p1(28 downto 13);
                tmp_75_reg_1737 <= tmp_75_fu_597_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_13_reg_1789 <= p_13_fu_734_p3;
                p_Val2_2_reg_1769 <= p_Val2_2_fu_1613_p2;
                tmp_15_1_reg_1784 <= tmp_15_1_fu_703_p2;
                tmp_77_reg_1774 <= tmp_77_fu_700_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_14_reg_1814 <= p_14_fu_833_p3;
                p_Val2_s_6_reg_1794 <= p_Val2_s_6_fu_1619_p2;
                tmp_15_2_reg_1809 <= tmp_15_2_fu_802_p2;
                tmp_79_reg_1799 <= tmp_79_fu_799_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_15_reg_1839 <= p_15_fu_932_p3;
                p_Val2_3_reg_1819 <= p_Val2_3_fu_1625_p2;
                tmp_15_3_reg_1834 <= tmp_15_3_fu_901_p2;
                tmp_81_reg_1824 <= tmp_81_fu_898_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_16_reg_1864 <= p_16_fu_1035_p3;
                p_Val2_4_reg_1844 <= p_Val2_4_fu_1631_p2;
                tmp_15_4_reg_1859 <= tmp_15_4_fu_1000_p2;
                tmp_83_reg_1849 <= tmp_83_fu_997_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_17_reg_1889 <= p_17_fu_1138_p3;
                p_Val2_5_reg_1869 <= p_Val2_5_fu_1637_p2;
                tmp_15_5_reg_1884 <= tmp_15_5_fu_1103_p2;
                tmp_85_reg_1874 <= tmp_85_fu_1100_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_18_reg_1914 <= p_18_fu_1241_p3;
                p_Val2_6_reg_1899 <= p_Val2_6_fu_1643_p2;
                tmp_15_6_reg_1909 <= tmp_15_6_fu_1206_p2;
                tmp_87_reg_1904 <= tmp_87_fu_1203_p1;
            end if;
        end if;
    end process;
    OP1_V_reg_1690(31 downto 16) <= "0000000000000000";
    tmp_6_cast_reg_1721(12 downto 0) <= "0000000000000";
    tmp_6_cast_reg_1721(32 downto 29) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    OP1_V_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1654),32));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_410_p1 <= m_V_q0;
    grp_fu_410_p4 <= grp_fu_410_p1(15 downto 13);
    grp_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(grp_fu_410_p4));
    icmp_fu_1259_p2 <= "1" when (signed(tmp_1_fu_1249_p4) > signed(ap_const_lv4_0)) else "0";

    m_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            m_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            m_V_address0 <= "XXXX";
        end if; 
    end process;


    m_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_V_ce0 <= ap_const_logic_1;
        else 
            m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V <= p_s_reg_1965;
    p_10_fu_1233_p3 <= 
        grp_fu_410_p4 when (tmp_39_fu_1227_p2(0) = '1') else 
        grp_fu_420_p2;
    p_11_fu_520_p3 <= 
        p_3_fu_512_p3 when (tmp_100_fu_494_p3(0) = '1') else 
        grp_fu_410_p4;
    p_12_fu_635_p3 <= 
        p_4_fu_627_p3 when (tmp_102_fu_609_p3(0) = '1') else 
        grp_fu_410_p4;
    p_13_fu_734_p3 <= 
        p_5_fu_726_p3 when (tmp_104_fu_708_p3(0) = '1') else 
        grp_fu_410_p4;
    p_14_fu_833_p3 <= 
        p_6_fu_825_p3 when (tmp_106_fu_807_p3(0) = '1') else 
        grp_fu_410_p4;
    p_15_fu_932_p3 <= 
        p_7_fu_924_p3 when (tmp_108_fu_906_p3(0) = '1') else 
        grp_fu_410_p4;
    p_16_fu_1035_p3 <= 
        p_8_fu_1027_p3 when (tmp_110_fu_1009_p3(0) = '1') else 
        grp_fu_410_p4;
    p_17_fu_1138_p3 <= 
        p_9_fu_1130_p3 when (tmp_112_fu_1112_p3(0) = '1') else 
        grp_fu_410_p4;
    p_18_fu_1241_p3 <= 
        p_10_fu_1233_p3 when (tmp_114_fu_1215_p3(0) = '1') else 
        grp_fu_410_p4;
    p_1_fu_1534_p3 <= 
        p_2_fu_1526_p3 when (tmp_98_fu_1508_p3(0) = '1') else 
        grp_fu_410_p4;
    p_2_fu_1526_p3 <= 
        grp_fu_410_p4 when (tmp_21_fu_1520_p2(0) = '1') else 
        grp_fu_420_p2;
    p_3_fu_512_p3 <= 
        grp_fu_410_p4 when (tmp_25_fu_506_p2(0) = '1') else 
        grp_fu_420_p2;
    p_4_fu_627_p3 <= 
        grp_fu_410_p4 when (tmp_27_fu_621_p2(0) = '1') else 
        grp_fu_420_p2;
    p_5_fu_726_p3 <= 
        grp_fu_410_p4 when (tmp_29_fu_720_p2(0) = '1') else 
        grp_fu_420_p2;
    p_6_fu_825_p3 <= 
        grp_fu_410_p4 when (tmp_31_fu_819_p2(0) = '1') else 
        grp_fu_420_p2;
    p_7_fu_924_p3 <= 
        grp_fu_410_p4 when (tmp_33_fu_918_p2(0) = '1') else 
        grp_fu_420_p2;
    p_8_fu_1027_p3 <= 
        grp_fu_410_p4 when (tmp_35_fu_1021_p2(0) = '1') else 
        grp_fu_420_p2;
    p_9_fu_1130_p3 <= 
        grp_fu_410_p4 when (tmp_37_fu_1124_p2(0) = '1') else 
        grp_fu_420_p2;
    p_Repl2_0_trunc_fu_1336_p2 <= (tmp_2_fu_1331_p2 and tmp_20_reg_1678);
    p_Repl2_1_trunc_fu_1359_p2 <= (tmp_9_fu_1354_p2 and tmp_20_reg_1678);
    p_Repl2_2_trunc_fu_1382_p2 <= (tmp_20_reg_1678 and tmp_13_fu_1377_p2);
    p_Repl2_3_trunc_fu_1405_p2 <= (tmp_20_reg_1678 and tmp_14_fu_1400_p2);
    p_Repl2_4_trunc_fu_1428_p2 <= (tmp_20_reg_1678 and tmp_16_fu_1423_p2);
    p_Repl2_5_trunc_fu_1451_p2 <= (tmp_20_reg_1678 and tmp_17_fu_1446_p2);
    p_Repl2_6_trunc_fu_1474_p2 <= (tmp_20_reg_1678 and tmp_18_fu_1469_p2);
    p_Repl2_7_trunc_fu_1503_p2 <= (tmp_20_reg_1678 and tmp_19_fu_1498_p2);
    p_Result_4_7_fu_1547_p9 <= (((((((p_Repl2_7_trunc_reg_1960 & p_Repl2_6_trunc_reg_1955) & p_Repl2_5_trunc_reg_1950) & p_Repl2_4_trunc_reg_1945) & p_Repl2_3_trunc_reg_1940) & p_Repl2_2_trunc_reg_1935) & p_Repl2_1_trunc_reg_1930) & p_Repl2_0_trunc_reg_1925);
    p_Val2_1_fu_1607_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_2_fu_1613_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_3_fu_1625_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_4_fu_1631_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_5_fu_1637_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_6_fu_1643_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_7_fu_436_p1 <= min_duty(16 - 1 downto 0);
    p_Val2_s_6_fu_1619_p1 <= OP1_V_reg_1690(16 - 1 downto 0);
    p_Val2_s_fu_1600_p1 <= p_Val2_s_fu_1600_p10(16 - 1 downto 0);
    p_Val2_s_fu_1600_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1654),32));
    p_s_fu_1565_p3 <= 
        p_Result_4_7_fu_1547_p9 when (icmp_reg_1919(0) = '1') else 
        ap_const_lv8_0;
    r_V_1_fu_646_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_1_fu_643_p1));
    r_V_2_fu_745_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_2_fu_742_p1));
    r_V_3_fu_844_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_3_fu_841_p1));
    r_V_4_fu_943_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_4_fu_940_p1));
    r_V_5_fu_1046_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_5_fu_1043_p1));
    r_V_6_fu_1149_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_6_fu_1146_p1));
    r_V_7_fu_1268_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_1721) + unsigned(tmp_4_7_fu_1265_p1));
    r_V_fu_542_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_538_p1) + unsigned(tmp_4_fu_528_p1));

    test_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            test_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            test_address0 <= ap_const_lv64_10(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            test_address0 <= ap_const_lv64_F(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            test_address0 <= ap_const_lv64_E(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            test_address0 <= ap_const_lv64_D(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            test_address0 <= ap_const_lv64_C(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            test_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            test_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            test_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            test_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            test_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            test_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        else 
            test_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    test_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            test_ce0 <= ap_const_logic_1;
        else 
            test_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_26_fu_1005_p1, tmp_28_fu_1108_p1, tmp_30_fu_1211_p1, tmp_22_fu_1542_p1, tmp_24_fu_1572_p1, tmp_32_fu_1576_p1, tmp_34_fu_1580_p1, tmp_36_fu_1584_p1, tmp_38_fu_1588_p1, tmp_40_fu_1592_p1, tmp_11_fu_1596_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            test_d0 <= tmp_11_fu_1596_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            test_d0 <= tmp_40_fu_1592_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            test_d0 <= tmp_38_fu_1588_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            test_d0 <= tmp_36_fu_1584_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            test_d0 <= tmp_34_fu_1580_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            test_d0 <= tmp_32_fu_1576_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_d0 <= tmp_24_fu_1572_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            test_d0 <= tmp_22_fu_1542_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            test_d0 <= tmp_30_fu_1211_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            test_d0 <= tmp_28_fu_1108_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            test_d0 <= tmp_26_fu_1005_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_d0 <= ap_const_lv32_45;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            test_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            test_d0 <= ap_const_lv32_1;
        else 
            test_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            test_we0 <= ap_const_logic_1;
        else 
            test_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_494_p1 <= m_V_q0;
    tmp_100_fu_494_p3 <= tmp_100_fu_494_p1(15 downto 15);
    tmp_101_fu_502_p0 <= m_V_q0;
    tmp_101_fu_502_p1 <= tmp_101_fu_502_p0(13 - 1 downto 0);
    tmp_102_fu_609_p1 <= m_V_q0;
    tmp_102_fu_609_p3 <= tmp_102_fu_609_p1(15 downto 15);
    tmp_103_fu_617_p0 <= m_V_q0;
    tmp_103_fu_617_p1 <= tmp_103_fu_617_p0(13 - 1 downto 0);
    tmp_104_fu_708_p1 <= m_V_q0;
    tmp_104_fu_708_p3 <= tmp_104_fu_708_p1(15 downto 15);
    tmp_105_fu_716_p0 <= m_V_q0;
    tmp_105_fu_716_p1 <= tmp_105_fu_716_p0(13 - 1 downto 0);
    tmp_106_fu_807_p1 <= m_V_q0;
    tmp_106_fu_807_p3 <= tmp_106_fu_807_p1(15 downto 15);
    tmp_107_fu_815_p0 <= m_V_q0;
    tmp_107_fu_815_p1 <= tmp_107_fu_815_p0(13 - 1 downto 0);
    tmp_108_fu_906_p1 <= m_V_q0;
    tmp_108_fu_906_p3 <= tmp_108_fu_906_p1(15 downto 15);
    tmp_109_fu_914_p0 <= m_V_q0;
    tmp_109_fu_914_p1 <= tmp_109_fu_914_p0(13 - 1 downto 0);
    tmp_10_fu_470_p3 <= 
        tmp_s_fu_464_p2 when (tmp_8_fu_458_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_110_fu_1009_p1 <= m_V_q0;
    tmp_110_fu_1009_p3 <= tmp_110_fu_1009_p1(15 downto 15);
    tmp_111_fu_1017_p0 <= m_V_q0;
    tmp_111_fu_1017_p1 <= tmp_111_fu_1017_p0(13 - 1 downto 0);
    tmp_112_fu_1112_p1 <= m_V_q0;
    tmp_112_fu_1112_p3 <= tmp_112_fu_1112_p1(15 downto 15);
    tmp_113_fu_1120_p0 <= m_V_q0;
    tmp_113_fu_1120_p1 <= tmp_113_fu_1120_p0(13 - 1 downto 0);
    tmp_114_fu_1215_p1 <= m_V_q0;
    tmp_114_fu_1215_p3 <= tmp_114_fu_1215_p1(15 downto 15);
    tmp_115_fu_1223_p0 <= m_V_q0;
    tmp_115_fu_1223_p1 <= tmp_115_fu_1223_p0(13 - 1 downto 0);
    tmp_11_fu_1596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_1965),32));
    tmp_12_fu_600_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(p_Val2_7_reg_1659)) else "0";
    tmp_13_fu_1377_p2 <= (tmp_18_2_fu_1372_p2 or tmp_12_reg_1747);
    tmp_14_fu_1400_p2 <= (tmp_18_3_fu_1395_p2 or tmp_12_reg_1747);
    tmp_15_1_fu_703_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_46_fu_688_p3)) else "0";
    tmp_15_2_fu_802_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_50_fu_787_p3)) else "0";
    tmp_15_3_fu_901_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_54_fu_886_p3)) else "0";
    tmp_15_4_fu_1000_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_58_fu_985_p3)) else "0";
    tmp_15_5_fu_1103_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_62_fu_1088_p3)) else "0";
    tmp_15_6_fu_1206_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_66_fu_1191_p3)) else "0";
    tmp_15_7_fu_1479_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_70_fu_1310_p3)) else "0";
    tmp_15_fu_604_p2 <= "1" when (unsigned(acc_load_reg_1665) < unsigned(tmp_42_fu_585_p3)) else "0";
    tmp_16_fu_1423_p2 <= (tmp_18_4_fu_1418_p2 or tmp_12_reg_1747);
    tmp_17_fu_1446_p2 <= (tmp_18_5_fu_1441_p2 or tmp_12_reg_1747);
    tmp_18_1_fu_1349_p2 <= (tmp_90_fu_1341_p3 and tmp_15_1_reg_1784);
    tmp_18_2_fu_1372_p2 <= (tmp_91_fu_1364_p3 and tmp_15_2_reg_1809);
    tmp_18_3_fu_1395_p2 <= (tmp_92_fu_1387_p3 and tmp_15_3_reg_1834);
    tmp_18_4_fu_1418_p2 <= (tmp_93_fu_1410_p3 and tmp_15_4_reg_1859);
    tmp_18_5_fu_1441_p2 <= (tmp_94_fu_1433_p3 and tmp_15_5_reg_1884);
    tmp_18_6_fu_1464_p2 <= (tmp_95_fu_1456_p3 and tmp_15_6_reg_1909);
    tmp_18_7_fu_1492_p2 <= (tmp_96_fu_1484_p3 and tmp_15_7_fu_1479_p2);
    tmp_18_fu_1469_p2 <= (tmp_18_6_fu_1464_p2 or tmp_12_reg_1747);
    tmp_18_s_fu_1326_p2 <= (tmp_89_fu_1322_p1 and tmp_15_reg_1759);
    tmp_19_fu_1498_p2 <= (tmp_18_7_fu_1492_p2 or tmp_12_reg_1747);
    tmp_1_fu_1249_p4 <= m_V_q0(15 downto 12);
    tmp_20_fu_448_p2 <= "1" when (unsigned(acc) < unsigned(tmp_88_fu_440_p1)) else "0";
    tmp_21_fu_1520_p2 <= "1" when (tmp_99_fu_1516_p1 = ap_const_lv13_0) else "0";
        tmp_22_fu_1542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_1_fu_1534_p3),32));

    tmp_23_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_5_fu_561_p4));
    tmp_24_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_reg_1919),32));
    tmp_25_fu_506_p2 <= "1" when (tmp_101_fu_502_p1 = ap_const_lv13_0) else "0";
        tmp_26_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_11_reg_1716),32));

    tmp_27_fu_621_p2 <= "1" when (tmp_103_fu_617_p1 = ap_const_lv13_0) else "0";
        tmp_28_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_12_reg_1764),32));

    tmp_29_fu_720_p2 <= "1" when (tmp_105_fu_716_p1 = ap_const_lv13_0) else "0";
    tmp_2_fu_1331_p2 <= (tmp_18_s_fu_1326_p2 or tmp_12_reg_1747);
        tmp_30_fu_1211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_13_reg_1789),32));

    tmp_31_fu_819_p2 <= "1" when (tmp_107_fu_815_p1 = ap_const_lv13_0) else "0";
        tmp_32_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_14_reg_1814),32));

    tmp_33_fu_918_p2 <= "1" when (tmp_109_fu_914_p1 = ap_const_lv13_0) else "0";
        tmp_34_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_15_reg_1839),32));

    tmp_35_fu_1021_p2 <= "1" when (tmp_111_fu_1017_p1 = ap_const_lv13_0) else "0";
        tmp_36_fu_1584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_16_reg_1864),32));

    tmp_37_fu_1124_p2 <= "1" when (tmp_113_fu_1120_p1 = ap_const_lv13_0) else "0";
        tmp_38_fu_1588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_17_reg_1889),32));

    tmp_39_fu_1227_p2 <= "1" when (tmp_115_fu_1223_p1 = ap_const_lv13_0) else "0";
    tmp_3_1_fu_659_p2 <= "1" when (tmp_75_reg_1737 = ap_const_lv13_0) else "0";
    tmp_3_2_fu_758_p2 <= "1" when (tmp_77_reg_1774 = ap_const_lv13_0) else "0";
    tmp_3_3_fu_857_p2 <= "1" when (tmp_79_reg_1799 = ap_const_lv13_0) else "0";
    tmp_3_4_fu_956_p2 <= "1" when (tmp_81_reg_1824 = ap_const_lv13_0) else "0";
    tmp_3_5_fu_1059_p2 <= "1" when (tmp_83_reg_1849 = ap_const_lv13_0) else "0";
    tmp_3_6_fu_1162_p2 <= "1" when (tmp_85_reg_1874 = ap_const_lv13_0) else "0";
    tmp_3_7_fu_1281_p2 <= "1" when (tmp_87_reg_1904 = ap_const_lv13_0) else "0";
    tmp_3_fu_556_p2 <= "1" when (tmp_73_reg_1706 = ap_const_lv13_0) else "0";
        tmp_40_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_18_reg_1914),32));

    tmp_41_fu_577_p3 <= 
        tmp_5_fu_561_p4 when (tmp_3_fu_556_p2(0) = '1') else 
        tmp_23_fu_571_p2;
    tmp_42_fu_585_p3 <= 
        tmp_41_fu_577_p3 when (tmp_72_fu_548_p3(0) = '1') else 
        tmp_5_fu_561_p4;
    tmp_43_fu_664_p4 <= r_V_1_fu_646_p2(28 downto 13);
    tmp_44_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_43_fu_664_p4));
    tmp_45_fu_680_p3 <= 
        tmp_43_fu_664_p4 when (tmp_3_1_fu_659_p2(0) = '1') else 
        tmp_44_fu_674_p2;
    tmp_46_fu_688_p3 <= 
        tmp_45_fu_680_p3 when (tmp_74_fu_651_p3(0) = '1') else 
        tmp_43_fu_664_p4;
    tmp_47_fu_763_p4 <= r_V_2_fu_745_p2(28 downto 13);
    tmp_48_fu_773_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_47_fu_763_p4));
    tmp_49_fu_779_p3 <= 
        tmp_47_fu_763_p4 when (tmp_3_2_fu_758_p2(0) = '1') else 
        tmp_48_fu_773_p2;
        tmp_4_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_1732),33));

        tmp_4_2_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_1769),33));

        tmp_4_3_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_6_reg_1794),33));

        tmp_4_4_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_reg_1819),33));

        tmp_4_5_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_1844),33));

        tmp_4_6_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_1869),33));

        tmp_4_7_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_1899),33));

        tmp_4_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_1701),33));

    tmp_50_fu_787_p3 <= 
        tmp_49_fu_779_p3 when (tmp_76_fu_750_p3(0) = '1') else 
        tmp_47_fu_763_p4;
    tmp_51_fu_862_p4 <= r_V_3_fu_844_p2(28 downto 13);
    tmp_52_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_51_fu_862_p4));
    tmp_53_fu_878_p3 <= 
        tmp_51_fu_862_p4 when (tmp_3_3_fu_857_p2(0) = '1') else 
        tmp_52_fu_872_p2;
    tmp_54_fu_886_p3 <= 
        tmp_53_fu_878_p3 when (tmp_78_fu_849_p3(0) = '1') else 
        tmp_51_fu_862_p4;
    tmp_55_fu_961_p4 <= r_V_4_fu_943_p2(28 downto 13);
    tmp_56_fu_971_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_55_fu_961_p4));
    tmp_57_fu_977_p3 <= 
        tmp_55_fu_961_p4 when (tmp_3_4_fu_956_p2(0) = '1') else 
        tmp_56_fu_971_p2;
    tmp_58_fu_985_p3 <= 
        tmp_57_fu_977_p3 when (tmp_80_fu_948_p3(0) = '1') else 
        tmp_55_fu_961_p4;
    tmp_59_fu_1064_p4 <= r_V_5_fu_1046_p2(28 downto 13);
    tmp_5_fu_561_p4 <= r_V_fu_542_p2(28 downto 13);
    tmp_60_fu_1074_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_59_fu_1064_p4));
    tmp_61_fu_1080_p3 <= 
        tmp_59_fu_1064_p4 when (tmp_3_5_fu_1059_p2(0) = '1') else 
        tmp_60_fu_1074_p2;
    tmp_62_fu_1088_p3 <= 
        tmp_61_fu_1080_p3 when (tmp_82_fu_1051_p3(0) = '1') else 
        tmp_59_fu_1064_p4;
    tmp_63_fu_1167_p4 <= r_V_6_fu_1149_p2(28 downto 13);
    tmp_64_fu_1177_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_63_fu_1167_p4));
    tmp_65_fu_1183_p3 <= 
        tmp_63_fu_1167_p4 when (tmp_3_6_fu_1162_p2(0) = '1') else 
        tmp_64_fu_1177_p2;
    tmp_66_fu_1191_p3 <= 
        tmp_65_fu_1183_p3 when (tmp_84_fu_1154_p3(0) = '1') else 
        tmp_63_fu_1167_p4;
    tmp_67_fu_1286_p4 <= r_V_7_fu_1268_p2(28 downto 13);
    tmp_68_fu_1296_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_67_fu_1286_p4));
    tmp_69_fu_1302_p3 <= 
        tmp_67_fu_1286_p4 when (tmp_3_7_fu_1281_p2(0) = '1') else 
        tmp_68_fu_1296_p2;
    tmp_6_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_531_p3),33));
    tmp_6_fu_531_p3 <= (p_Val2_7_reg_1659 & ap_const_lv13_0);
    tmp_70_fu_1310_p3 <= 
        tmp_69_fu_1302_p3 when (tmp_86_fu_1273_p3(0) = '1') else 
        tmp_67_fu_1286_p4;
    tmp_72_fu_548_p3 <= r_V_fu_542_p2(32 downto 32);
    tmp_73_fu_491_p1 <= p_Val2_s_fu_1600_p2(13 - 1 downto 0);
    tmp_74_fu_651_p3 <= r_V_1_fu_646_p2(32 downto 32);
    tmp_75_fu_597_p1 <= p_Val2_1_fu_1607_p2(13 - 1 downto 0);
    tmp_76_fu_750_p3 <= r_V_2_fu_745_p2(32 downto 32);
    tmp_77_fu_700_p1 <= p_Val2_2_fu_1613_p2(13 - 1 downto 0);
    tmp_78_fu_849_p3 <= r_V_3_fu_844_p2(32 downto 32);
    tmp_79_fu_799_p1 <= p_Val2_s_6_fu_1619_p2(13 - 1 downto 0);
    tmp_7_fu_432_p1 <= tmp_fu_426_p2(16 - 1 downto 0);
    tmp_80_fu_948_p3 <= r_V_4_fu_943_p2(32 downto 32);
    tmp_81_fu_898_p1 <= p_Val2_3_fu_1625_p2(13 - 1 downto 0);
    tmp_82_fu_1051_p3 <= r_V_5_fu_1046_p2(32 downto 32);
    tmp_83_fu_997_p1 <= p_Val2_4_fu_1631_p2(13 - 1 downto 0);
    tmp_84_fu_1154_p3 <= r_V_6_fu_1149_p2(32 downto 32);
    tmp_85_fu_1100_p1 <= p_Val2_5_fu_1637_p2(13 - 1 downto 0);
    tmp_86_fu_1273_p3 <= r_V_7_fu_1268_p2(32 downto 32);
    tmp_87_fu_1203_p1 <= p_Val2_6_fu_1643_p2(13 - 1 downto 0);
    tmp_88_fu_440_p1 <= max_duty(16 - 1 downto 0);
    tmp_89_fu_1322_p1 <= out_p_V(1 - 1 downto 0);
    tmp_8_fu_458_p2 <= "1" when (unsigned(acc) < unsigned(tmp_97_fu_454_p1)) else "0";
    tmp_90_fu_1341_p3 <= out_p_V(1 downto 1);
    tmp_91_fu_1364_p3 <= out_p_V(2 downto 2);
    tmp_92_fu_1387_p3 <= out_p_V(3 downto 3);
    tmp_93_fu_1410_p3 <= out_p_V(4 downto 4);
    tmp_94_fu_1433_p3 <= out_p_V(5 downto 5);
    tmp_95_fu_1456_p3 <= out_p_V(6 downto 6);
    tmp_96_fu_1484_p3 <= out_p_V(7 downto 7);
    tmp_97_fu_454_p1 <= period(16 - 1 downto 0);
    tmp_98_fu_1508_p3 <= m_V_q0(15 downto 15);
    tmp_99_fu_1516_p1 <= m_V_q0(13 - 1 downto 0);
    tmp_9_fu_1354_p2 <= (tmp_18_1_fu_1349_p2 or tmp_12_reg_1747);
    tmp_fu_426_p2 <= std_logic_vector(unsigned(max_duty) - unsigned(min_duty));
    tmp_s_fu_464_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(acc));
end behav;
