// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XFLIGHTMAIN_H
#define XFLIGHTMAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xflightmain_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Cmd_BaseAddress;
    u32 Ctrl_BaseAddress;
    u32 Test_BaseAddress;
} XFlightmain_Config;
#endif

typedef struct {
    u32 Cmd_BaseAddress;
    u32 Ctrl_BaseAddress;
    u32 Test_BaseAddress;
    u32 IsReady;
} XFlightmain;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XFlightmain_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XFlightmain_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XFlightmain_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XFlightmain_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XFlightmain_Initialize(XFlightmain *InstancePtr, u16 DeviceId);
XFlightmain_Config* XFlightmain_LookupConfig(u16 DeviceId);
int XFlightmain_CfgInitialize(XFlightmain *InstancePtr, XFlightmain_Config *ConfigPtr);
#else
int XFlightmain_Initialize(XFlightmain *InstancePtr, const char* InstanceName);
int XFlightmain_Release(XFlightmain *InstancePtr);
#endif

void XFlightmain_Start(XFlightmain *InstancePtr);
u32 XFlightmain_IsDone(XFlightmain *InstancePtr);
u32 XFlightmain_IsIdle(XFlightmain *InstancePtr);
u32 XFlightmain_IsReady(XFlightmain *InstancePtr);
void XFlightmain_EnableAutoRestart(XFlightmain *InstancePtr);
void XFlightmain_DisableAutoRestart(XFlightmain *InstancePtr);

u32 XFlightmain_Get_rcCmdIn_V_BaseAddress(XFlightmain *InstancePtr);
u32 XFlightmain_Get_rcCmdIn_V_HighAddress(XFlightmain *InstancePtr);
u32 XFlightmain_Get_rcCmdIn_V_TotalBytes(XFlightmain *InstancePtr);
u32 XFlightmain_Get_rcCmdIn_V_BitWidth(XFlightmain *InstancePtr);
u32 XFlightmain_Get_rcCmdIn_V_Depth(XFlightmain *InstancePtr);
u32 XFlightmain_Write_rcCmdIn_V_Words(XFlightmain *InstancePtr, int offset, int *data, int length);
u32 XFlightmain_Read_rcCmdIn_V_Words(XFlightmain *InstancePtr, int offset, int *data, int length);
u32 XFlightmain_Write_rcCmdIn_V_Bytes(XFlightmain *InstancePtr, int offset, char *data, int length);
u32 XFlightmain_Read_rcCmdIn_V_Bytes(XFlightmain *InstancePtr, int offset, char *data, int length);
u32 XFlightmain_Get_obj_avd_cmd_V_BaseAddress(XFlightmain *InstancePtr);
u32 XFlightmain_Get_obj_avd_cmd_V_HighAddress(XFlightmain *InstancePtr);
u32 XFlightmain_Get_obj_avd_cmd_V_TotalBytes(XFlightmain *InstancePtr);
u32 XFlightmain_Get_obj_avd_cmd_V_BitWidth(XFlightmain *InstancePtr);
u32 XFlightmain_Get_obj_avd_cmd_V_Depth(XFlightmain *InstancePtr);
u32 XFlightmain_Write_obj_avd_cmd_V_Words(XFlightmain *InstancePtr, int offset, int *data, int length);
u32 XFlightmain_Read_obj_avd_cmd_V_Words(XFlightmain *InstancePtr, int offset, int *data, int length);
u32 XFlightmain_Write_obj_avd_cmd_V_Bytes(XFlightmain *InstancePtr, int offset, char *data, int length);
u32 XFlightmain_Read_obj_avd_cmd_V_Bytes(XFlightmain *InstancePtr, int offset, char *data, int length);
u32 XFlightmain_Get_test_BaseAddress(XFlightmain *InstancePtr);
u32 XFlightmain_Get_test_HighAddress(XFlightmain *InstancePtr);
u32 XFlightmain_Get_test_TotalBytes(XFlightmain *InstancePtr);
u32 XFlightmain_Get_test_BitWidth(XFlightmain *InstancePtr);
u32 XFlightmain_Get_test_Depth(XFlightmain *InstancePtr);
u32 XFlightmain_Write_test_Words(XFlightmain *InstancePtr, int offset, int *data, int length);
u32 XFlightmain_Read_test_Words(XFlightmain *InstancePtr, int offset, int *data, int length);
u32 XFlightmain_Write_test_Bytes(XFlightmain *InstancePtr, int offset, char *data, int length);
u32 XFlightmain_Read_test_Bytes(XFlightmain *InstancePtr, int offset, char *data, int length);

void XFlightmain_InterruptGlobalEnable(XFlightmain *InstancePtr);
void XFlightmain_InterruptGlobalDisable(XFlightmain *InstancePtr);
void XFlightmain_InterruptEnable(XFlightmain *InstancePtr, u32 Mask);
void XFlightmain_InterruptDisable(XFlightmain *InstancePtr, u32 Mask);
void XFlightmain_InterruptClear(XFlightmain *InstancePtr, u32 Mask);
u32 XFlightmain_InterruptGetEnabled(XFlightmain *InstancePtr);
u32 XFlightmain_InterruptGetStatus(XFlightmain *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
