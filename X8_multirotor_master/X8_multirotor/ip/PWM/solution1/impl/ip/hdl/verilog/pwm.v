// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=8,HLS_SYN_TPT=7,HLS_SYN_MEM=2,HLS_SYN_DSP=6,HLS_SYN_FF=628,HLS_SYN_LUT=1224,HLS_VERSION=2018_2}" *)

module pwm (
        ap_clk,
        ap_rst_n,
        out_V,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 7'd1;
parameter    ap_ST_fsm_pp0_stage1 = 7'd2;
parameter    ap_ST_fsm_pp0_stage2 = 7'd4;
parameter    ap_ST_fsm_pp0_stage3 = 7'd8;
parameter    ap_ST_fsm_pp0_stage4 = 7'd16;
parameter    ap_ST_fsm_pp0_stage5 = 7'd32;
parameter    ap_ST_fsm_pp0_stage6 = 7'd64;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [5:0] out_V;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [15:0] min_duty;
wire   [15:0] max_duty;
wire   [15:0] period;
reg   [2:0] m_V_address0;
reg    m_V_ce0;
wire  signed [15:0] m_V_q0;
reg   [15:0] acc;
reg   [5:0] out_p_V;
reg   [15:0] period_read_reg_853;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] max_duty_read_reg_858;
reg   [15:0] min_duty_read_reg_864;
wire  signed [32:0] OP1_V_1_cast_fu_205_p1;
reg  signed [32:0] OP1_V_1_cast_reg_876;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire  signed [32:0] p_Val2_s_fu_816_p2;
reg  signed [32:0] p_Val2_s_reg_885;
wire   [14:0] tmp_39_fu_213_p1;
reg   [14:0] tmp_39_reg_890;
reg   [15:0] acc_load_reg_900;
wire   [0:0] tmp_9_fu_220_p2;
reg   [0:0] tmp_9_reg_911;
wire   [32:0] tmp_6_cast_fu_257_p1;
reg   [32:0] tmp_6_cast_reg_921;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire  signed [32:0] p_Val2_1_fu_823_p2;
reg  signed [32:0] p_Val2_1_reg_930;
wire   [14:0] tmp_41_fu_315_p1;
reg   [14:0] tmp_41_reg_935;
wire   [0:0] tmp_7_fu_318_p2;
reg   [0:0] tmp_7_reg_945;
wire   [0:0] tmp_17_fu_322_p2;
reg   [0:0] tmp_17_reg_955;
wire  signed [32:0] p_Val2_s_4_fu_829_p2;
reg  signed [32:0] p_Val2_s_4_reg_960;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [14:0] tmp_43_fu_380_p1;
reg   [14:0] tmp_43_reg_965;
wire   [0:0] tmp_17_1_fu_383_p2;
reg   [0:0] tmp_17_1_reg_975;
wire  signed [32:0] p_Val2_3_fu_835_p2;
reg  signed [32:0] p_Val2_3_reg_980;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [14:0] tmp_45_fu_441_p1;
reg   [14:0] tmp_45_reg_985;
wire   [0:0] tmp_17_2_fu_444_p2;
reg   [0:0] tmp_17_2_reg_995;
wire  signed [32:0] p_Val2_4_fu_841_p2;
reg  signed [32:0] p_Val2_4_reg_1000;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [14:0] tmp_47_fu_502_p1;
reg   [14:0] tmp_47_reg_1005;
wire   [0:0] tmp_17_3_fu_505_p2;
reg   [0:0] tmp_17_3_reg_1015;
wire  signed [32:0] p_Val2_5_fu_847_p2;
reg  signed [32:0] p_Val2_5_reg_1025;
wire   [14:0] tmp_49_fu_563_p1;
reg   [14:0] tmp_49_reg_1030;
wire   [0:0] tmp_17_4_fu_566_p2;
reg   [0:0] tmp_17_4_reg_1035;
wire   [0:0] tmp_5_fu_593_p2;
reg   [0:0] tmp_5_reg_1040;
wire   [0:0] p_Repl2_0_trunc_fu_666_p2;
reg   [0:0] p_Repl2_0_trunc_reg_1045;
wire   [0:0] p_Repl2_1_trunc_fu_689_p2;
reg   [0:0] p_Repl2_1_trunc_reg_1050;
wire   [0:0] p_Repl2_2_trunc_fu_712_p2;
reg   [0:0] p_Repl2_2_trunc_reg_1055;
wire   [0:0] p_Repl2_3_trunc_fu_735_p2;
reg   [0:0] p_Repl2_3_trunc_reg_1060;
wire   [0:0] p_Repl2_4_trunc_fu_758_p2;
reg   [0:0] p_Repl2_4_trunc_reg_1065;
wire   [0:0] p_Repl2_5_trunc_fu_787_p2;
reg   [0:0] p_Repl2_5_trunc_reg_1070;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire   [15:0] tmp_14_fu_236_p3;
wire   [5:0] p_Result_4_5_fu_792_p7;
wire    ap_block_pp0_stage1_01001;
wire   [16:0] tmp_1_cast_fu_196_p1;
wire   [16:0] tmp_cast_fu_193_p1;
wire  signed [16:0] i_op_assign_fu_199_p2;
wire   [0:0] tmp_s_fu_225_p2;
wire   [15:0] tmp_13_fu_230_p2;
wire   [30:0] tmp_6_fu_250_p3;
(* use_dsp48 = "no" *) wire   [32:0] r_V_2_fu_261_p2;
wire   [15:0] tmp_3_fu_279_p4;
wire   [0:0] tmp_1_fu_274_p2;
wire   [15:0] tmp_4_fu_289_p2;
wire   [0:0] tmp_fu_266_p3;
wire   [15:0] tmp_12_fu_295_p3;
wire   [15:0] tmp_15_fu_303_p3;
(* use_dsp48 = "no" *) wire   [32:0] r_V_2_1_fu_327_p2;
wire   [15:0] tmp_19_fu_344_p4;
wire   [0:0] tmp_12_1_fu_339_p2;
wire   [15:0] tmp_20_fu_354_p2;
wire   [0:0] tmp_40_fu_331_p3;
wire   [15:0] tmp_21_fu_360_p3;
wire   [15:0] tmp_22_fu_368_p3;
(* use_dsp48 = "no" *) wire   [32:0] r_V_2_2_fu_388_p2;
wire   [15:0] tmp_23_fu_405_p4;
wire   [0:0] tmp_12_2_fu_400_p2;
wire   [15:0] tmp_24_fu_415_p2;
wire   [0:0] tmp_42_fu_392_p3;
wire   [15:0] tmp_25_fu_421_p3;
wire   [15:0] tmp_26_fu_429_p3;
(* use_dsp48 = "no" *) wire   [32:0] r_V_2_3_fu_449_p2;
wire   [15:0] tmp_27_fu_466_p4;
wire   [0:0] tmp_12_3_fu_461_p2;
wire   [15:0] tmp_28_fu_476_p2;
wire   [0:0] tmp_44_fu_453_p3;
wire   [15:0] tmp_29_fu_482_p3;
wire   [15:0] tmp_30_fu_490_p3;
(* use_dsp48 = "no" *) wire   [32:0] r_V_2_4_fu_510_p2;
wire   [15:0] tmp_31_fu_527_p4;
wire   [0:0] tmp_12_4_fu_522_p2;
wire   [15:0] tmp_32_fu_537_p2;
wire   [0:0] tmp_46_fu_514_p3;
wire   [15:0] tmp_33_fu_543_p3;
wire   [15:0] tmp_34_fu_551_p3;
wire  signed [15:0] OP1_V_cast1_fu_571_p0;
wire  signed [15:0] p_shl_fu_575_p1;
wire   [17:0] p_shl_fu_575_p3;
wire  signed [18:0] p_shl_cast_fu_583_p1;
wire  signed [18:0] OP1_V_cast1_fu_571_p1;
wire   [18:0] r_V_fu_587_p2;
(* use_dsp48 = "no" *) wire   [32:0] r_V_2_5_fu_599_p2;
wire   [15:0] tmp_35_fu_616_p4;
wire   [0:0] tmp_12_5_fu_611_p2;
wire   [15:0] tmp_36_fu_626_p2;
wire   [0:0] tmp_48_fu_603_p3;
wire   [15:0] tmp_37_fu_632_p3;
wire   [0:0] tmp_50_fu_652_p1;
wire   [0:0] tmp_20_s_fu_656_p2;
wire   [0:0] tmp_2_fu_661_p2;
wire   [0:0] tmp_51_fu_671_p3;
wire   [0:0] tmp_20_1_fu_679_p2;
wire   [0:0] tmp_8_fu_684_p2;
wire   [0:0] tmp_52_fu_694_p3;
wire   [0:0] tmp_20_2_fu_702_p2;
wire   [0:0] tmp_10_fu_707_p2;
wire   [0:0] tmp_53_fu_717_p3;
wire   [0:0] tmp_20_3_fu_725_p2;
wire   [0:0] tmp_11_fu_730_p2;
wire   [0:0] tmp_54_fu_740_p3;
wire   [0:0] tmp_20_4_fu_748_p2;
wire   [0:0] tmp_16_fu_753_p2;
wire   [15:0] tmp_38_fu_640_p3;
wire   [0:0] tmp_55_fu_768_p3;
wire   [0:0] tmp_17_5_fu_763_p2;
wire   [0:0] tmp_20_5_fu_776_p2;
wire   [0:0] tmp_18_fu_782_p2;
wire  signed [16:0] p_Val2_1_fu_823_p0;
wire  signed [16:0] p_Val2_s_4_fu_829_p0;
wire  signed [16:0] p_Val2_3_fu_835_p0;
wire  signed [16:0] p_Val2_4_fu_841_p0;
wire  signed [16:0] p_Val2_5_fu_847_p0;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 acc = 16'd0;
#0 out_p_V = 6'd63;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

pwm_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pwm_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .min_duty(min_duty),
    .max_duty(max_duty),
    .period(period),
    .m_V_address0(m_V_address0),
    .m_V_ce0(m_V_ce0),
    .m_V_q0(m_V_q0)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U1(
    .din0(i_op_assign_fu_199_p2),
    .din1(m_V_q0),
    .dout(p_Val2_s_fu_816_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U2(
    .din0(p_Val2_1_fu_823_p0),
    .din1(m_V_q0),
    .dout(p_Val2_1_fu_823_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U3(
    .din0(p_Val2_s_4_fu_829_p0),
    .din1(m_V_q0),
    .dout(p_Val2_s_4_fu_829_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U4(
    .din0(p_Val2_3_fu_835_p0),
    .din1(m_V_q0),
    .dout(p_Val2_3_fu_835_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U5(
    .din0(p_Val2_4_fu_841_p0),
    .din1(m_V_q0),
    .dout(p_Val2_4_fu_841_p2)
);

pwm_mul_mul_17s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
pwm_mul_mul_17s_1bkb_U6(
    .din0(p_Val2_5_fu_847_p0),
    .din1(m_V_q0),
    .dout(p_Val2_5_fu_847_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        OP1_V_1_cast_reg_876 <= OP1_V_1_cast_fu_205_p1;
        acc_load_reg_900 <= acc;
        p_Val2_s_reg_885 <= p_Val2_s_fu_816_p2;
        tmp_39_reg_890 <= tmp_39_fu_213_p1;
        tmp_9_reg_911 <= tmp_9_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        acc <= tmp_14_fu_236_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_duty_read_reg_858 <= max_duty;
        min_duty_read_reg_864 <= min_duty;
        p_Repl2_0_trunc_reg_1045 <= p_Repl2_0_trunc_fu_666_p2;
        p_Repl2_1_trunc_reg_1050 <= p_Repl2_1_trunc_fu_689_p2;
        p_Repl2_2_trunc_reg_1055 <= p_Repl2_2_trunc_fu_712_p2;
        p_Repl2_3_trunc_reg_1060 <= p_Repl2_3_trunc_fu_735_p2;
        p_Repl2_4_trunc_reg_1065 <= p_Repl2_4_trunc_fu_758_p2;
        p_Repl2_5_trunc_reg_1070 <= p_Repl2_5_trunc_fu_787_p2;
        period_read_reg_853 <= period;
        tmp_5_reg_1040 <= tmp_5_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_p_V <= p_Result_4_5_fu_792_p7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        p_Val2_1_reg_930 <= p_Val2_1_fu_823_p2;
        tmp_17_reg_955 <= tmp_17_fu_322_p2;
        tmp_41_reg_935 <= tmp_41_fu_315_p1;
        tmp_6_cast_reg_921[30 : 15] <= tmp_6_cast_fu_257_p1[30 : 15];
        tmp_7_reg_945 <= tmp_7_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        p_Val2_3_reg_980 <= p_Val2_3_fu_835_p2;
        tmp_17_2_reg_995 <= tmp_17_2_fu_444_p2;
        tmp_45_reg_985 <= tmp_45_fu_441_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_Val2_4_reg_1000 <= p_Val2_4_fu_841_p2;
        tmp_17_3_reg_1015 <= tmp_17_3_fu_505_p2;
        tmp_47_reg_1005 <= tmp_47_fu_502_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_Val2_5_reg_1025 <= p_Val2_5_fu_847_p2;
        tmp_17_4_reg_1035 <= tmp_17_4_fu_566_p2;
        tmp_49_reg_1030 <= tmp_49_fu_563_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        p_Val2_s_4_reg_960 <= p_Val2_s_4_fu_829_p2;
        tmp_17_1_reg_975 <= tmp_17_1_fu_383_p2;
        tmp_43_reg_965 <= tmp_43_fu_380_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            m_V_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            m_V_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            m_V_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            m_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            m_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            m_V_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m_V_address0 = 64'd0;
        end else begin
            m_V_address0 = 'bx;
        end
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_cast_fu_205_p1 = i_op_assign_fu_199_p2;

assign OP1_V_cast1_fu_571_p0 = m_V_q0;

assign OP1_V_cast1_fu_571_p1 = OP1_V_cast1_fu_571_p0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_op_assign_fu_199_p2 = (tmp_1_cast_fu_196_p1 - tmp_cast_fu_193_p1);

assign out_V = ((tmp_5_reg_1040[0:0] === 1'b1) ? 6'd0 : p_Result_4_5_fu_792_p7);

assign p_Repl2_0_trunc_fu_666_p2 = (tmp_9_reg_911 & tmp_2_fu_661_p2);

assign p_Repl2_1_trunc_fu_689_p2 = (tmp_9_reg_911 & tmp_8_fu_684_p2);

assign p_Repl2_2_trunc_fu_712_p2 = (tmp_9_reg_911 & tmp_10_fu_707_p2);

assign p_Repl2_3_trunc_fu_735_p2 = (tmp_9_reg_911 & tmp_11_fu_730_p2);

assign p_Repl2_4_trunc_fu_758_p2 = (tmp_9_reg_911 & tmp_16_fu_753_p2);

assign p_Repl2_5_trunc_fu_787_p2 = (tmp_9_reg_911 & tmp_18_fu_782_p2);

assign p_Result_4_5_fu_792_p7 = {{{{{{p_Repl2_5_trunc_reg_1070}, {p_Repl2_4_trunc_reg_1065}}, {p_Repl2_3_trunc_reg_1060}}, {p_Repl2_2_trunc_reg_1055}}, {p_Repl2_1_trunc_reg_1050}}, {p_Repl2_0_trunc_reg_1045}};

assign p_Val2_1_fu_823_p0 = OP1_V_1_cast_reg_876;

assign p_Val2_3_fu_835_p0 = OP1_V_1_cast_reg_876;

assign p_Val2_4_fu_841_p0 = OP1_V_1_cast_reg_876;

assign p_Val2_5_fu_847_p0 = OP1_V_1_cast_reg_876;

assign p_Val2_s_4_fu_829_p0 = OP1_V_1_cast_reg_876;

assign p_shl_cast_fu_583_p1 = $signed(p_shl_fu_575_p3);

assign p_shl_fu_575_p1 = m_V_q0;

assign p_shl_fu_575_p3 = {{p_shl_fu_575_p1}, {2'd0}};

assign r_V_2_1_fu_327_p2 = ($signed(tmp_6_cast_reg_921) + $signed(p_Val2_1_reg_930));

assign r_V_2_2_fu_388_p2 = ($signed(tmp_6_cast_reg_921) + $signed(p_Val2_s_4_reg_960));

assign r_V_2_3_fu_449_p2 = ($signed(tmp_6_cast_reg_921) + $signed(p_Val2_3_reg_980));

assign r_V_2_4_fu_510_p2 = ($signed(tmp_6_cast_reg_921) + $signed(p_Val2_4_reg_1000));

assign r_V_2_5_fu_599_p2 = ($signed(tmp_6_cast_reg_921) + $signed(p_Val2_5_reg_1025));

assign r_V_2_fu_261_p2 = ($signed(tmp_6_cast_fu_257_p1) + $signed(p_Val2_s_reg_885));

assign r_V_fu_587_p2 = ($signed(p_shl_cast_fu_583_p1) - $signed(OP1_V_cast1_fu_571_p1));

assign tmp_10_fu_707_p2 = (tmp_7_reg_945 | tmp_20_2_fu_702_p2);

assign tmp_11_fu_730_p2 = (tmp_7_reg_945 | tmp_20_3_fu_725_p2);

assign tmp_12_1_fu_339_p2 = ((tmp_41_reg_935 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_12_2_fu_400_p2 = ((tmp_43_reg_965 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_12_3_fu_461_p2 = ((tmp_45_reg_985 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_12_4_fu_522_p2 = ((tmp_47_reg_1005 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_12_5_fu_611_p2 = ((tmp_49_reg_1030 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_12_fu_295_p3 = ((tmp_1_fu_274_p2[0:0] === 1'b1) ? tmp_3_fu_279_p4 : tmp_4_fu_289_p2);

assign tmp_13_fu_230_p2 = (16'd1 + acc);

assign tmp_14_fu_236_p3 = ((tmp_s_fu_225_p2[0:0] === 1'b1) ? tmp_13_fu_230_p2 : 16'd0);

assign tmp_15_fu_303_p3 = ((tmp_fu_266_p3[0:0] === 1'b1) ? tmp_12_fu_295_p3 : tmp_3_fu_279_p4);

assign tmp_16_fu_753_p2 = (tmp_7_reg_945 | tmp_20_4_fu_748_p2);

assign tmp_17_1_fu_383_p2 = ((acc_load_reg_900 < tmp_22_fu_368_p3) ? 1'b1 : 1'b0);

assign tmp_17_2_fu_444_p2 = ((acc_load_reg_900 < tmp_26_fu_429_p3) ? 1'b1 : 1'b0);

assign tmp_17_3_fu_505_p2 = ((acc_load_reg_900 < tmp_30_fu_490_p3) ? 1'b1 : 1'b0);

assign tmp_17_4_fu_566_p2 = ((acc_load_reg_900 < tmp_34_fu_551_p3) ? 1'b1 : 1'b0);

assign tmp_17_5_fu_763_p2 = ((acc_load_reg_900 < tmp_38_fu_640_p3) ? 1'b1 : 1'b0);

assign tmp_17_fu_322_p2 = ((acc_load_reg_900 < tmp_15_fu_303_p3) ? 1'b1 : 1'b0);

assign tmp_18_fu_782_p2 = (tmp_7_reg_945 | tmp_20_5_fu_776_p2);

assign tmp_19_fu_344_p4 = {{r_V_2_1_fu_327_p2[30:15]}};

assign tmp_1_cast_fu_196_p1 = max_duty_read_reg_858;

assign tmp_1_fu_274_p2 = ((tmp_39_reg_890 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_20_1_fu_679_p2 = (tmp_51_fu_671_p3 & tmp_17_1_reg_975);

assign tmp_20_2_fu_702_p2 = (tmp_52_fu_694_p3 & tmp_17_2_reg_995);

assign tmp_20_3_fu_725_p2 = (tmp_53_fu_717_p3 & tmp_17_3_reg_1015);

assign tmp_20_4_fu_748_p2 = (tmp_54_fu_740_p3 & tmp_17_4_reg_1035);

assign tmp_20_5_fu_776_p2 = (tmp_55_fu_768_p3 & tmp_17_5_fu_763_p2);

assign tmp_20_fu_354_p2 = (16'd1 + tmp_19_fu_344_p4);

assign tmp_20_s_fu_656_p2 = (tmp_50_fu_652_p1 & tmp_17_reg_955);

assign tmp_21_fu_360_p3 = ((tmp_12_1_fu_339_p2[0:0] === 1'b1) ? tmp_19_fu_344_p4 : tmp_20_fu_354_p2);

assign tmp_22_fu_368_p3 = ((tmp_40_fu_331_p3[0:0] === 1'b1) ? tmp_21_fu_360_p3 : tmp_19_fu_344_p4);

assign tmp_23_fu_405_p4 = {{r_V_2_2_fu_388_p2[30:15]}};

assign tmp_24_fu_415_p2 = (16'd1 + tmp_23_fu_405_p4);

assign tmp_25_fu_421_p3 = ((tmp_12_2_fu_400_p2[0:0] === 1'b1) ? tmp_23_fu_405_p4 : tmp_24_fu_415_p2);

assign tmp_26_fu_429_p3 = ((tmp_42_fu_392_p3[0:0] === 1'b1) ? tmp_25_fu_421_p3 : tmp_23_fu_405_p4);

assign tmp_27_fu_466_p4 = {{r_V_2_3_fu_449_p2[30:15]}};

assign tmp_28_fu_476_p2 = (16'd1 + tmp_27_fu_466_p4);

assign tmp_29_fu_482_p3 = ((tmp_12_3_fu_461_p2[0:0] === 1'b1) ? tmp_27_fu_466_p4 : tmp_28_fu_476_p2);

assign tmp_2_fu_661_p2 = (tmp_7_reg_945 | tmp_20_s_fu_656_p2);

assign tmp_30_fu_490_p3 = ((tmp_44_fu_453_p3[0:0] === 1'b1) ? tmp_29_fu_482_p3 : tmp_27_fu_466_p4);

assign tmp_31_fu_527_p4 = {{r_V_2_4_fu_510_p2[30:15]}};

assign tmp_32_fu_537_p2 = (16'd1 + tmp_31_fu_527_p4);

assign tmp_33_fu_543_p3 = ((tmp_12_4_fu_522_p2[0:0] === 1'b1) ? tmp_31_fu_527_p4 : tmp_32_fu_537_p2);

assign tmp_34_fu_551_p3 = ((tmp_46_fu_514_p3[0:0] === 1'b1) ? tmp_33_fu_543_p3 : tmp_31_fu_527_p4);

assign tmp_35_fu_616_p4 = {{r_V_2_5_fu_599_p2[30:15]}};

assign tmp_36_fu_626_p2 = (16'd1 + tmp_35_fu_616_p4);

assign tmp_37_fu_632_p3 = ((tmp_12_5_fu_611_p2[0:0] === 1'b1) ? tmp_35_fu_616_p4 : tmp_36_fu_626_p2);

assign tmp_38_fu_640_p3 = ((tmp_48_fu_603_p3[0:0] === 1'b1) ? tmp_37_fu_632_p3 : tmp_35_fu_616_p4);

assign tmp_39_fu_213_p1 = p_Val2_s_fu_816_p2[14:0];

assign tmp_3_fu_279_p4 = {{r_V_2_fu_261_p2[30:15]}};

assign tmp_40_fu_331_p3 = r_V_2_1_fu_327_p2[32'd32];

assign tmp_41_fu_315_p1 = p_Val2_1_fu_823_p2[14:0];

assign tmp_42_fu_392_p3 = r_V_2_2_fu_388_p2[32'd32];

assign tmp_43_fu_380_p1 = p_Val2_s_4_fu_829_p2[14:0];

assign tmp_44_fu_453_p3 = r_V_2_3_fu_449_p2[32'd32];

assign tmp_45_fu_441_p1 = p_Val2_3_fu_835_p2[14:0];

assign tmp_46_fu_514_p3 = r_V_2_4_fu_510_p2[32'd32];

assign tmp_47_fu_502_p1 = p_Val2_4_fu_841_p2[14:0];

assign tmp_48_fu_603_p3 = r_V_2_5_fu_599_p2[32'd32];

assign tmp_49_fu_563_p1 = p_Val2_5_fu_847_p2[14:0];

assign tmp_4_fu_289_p2 = (16'd1 + tmp_3_fu_279_p4);

assign tmp_50_fu_652_p1 = out_p_V[0:0];

assign tmp_51_fu_671_p3 = out_p_V[32'd1];

assign tmp_52_fu_694_p3 = out_p_V[32'd2];

assign tmp_53_fu_717_p3 = out_p_V[32'd3];

assign tmp_54_fu_740_p3 = out_p_V[32'd4];

assign tmp_55_fu_768_p3 = out_p_V[32'd5];

assign tmp_5_fu_593_p2 = (($signed(r_V_fu_587_p2) > $signed(19'd32768)) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_257_p1 = tmp_6_fu_250_p3;

assign tmp_6_fu_250_p3 = {{min_duty_read_reg_864}, {15'd0}};

assign tmp_7_fu_318_p2 = ((acc_load_reg_900 < min_duty_read_reg_864) ? 1'b1 : 1'b0);

assign tmp_8_fu_684_p2 = (tmp_7_reg_945 | tmp_20_1_fu_679_p2);

assign tmp_9_fu_220_p2 = ((acc < max_duty_read_reg_858) ? 1'b1 : 1'b0);

assign tmp_cast_fu_193_p1 = min_duty_read_reg_864;

assign tmp_fu_266_p3 = r_V_2_fu_261_p2[32'd32];

assign tmp_s_fu_225_p2 = ((acc < period_read_reg_853) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_6_cast_reg_921[14:0] <= 15'b000000000000000;
    tmp_6_cast_reg_921[32:31] <= 2'b00;
end

endmodule //pwm
