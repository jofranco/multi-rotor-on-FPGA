// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=17,HLS_SYN_TPT=9,HLS_SYN_MEM=10,HLS_SYN_DSP=8,HLS_SYN_FF=848,HLS_SYN_LUT=1785,HLS_VERSION=2018_2}" *)

module pwm (
        ap_clk,
        ap_rst_n,
        out_V,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_TEST_AWVALID,
        s_axi_TEST_AWREADY,
        s_axi_TEST_AWADDR,
        s_axi_TEST_WVALID,
        s_axi_TEST_WREADY,
        s_axi_TEST_WDATA,
        s_axi_TEST_WSTRB,
        s_axi_TEST_ARVALID,
        s_axi_TEST_ARREADY,
        s_axi_TEST_ARADDR,
        s_axi_TEST_RVALID,
        s_axi_TEST_RREADY,
        s_axi_TEST_RDATA,
        s_axi_TEST_RRESP,
        s_axi_TEST_BVALID,
        s_axi_TEST_BREADY,
        s_axi_TEST_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 9'd1;
parameter    ap_ST_fsm_pp0_stage1 = 9'd2;
parameter    ap_ST_fsm_pp0_stage2 = 9'd4;
parameter    ap_ST_fsm_pp0_stage3 = 9'd8;
parameter    ap_ST_fsm_pp0_stage4 = 9'd16;
parameter    ap_ST_fsm_pp0_stage5 = 9'd32;
parameter    ap_ST_fsm_pp0_stage6 = 9'd64;
parameter    ap_ST_fsm_pp0_stage7 = 9'd128;
parameter    ap_ST_fsm_pp0_stage8 = 9'd256;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_ADDR_WIDTH = 15;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_TEST_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] out_V;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_TEST_AWVALID;
output   s_axi_TEST_AWREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_AWADDR;
input   s_axi_TEST_WVALID;
output   s_axi_TEST_WREADY;
input  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_WDATA;
input  [C_S_AXI_TEST_WSTRB_WIDTH - 1:0] s_axi_TEST_WSTRB;
input   s_axi_TEST_ARVALID;
output   s_axi_TEST_ARREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_ARADDR;
output   s_axi_TEST_RVALID;
input   s_axi_TEST_RREADY;
output  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_RDATA;
output  [1:0] s_axi_TEST_RRESP;
output   s_axi_TEST_BVALID;
input   s_axi_TEST_BREADY;
output  [1:0] s_axi_TEST_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state18_pp0_stage8_iter1;
wire    ap_block_pp0_stage8_11001;
wire   [31:0] min_duty;
wire   [31:0] max_duty;
wire   [31:0] period;
reg   [3:0] m_V_address0;
reg    m_V_ce0;
wire  signed [15:0] m_V_q0;
reg   [11:0] test_address0;
reg    test_ce0;
reg    test_we0;
reg   [31:0] test_d0;
reg   [15:0] acc;
reg   [7:0] out_p_V;
wire   [15:0] tmp_2_fu_310_p1;
reg   [15:0] tmp_2_reg_1291;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] p_Val2_8_fu_314_p1;
reg   [15:0] p_Val2_8_reg_1296;
reg   [15:0] acc_load_reg_1307;
wire   [0:0] tmp_21_fu_326_p2;
reg   [0:0] tmp_21_reg_1320;
wire   [31:0] OP1_V_fu_362_p1;
reg   [31:0] OP1_V_reg_1332;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire  signed [31:0] p_Val2_s_fu_1242_p2;
reg  signed [31:0] p_Val2_s_reg_1343;
wire   [12:0] tmp_61_fu_369_p1;
reg   [12:0] tmp_61_reg_1348;
wire   [32:0] tmp_7_cast_fu_382_p1;
reg   [32:0] tmp_7_cast_reg_1358;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire  signed [31:0] p_Val2_1_fu_1249_p2;
reg  signed [31:0] p_Val2_1_reg_1369;
wire   [12:0] tmp_63_fu_441_p1;
reg   [12:0] tmp_63_reg_1374;
wire   [0:0] tmp_13_fu_444_p2;
reg   [0:0] tmp_13_reg_1384;
wire   [0:0] tmp_16_fu_448_p2;
reg   [0:0] tmp_16_reg_1396;
wire  signed [31:0] p_Val2_2_fu_1255_p2;
reg  signed [31:0] p_Val2_2_reg_1401;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state13_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [12:0] tmp_65_fu_510_p1;
reg   [12:0] tmp_65_reg_1406;
wire   [0:0] tmp_16_1_fu_513_p2;
reg   [0:0] tmp_16_1_reg_1416;
wire  signed [31:0] p_Val2_s_6_fu_1261_p2;
reg  signed [31:0] p_Val2_s_6_reg_1421;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state14_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [12:0] tmp_67_fu_575_p1;
reg   [12:0] tmp_67_reg_1426;
wire   [0:0] tmp_16_2_fu_578_p2;
reg   [0:0] tmp_16_2_reg_1436;
wire  signed [31:0] p_Val2_3_fu_1267_p2;
reg  signed [31:0] p_Val2_3_reg_1441;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state15_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [12:0] tmp_69_fu_640_p1;
reg   [12:0] tmp_69_reg_1446;
wire   [0:0] tmp_16_3_fu_643_p2;
reg   [0:0] tmp_16_3_reg_1456;
wire  signed [31:0] p_Val2_5_fu_1273_p2;
reg  signed [31:0] p_Val2_5_reg_1461;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state16_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_11001;
wire   [12:0] tmp_71_fu_705_p1;
reg   [12:0] tmp_71_reg_1466;
wire   [0:0] tmp_16_4_fu_708_p2;
reg   [0:0] tmp_16_4_reg_1476;
wire  signed [31:0] p_Val2_6_fu_1279_p2;
reg  signed [31:0] p_Val2_6_reg_1481;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state17_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_11001;
wire   [12:0] tmp_73_fu_770_p1;
reg   [12:0] tmp_73_reg_1486;
wire   [0:0] tmp_16_5_fu_773_p2;
reg   [0:0] tmp_16_5_reg_1496;
wire  signed [31:0] p_Val2_7_fu_1285_p2;
reg  signed [31:0] p_Val2_7_reg_1506;
wire   [12:0] tmp_75_fu_835_p1;
reg   [12:0] tmp_75_reg_1511;
wire   [0:0] tmp_16_6_fu_838_p2;
reg   [0:0] tmp_16_6_reg_1516;
wire   [0:0] icmp_fu_875_p2;
reg   [0:0] icmp_reg_1521;
wire   [0:0] p_Repl2_0_trunc_fu_952_p2;
reg   [0:0] p_Repl2_0_trunc_reg_1526;
wire   [0:0] p_Repl2_1_trunc_fu_975_p2;
reg   [0:0] p_Repl2_1_trunc_reg_1531;
wire   [0:0] p_Repl2_2_trunc_fu_998_p2;
reg   [0:0] p_Repl2_2_trunc_reg_1536;
wire   [0:0] p_Repl2_3_trunc_fu_1021_p2;
reg   [0:0] p_Repl2_3_trunc_reg_1541;
wire   [0:0] p_Repl2_4_trunc_fu_1044_p2;
reg   [0:0] p_Repl2_4_trunc_reg_1546;
wire   [0:0] p_Repl2_5_trunc_fu_1067_p2;
reg   [0:0] p_Repl2_5_trunc_reg_1551;
wire   [0:0] p_Repl2_6_trunc_fu_1090_p2;
reg   [0:0] p_Repl2_6_trunc_reg_1556;
wire   [0:0] p_Repl2_7_trunc_fu_1119_p2;
reg   [0:0] p_Repl2_7_trunc_reg_1561;
wire   [7:0] p_Val2_4_fu_1142_p3;
reg   [7:0] p_Val2_4_reg_1566;
reg   [0:0] tmp_87_reg_1571;
reg   [0:0] tmp_88_reg_1576;
reg   [0:0] tmp_89_reg_1581;
reg   [0:0] tmp_90_reg_1586;
reg   [0:0] tmp_91_reg_1591;
reg   [0:0] tmp_92_reg_1596;
reg   [0:0] tmp_93_reg_1601;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire   [15:0] tmp_11_fu_348_p3;
wire   [7:0] p_Result_4_7_fu_1124_p9;
wire    ap_block_pp0_stage8_01001;
wire   [31:0] tmp_12_fu_1153_p1;
wire   [31:0] tmp_22_fu_1214_p1;
wire   [31:0] tmp_23_fu_1218_p1;
wire   [31:0] tmp_25_fu_1222_p1;
wire   [31:0] tmp_26_fu_1226_p1;
wire   [31:0] tmp_27_fu_1230_p1;
wire   [31:0] tmp_28_fu_1234_p1;
wire   [31:0] tmp_29_fu_1238_p1;
wire   [31:0] tmp_1_fu_304_p2;
wire   [15:0] tmp_76_fu_318_p1;
wire   [15:0] tmp_85_fu_332_p1;
wire   [0:0] tmp_s_fu_336_p2;
wire   [15:0] tmp_10_fu_342_p2;
wire   [28:0] tmp_7_fu_375_p3;
wire  signed [32:0] tmp_5_fu_372_p1;
wire   [32:0] r_V_2_fu_386_p2;
wire   [15:0] tmp_6_fu_405_p4;
wire   [0:0] tmp_8_fu_400_p2;
wire   [15:0] tmp_9_fu_415_p2;
wire   [0:0] tmp_31_fu_392_p3;
wire   [15:0] tmp_24_fu_421_p3;
wire   [15:0] tmp_30_fu_429_p3;
wire  signed [32:0] tmp_5_1_fu_453_p1;
wire   [32:0] r_V_2_1_fu_456_p2;
wire   [15:0] tmp_32_fu_474_p4;
wire   [0:0] tmp_8_1_fu_469_p2;
wire   [15:0] tmp_33_fu_484_p2;
wire   [0:0] tmp_62_fu_461_p3;
wire   [15:0] tmp_34_fu_490_p3;
wire   [15:0] tmp_35_fu_498_p3;
wire  signed [32:0] tmp_5_2_fu_518_p1;
wire   [32:0] r_V_2_2_fu_521_p2;
wire   [15:0] tmp_36_fu_539_p4;
wire   [0:0] tmp_8_2_fu_534_p2;
wire   [15:0] tmp_37_fu_549_p2;
wire   [0:0] tmp_64_fu_526_p3;
wire   [15:0] tmp_38_fu_555_p3;
wire   [15:0] tmp_39_fu_563_p3;
wire  signed [32:0] tmp_5_3_fu_583_p1;
wire   [32:0] r_V_2_3_fu_586_p2;
wire   [15:0] tmp_40_fu_604_p4;
wire   [0:0] tmp_8_3_fu_599_p2;
wire   [15:0] tmp_41_fu_614_p2;
wire   [0:0] tmp_66_fu_591_p3;
wire   [15:0] tmp_42_fu_620_p3;
wire   [15:0] tmp_43_fu_628_p3;
wire  signed [32:0] tmp_5_4_fu_648_p1;
wire   [32:0] r_V_2_4_fu_651_p2;
wire   [15:0] tmp_44_fu_669_p4;
wire   [0:0] tmp_8_4_fu_664_p2;
wire   [15:0] tmp_45_fu_679_p2;
wire   [0:0] tmp_68_fu_656_p3;
wire   [15:0] tmp_46_fu_685_p3;
wire   [15:0] tmp_47_fu_693_p3;
wire  signed [32:0] tmp_5_5_fu_713_p1;
wire   [32:0] r_V_2_5_fu_716_p2;
wire   [15:0] tmp_48_fu_734_p4;
wire   [0:0] tmp_8_5_fu_729_p2;
wire   [15:0] tmp_49_fu_744_p2;
wire   [0:0] tmp_70_fu_721_p3;
wire   [15:0] tmp_50_fu_750_p3;
wire   [15:0] tmp_51_fu_758_p3;
wire  signed [32:0] tmp_5_6_fu_778_p1;
wire   [32:0] r_V_2_6_fu_781_p2;
wire   [15:0] tmp_52_fu_799_p4;
wire   [0:0] tmp_8_6_fu_794_p2;
wire   [15:0] tmp_53_fu_809_p2;
wire   [0:0] tmp_72_fu_786_p3;
wire   [15:0] tmp_54_fu_815_p3;
wire   [15:0] tmp_55_fu_823_p3;
wire  signed [15:0] OP1_V_cast1_fu_843_p0;
wire  signed [15:0] p_shl_fu_847_p1;
wire   [17:0] p_shl_fu_847_p3;
wire  signed [18:0] p_shl_cast_fu_855_p1;
wire  signed [18:0] OP1_V_cast1_fu_843_p1;
wire   [18:0] r_V_fu_859_p2;
wire   [5:0] tmp_fu_865_p4;
wire  signed [32:0] tmp_5_7_fu_881_p1;
wire   [32:0] r_V_2_7_fu_884_p2;
wire   [15:0] tmp_56_fu_902_p4;
wire   [0:0] tmp_8_7_fu_897_p2;
wire   [15:0] tmp_57_fu_912_p2;
wire   [0:0] tmp_74_fu_889_p3;
wire   [15:0] tmp_58_fu_918_p3;
wire   [0:0] tmp_77_fu_938_p1;
wire   [0:0] tmp_19_s_fu_942_p2;
wire   [0:0] tmp_3_fu_947_p2;
wire   [0:0] tmp_78_fu_957_p3;
wire   [0:0] tmp_19_1_fu_965_p2;
wire   [0:0] tmp_4_fu_970_p2;
wire   [0:0] tmp_79_fu_980_p3;
wire   [0:0] tmp_19_2_fu_988_p2;
wire   [0:0] tmp_14_fu_993_p2;
wire   [0:0] tmp_80_fu_1003_p3;
wire   [0:0] tmp_19_3_fu_1011_p2;
wire   [0:0] tmp_15_fu_1016_p2;
wire   [0:0] tmp_81_fu_1026_p3;
wire   [0:0] tmp_19_4_fu_1034_p2;
wire   [0:0] tmp_17_fu_1039_p2;
wire   [0:0] tmp_82_fu_1049_p3;
wire   [0:0] tmp_19_5_fu_1057_p2;
wire   [0:0] tmp_18_fu_1062_p2;
wire   [0:0] tmp_83_fu_1072_p3;
wire   [0:0] tmp_19_6_fu_1080_p2;
wire   [0:0] tmp_19_fu_1085_p2;
wire   [15:0] tmp_59_fu_926_p3;
wire   [0:0] tmp_84_fu_1100_p3;
wire   [0:0] tmp_16_7_fu_1095_p2;
wire   [0:0] tmp_19_7_fu_1108_p2;
wire   [0:0] tmp_20_fu_1114_p2;
wire   [0:0] tmp_86_fu_1149_p1;
wire   [15:0] p_Val2_s_fu_1242_p1;
wire   [15:0] p_Val2_1_fu_1249_p1;
wire   [15:0] p_Val2_2_fu_1255_p1;
wire   [15:0] p_Val2_s_6_fu_1261_p1;
wire   [15:0] p_Val2_3_fu_1267_p1;
wire   [15:0] p_Val2_5_fu_1273_p1;
wire   [15:0] p_Val2_6_fu_1279_p1;
wire   [15:0] p_Val2_7_fu_1285_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] p_Val2_s_fu_1242_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 acc = 16'd0;
#0 out_p_V = 8'd63;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

pwm_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pwm_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .min_duty(min_duty),
    .max_duty(max_duty),
    .period(period),
    .m_V_address0(m_V_address0),
    .m_V_ce0(m_V_ce0),
    .m_V_q0(m_V_q0)
);

pwm_TEST_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TEST_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TEST_DATA_WIDTH ))
pwm_TEST_s_axi_U(
    .AWVALID(s_axi_TEST_AWVALID),
    .AWREADY(s_axi_TEST_AWREADY),
    .AWADDR(s_axi_TEST_AWADDR),
    .WVALID(s_axi_TEST_WVALID),
    .WREADY(s_axi_TEST_WREADY),
    .WDATA(s_axi_TEST_WDATA),
    .WSTRB(s_axi_TEST_WSTRB),
    .ARVALID(s_axi_TEST_ARVALID),
    .ARREADY(s_axi_TEST_ARREADY),
    .ARADDR(s_axi_TEST_ARADDR),
    .RVALID(s_axi_TEST_RVALID),
    .RREADY(s_axi_TEST_RREADY),
    .RDATA(s_axi_TEST_RDATA),
    .RRESP(s_axi_TEST_RRESP),
    .BVALID(s_axi_TEST_BVALID),
    .BREADY(s_axi_TEST_BREADY),
    .BRESP(s_axi_TEST_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .test_address0(test_address0),
    .test_ce0(test_ce0),
    .test_we0(test_we0),
    .test_d0(test_d0)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U1(
    .din0(m_V_q0),
    .din1(p_Val2_s_fu_1242_p1),
    .dout(p_Val2_s_fu_1242_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U2(
    .din0(m_V_q0),
    .din1(p_Val2_1_fu_1249_p1),
    .dout(p_Val2_1_fu_1249_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U3(
    .din0(m_V_q0),
    .din1(p_Val2_2_fu_1255_p1),
    .dout(p_Val2_2_fu_1255_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U4(
    .din0(m_V_q0),
    .din1(p_Val2_s_6_fu_1261_p1),
    .dout(p_Val2_s_6_fu_1261_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U5(
    .din0(m_V_q0),
    .din1(p_Val2_3_fu_1267_p1),
    .dout(p_Val2_3_fu_1267_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U6(
    .din0(m_V_q0),
    .din1(p_Val2_5_fu_1273_p1),
    .dout(p_Val2_5_fu_1273_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U7(
    .din0(m_V_q0),
    .din1(p_Val2_6_fu_1279_p1),
    .dout(p_Val2_6_fu_1279_p2)
);

pwm_mul_mul_16s_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pwm_mul_mul_16s_1bkb_U8(
    .din0(m_V_q0),
    .din1(p_Val2_7_fu_1285_p1),
    .dout(p_Val2_7_fu_1285_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        OP1_V_reg_1332[15 : 0] <= OP1_V_fu_362_p1[15 : 0];
        p_Val2_4_reg_1566 <= p_Val2_4_fu_1142_p3;
        p_Val2_s_reg_1343 <= p_Val2_s_fu_1242_p2;
        tmp_61_reg_1348 <= tmp_61_fu_369_p1;
        tmp_87_reg_1571 <= p_Val2_4_fu_1142_p3[32'd1];
        tmp_88_reg_1576 <= p_Val2_4_fu_1142_p3[32'd2];
        tmp_89_reg_1581 <= p_Val2_4_fu_1142_p3[32'd3];
        tmp_90_reg_1586 <= p_Val2_4_fu_1142_p3[32'd4];
        tmp_91_reg_1591 <= p_Val2_4_fu_1142_p3[32'd5];
        tmp_92_reg_1596 <= p_Val2_4_fu_1142_p3[32'd6];
        tmp_93_reg_1601 <= p_Val2_4_fu_1142_p3[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc <= tmp_11_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc_load_reg_1307 <= acc;
        icmp_reg_1521 <= icmp_fu_875_p2;
        p_Repl2_0_trunc_reg_1526 <= p_Repl2_0_trunc_fu_952_p2;
        p_Repl2_1_trunc_reg_1531 <= p_Repl2_1_trunc_fu_975_p2;
        p_Repl2_2_trunc_reg_1536 <= p_Repl2_2_trunc_fu_998_p2;
        p_Repl2_3_trunc_reg_1541 <= p_Repl2_3_trunc_fu_1021_p2;
        p_Repl2_4_trunc_reg_1546 <= p_Repl2_4_trunc_fu_1044_p2;
        p_Repl2_5_trunc_reg_1551 <= p_Repl2_5_trunc_fu_1067_p2;
        p_Repl2_6_trunc_reg_1556 <= p_Repl2_6_trunc_fu_1090_p2;
        p_Repl2_7_trunc_reg_1561 <= p_Repl2_7_trunc_fu_1119_p2;
        p_Val2_8_reg_1296 <= p_Val2_8_fu_314_p1;
        tmp_21_reg_1320 <= tmp_21_fu_326_p2;
        tmp_2_reg_1291 <= tmp_2_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_p_V <= p_Result_4_7_fu_1124_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        p_Val2_1_reg_1369 <= p_Val2_1_fu_1249_p2;
        tmp_13_reg_1384 <= tmp_13_fu_444_p2;
        tmp_16_reg_1396 <= tmp_16_fu_448_p2;
        tmp_63_reg_1374 <= tmp_63_fu_441_p1;
        tmp_7_cast_reg_1358[28 : 13] <= tmp_7_cast_fu_382_p1[28 : 13];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_Val2_2_reg_1401 <= p_Val2_2_fu_1255_p2;
        tmp_16_1_reg_1416 <= tmp_16_1_fu_513_p2;
        tmp_65_reg_1406 <= tmp_65_fu_510_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_Val2_3_reg_1441 <= p_Val2_3_fu_1267_p2;
        tmp_16_3_reg_1456 <= tmp_16_3_fu_643_p2;
        tmp_69_reg_1446 <= tmp_69_fu_640_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_Val2_5_reg_1461 <= p_Val2_5_fu_1273_p2;
        tmp_16_4_reg_1476 <= tmp_16_4_fu_708_p2;
        tmp_71_reg_1466 <= tmp_71_fu_705_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        p_Val2_6_reg_1481 <= p_Val2_6_fu_1279_p2;
        tmp_16_5_reg_1496 <= tmp_16_5_fu_773_p2;
        tmp_73_reg_1486 <= tmp_73_fu_770_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        p_Val2_7_reg_1506 <= p_Val2_7_fu_1285_p2;
        tmp_16_6_reg_1516 <= tmp_16_6_fu_838_p2;
        tmp_75_reg_1511 <= tmp_75_fu_835_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_Val2_s_6_reg_1421 <= p_Val2_s_6_fu_1261_p2;
        tmp_16_2_reg_1436 <= tmp_16_2_fu_578_p2;
        tmp_67_reg_1426 <= tmp_67_fu_575_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            m_V_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            m_V_address0 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            m_V_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            m_V_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            m_V_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            m_V_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            m_V_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            m_V_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m_V_address0 = 64'd0;
        end else begin
            m_V_address0 = 'bx;
        end
    end else begin
        m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_V_ce0 = 1'b1;
    end else begin
        m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            test_address0 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            test_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            test_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            test_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            test_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            test_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            test_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            test_address0 = 64'd0;
        end else begin
            test_address0 = 'bx;
        end
    end else begin
        test_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        test_ce0 = 1'b1;
    end else begin
        test_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            test_d0 = tmp_29_fu_1238_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            test_d0 = tmp_28_fu_1234_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            test_d0 = tmp_27_fu_1230_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            test_d0 = tmp_26_fu_1226_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            test_d0 = tmp_25_fu_1222_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            test_d0 = tmp_23_fu_1218_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            test_d0 = tmp_22_fu_1214_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            test_d0 = tmp_12_fu_1153_p1;
        end else begin
            test_d0 = 'bx;
        end
    end else begin
        test_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        test_we0 = 1'b1;
    end else begin
        test_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((((1'b0 == ap_block_pp0_stage8_subdone) & (ap_reset_idle_pp0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast1_fu_843_p0 = m_V_q0;

assign OP1_V_cast1_fu_843_p1 = OP1_V_cast1_fu_843_p0;

assign OP1_V_fu_362_p1 = tmp_2_reg_1291;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_fu_875_p2 = (($signed(tmp_fu_865_p4) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign out_V = p_Val2_4_reg_1566;

assign p_Repl2_0_trunc_fu_952_p2 = (tmp_3_fu_947_p2 & tmp_21_reg_1320);

assign p_Repl2_1_trunc_fu_975_p2 = (tmp_4_fu_970_p2 & tmp_21_reg_1320);

assign p_Repl2_2_trunc_fu_998_p2 = (tmp_21_reg_1320 & tmp_14_fu_993_p2);

assign p_Repl2_3_trunc_fu_1021_p2 = (tmp_21_reg_1320 & tmp_15_fu_1016_p2);

assign p_Repl2_4_trunc_fu_1044_p2 = (tmp_21_reg_1320 & tmp_17_fu_1039_p2);

assign p_Repl2_5_trunc_fu_1067_p2 = (tmp_21_reg_1320 & tmp_18_fu_1062_p2);

assign p_Repl2_6_trunc_fu_1090_p2 = (tmp_21_reg_1320 & tmp_19_fu_1085_p2);

assign p_Repl2_7_trunc_fu_1119_p2 = (tmp_21_reg_1320 & tmp_20_fu_1114_p2);

assign p_Result_4_7_fu_1124_p9 = {{{{{{{{p_Repl2_7_trunc_reg_1561}, {p_Repl2_6_trunc_reg_1556}}, {p_Repl2_5_trunc_reg_1551}}, {p_Repl2_4_trunc_reg_1546}}, {p_Repl2_3_trunc_reg_1541}}, {p_Repl2_2_trunc_reg_1536}}, {p_Repl2_1_trunc_reg_1531}}, {p_Repl2_0_trunc_reg_1526}};

assign p_Val2_1_fu_1249_p1 = OP1_V_reg_1332;

assign p_Val2_2_fu_1255_p1 = OP1_V_reg_1332;

assign p_Val2_3_fu_1267_p1 = OP1_V_reg_1332;

assign p_Val2_4_fu_1142_p3 = ((icmp_reg_1521[0:0] === 1'b1) ? 8'd0 : p_Result_4_7_fu_1124_p9);

assign p_Val2_5_fu_1273_p1 = OP1_V_reg_1332;

assign p_Val2_6_fu_1279_p1 = OP1_V_reg_1332;

assign p_Val2_7_fu_1285_p1 = OP1_V_reg_1332;

assign p_Val2_8_fu_314_p1 = min_duty[15:0];

assign p_Val2_s_6_fu_1261_p1 = OP1_V_reg_1332;

assign p_Val2_s_fu_1242_p1 = p_Val2_s_fu_1242_p10;

assign p_Val2_s_fu_1242_p10 = tmp_2_reg_1291;

assign p_shl_cast_fu_855_p1 = $signed(p_shl_fu_847_p3);

assign p_shl_fu_847_p1 = m_V_q0;

assign p_shl_fu_847_p3 = {{p_shl_fu_847_p1}, {2'd0}};

assign r_V_2_1_fu_456_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_1_fu_453_p1));

assign r_V_2_2_fu_521_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_2_fu_518_p1));

assign r_V_2_3_fu_586_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_3_fu_583_p1));

assign r_V_2_4_fu_651_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_4_fu_648_p1));

assign r_V_2_5_fu_716_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_5_fu_713_p1));

assign r_V_2_6_fu_781_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_6_fu_778_p1));

assign r_V_2_7_fu_884_p2 = ($signed(tmp_7_cast_reg_1358) + $signed(tmp_5_7_fu_881_p1));

assign r_V_2_fu_386_p2 = ($signed(tmp_7_cast_fu_382_p1) + $signed(tmp_5_fu_372_p1));

assign r_V_fu_859_p2 = ($signed(p_shl_cast_fu_855_p1) - $signed(OP1_V_cast1_fu_843_p1));

assign tmp_10_fu_342_p2 = (16'd1 + acc);

assign tmp_11_fu_348_p3 = ((tmp_s_fu_336_p2[0:0] === 1'b1) ? tmp_10_fu_342_p2 : 16'd0);

assign tmp_12_fu_1153_p1 = tmp_86_fu_1149_p1;

assign tmp_13_fu_444_p2 = ((acc_load_reg_1307 < p_Val2_8_reg_1296) ? 1'b1 : 1'b0);

assign tmp_14_fu_993_p2 = (tmp_19_2_fu_988_p2 | tmp_13_reg_1384);

assign tmp_15_fu_1016_p2 = (tmp_19_3_fu_1011_p2 | tmp_13_reg_1384);

assign tmp_16_1_fu_513_p2 = ((acc_load_reg_1307 < tmp_35_fu_498_p3) ? 1'b1 : 1'b0);

assign tmp_16_2_fu_578_p2 = ((acc_load_reg_1307 < tmp_39_fu_563_p3) ? 1'b1 : 1'b0);

assign tmp_16_3_fu_643_p2 = ((acc_load_reg_1307 < tmp_43_fu_628_p3) ? 1'b1 : 1'b0);

assign tmp_16_4_fu_708_p2 = ((acc_load_reg_1307 < tmp_47_fu_693_p3) ? 1'b1 : 1'b0);

assign tmp_16_5_fu_773_p2 = ((acc_load_reg_1307 < tmp_51_fu_758_p3) ? 1'b1 : 1'b0);

assign tmp_16_6_fu_838_p2 = ((acc_load_reg_1307 < tmp_55_fu_823_p3) ? 1'b1 : 1'b0);

assign tmp_16_7_fu_1095_p2 = ((acc_load_reg_1307 < tmp_59_fu_926_p3) ? 1'b1 : 1'b0);

assign tmp_16_fu_448_p2 = ((acc_load_reg_1307 < tmp_30_fu_429_p3) ? 1'b1 : 1'b0);

assign tmp_17_fu_1039_p2 = (tmp_19_4_fu_1034_p2 | tmp_13_reg_1384);

assign tmp_18_fu_1062_p2 = (tmp_19_5_fu_1057_p2 | tmp_13_reg_1384);

assign tmp_19_1_fu_965_p2 = (tmp_78_fu_957_p3 & tmp_16_1_reg_1416);

assign tmp_19_2_fu_988_p2 = (tmp_79_fu_980_p3 & tmp_16_2_reg_1436);

assign tmp_19_3_fu_1011_p2 = (tmp_80_fu_1003_p3 & tmp_16_3_reg_1456);

assign tmp_19_4_fu_1034_p2 = (tmp_81_fu_1026_p3 & tmp_16_4_reg_1476);

assign tmp_19_5_fu_1057_p2 = (tmp_82_fu_1049_p3 & tmp_16_5_reg_1496);

assign tmp_19_6_fu_1080_p2 = (tmp_83_fu_1072_p3 & tmp_16_6_reg_1516);

assign tmp_19_7_fu_1108_p2 = (tmp_84_fu_1100_p3 & tmp_16_7_fu_1095_p2);

assign tmp_19_fu_1085_p2 = (tmp_19_6_fu_1080_p2 | tmp_13_reg_1384);

assign tmp_19_s_fu_942_p2 = (tmp_77_fu_938_p1 & tmp_16_reg_1396);

assign tmp_1_fu_304_p2 = (max_duty - min_duty);

assign tmp_20_fu_1114_p2 = (tmp_19_7_fu_1108_p2 | tmp_13_reg_1384);

assign tmp_21_fu_326_p2 = ((acc < tmp_76_fu_318_p1) ? 1'b1 : 1'b0);

assign tmp_22_fu_1214_p1 = tmp_87_reg_1571;

assign tmp_23_fu_1218_p1 = tmp_88_reg_1576;

assign tmp_24_fu_421_p3 = ((tmp_8_fu_400_p2[0:0] === 1'b1) ? tmp_6_fu_405_p4 : tmp_9_fu_415_p2);

assign tmp_25_fu_1222_p1 = tmp_89_reg_1581;

assign tmp_26_fu_1226_p1 = tmp_90_reg_1586;

assign tmp_27_fu_1230_p1 = tmp_91_reg_1591;

assign tmp_28_fu_1234_p1 = tmp_92_reg_1596;

assign tmp_29_fu_1238_p1 = tmp_93_reg_1601;

assign tmp_2_fu_310_p1 = tmp_1_fu_304_p2[15:0];

assign tmp_30_fu_429_p3 = ((tmp_31_fu_392_p3[0:0] === 1'b1) ? tmp_24_fu_421_p3 : tmp_6_fu_405_p4);

assign tmp_31_fu_392_p3 = r_V_2_fu_386_p2[32'd32];

assign tmp_32_fu_474_p4 = {{r_V_2_1_fu_456_p2[28:13]}};

assign tmp_33_fu_484_p2 = (16'd1 + tmp_32_fu_474_p4);

assign tmp_34_fu_490_p3 = ((tmp_8_1_fu_469_p2[0:0] === 1'b1) ? tmp_32_fu_474_p4 : tmp_33_fu_484_p2);

assign tmp_35_fu_498_p3 = ((tmp_62_fu_461_p3[0:0] === 1'b1) ? tmp_34_fu_490_p3 : tmp_32_fu_474_p4);

assign tmp_36_fu_539_p4 = {{r_V_2_2_fu_521_p2[28:13]}};

assign tmp_37_fu_549_p2 = (16'd1 + tmp_36_fu_539_p4);

assign tmp_38_fu_555_p3 = ((tmp_8_2_fu_534_p2[0:0] === 1'b1) ? tmp_36_fu_539_p4 : tmp_37_fu_549_p2);

assign tmp_39_fu_563_p3 = ((tmp_64_fu_526_p3[0:0] === 1'b1) ? tmp_38_fu_555_p3 : tmp_36_fu_539_p4);

assign tmp_3_fu_947_p2 = (tmp_19_s_fu_942_p2 | tmp_13_reg_1384);

assign tmp_40_fu_604_p4 = {{r_V_2_3_fu_586_p2[28:13]}};

assign tmp_41_fu_614_p2 = (16'd1 + tmp_40_fu_604_p4);

assign tmp_42_fu_620_p3 = ((tmp_8_3_fu_599_p2[0:0] === 1'b1) ? tmp_40_fu_604_p4 : tmp_41_fu_614_p2);

assign tmp_43_fu_628_p3 = ((tmp_66_fu_591_p3[0:0] === 1'b1) ? tmp_42_fu_620_p3 : tmp_40_fu_604_p4);

assign tmp_44_fu_669_p4 = {{r_V_2_4_fu_651_p2[28:13]}};

assign tmp_45_fu_679_p2 = (16'd1 + tmp_44_fu_669_p4);

assign tmp_46_fu_685_p3 = ((tmp_8_4_fu_664_p2[0:0] === 1'b1) ? tmp_44_fu_669_p4 : tmp_45_fu_679_p2);

assign tmp_47_fu_693_p3 = ((tmp_68_fu_656_p3[0:0] === 1'b1) ? tmp_46_fu_685_p3 : tmp_44_fu_669_p4);

assign tmp_48_fu_734_p4 = {{r_V_2_5_fu_716_p2[28:13]}};

assign tmp_49_fu_744_p2 = (16'd1 + tmp_48_fu_734_p4);

assign tmp_4_fu_970_p2 = (tmp_19_1_fu_965_p2 | tmp_13_reg_1384);

assign tmp_50_fu_750_p3 = ((tmp_8_5_fu_729_p2[0:0] === 1'b1) ? tmp_48_fu_734_p4 : tmp_49_fu_744_p2);

assign tmp_51_fu_758_p3 = ((tmp_70_fu_721_p3[0:0] === 1'b1) ? tmp_50_fu_750_p3 : tmp_48_fu_734_p4);

assign tmp_52_fu_799_p4 = {{r_V_2_6_fu_781_p2[28:13]}};

assign tmp_53_fu_809_p2 = (16'd1 + tmp_52_fu_799_p4);

assign tmp_54_fu_815_p3 = ((tmp_8_6_fu_794_p2[0:0] === 1'b1) ? tmp_52_fu_799_p4 : tmp_53_fu_809_p2);

assign tmp_55_fu_823_p3 = ((tmp_72_fu_786_p3[0:0] === 1'b1) ? tmp_54_fu_815_p3 : tmp_52_fu_799_p4);

assign tmp_56_fu_902_p4 = {{r_V_2_7_fu_884_p2[28:13]}};

assign tmp_57_fu_912_p2 = (16'd1 + tmp_56_fu_902_p4);

assign tmp_58_fu_918_p3 = ((tmp_8_7_fu_897_p2[0:0] === 1'b1) ? tmp_56_fu_902_p4 : tmp_57_fu_912_p2);

assign tmp_59_fu_926_p3 = ((tmp_74_fu_889_p3[0:0] === 1'b1) ? tmp_58_fu_918_p3 : tmp_56_fu_902_p4);

assign tmp_5_1_fu_453_p1 = p_Val2_1_reg_1369;

assign tmp_5_2_fu_518_p1 = p_Val2_2_reg_1401;

assign tmp_5_3_fu_583_p1 = p_Val2_s_6_reg_1421;

assign tmp_5_4_fu_648_p1 = p_Val2_3_reg_1441;

assign tmp_5_5_fu_713_p1 = p_Val2_5_reg_1461;

assign tmp_5_6_fu_778_p1 = p_Val2_6_reg_1481;

assign tmp_5_7_fu_881_p1 = p_Val2_7_reg_1506;

assign tmp_5_fu_372_p1 = p_Val2_s_reg_1343;

assign tmp_61_fu_369_p1 = p_Val2_s_fu_1242_p2[12:0];

assign tmp_62_fu_461_p3 = r_V_2_1_fu_456_p2[32'd32];

assign tmp_63_fu_441_p1 = p_Val2_1_fu_1249_p2[12:0];

assign tmp_64_fu_526_p3 = r_V_2_2_fu_521_p2[32'd32];

assign tmp_65_fu_510_p1 = p_Val2_2_fu_1255_p2[12:0];

assign tmp_66_fu_591_p3 = r_V_2_3_fu_586_p2[32'd32];

assign tmp_67_fu_575_p1 = p_Val2_s_6_fu_1261_p2[12:0];

assign tmp_68_fu_656_p3 = r_V_2_4_fu_651_p2[32'd32];

assign tmp_69_fu_640_p1 = p_Val2_3_fu_1267_p2[12:0];

assign tmp_6_fu_405_p4 = {{r_V_2_fu_386_p2[28:13]}};

assign tmp_70_fu_721_p3 = r_V_2_5_fu_716_p2[32'd32];

assign tmp_71_fu_705_p1 = p_Val2_5_fu_1273_p2[12:0];

assign tmp_72_fu_786_p3 = r_V_2_6_fu_781_p2[32'd32];

assign tmp_73_fu_770_p1 = p_Val2_6_fu_1279_p2[12:0];

assign tmp_74_fu_889_p3 = r_V_2_7_fu_884_p2[32'd32];

assign tmp_75_fu_835_p1 = p_Val2_7_fu_1285_p2[12:0];

assign tmp_76_fu_318_p1 = max_duty[15:0];

assign tmp_77_fu_938_p1 = out_p_V[0:0];

assign tmp_78_fu_957_p3 = out_p_V[32'd1];

assign tmp_79_fu_980_p3 = out_p_V[32'd2];

assign tmp_7_cast_fu_382_p1 = tmp_7_fu_375_p3;

assign tmp_7_fu_375_p3 = {{p_Val2_8_reg_1296}, {13'd0}};

assign tmp_80_fu_1003_p3 = out_p_V[32'd3];

assign tmp_81_fu_1026_p3 = out_p_V[32'd4];

assign tmp_82_fu_1049_p3 = out_p_V[32'd5];

assign tmp_83_fu_1072_p3 = out_p_V[32'd6];

assign tmp_84_fu_1100_p3 = out_p_V[32'd7];

assign tmp_85_fu_332_p1 = period[15:0];

assign tmp_86_fu_1149_p1 = p_Val2_4_fu_1142_p3[0:0];

assign tmp_8_1_fu_469_p2 = ((tmp_63_reg_1374 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_2_fu_534_p2 = ((tmp_65_reg_1406 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_3_fu_599_p2 = ((tmp_67_reg_1426 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_4_fu_664_p2 = ((tmp_69_reg_1446 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_5_fu_729_p2 = ((tmp_71_reg_1466 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_6_fu_794_p2 = ((tmp_73_reg_1486 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_7_fu_897_p2 = ((tmp_75_reg_1511 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_400_p2 = ((tmp_61_reg_1348 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_415_p2 = (16'd1 + tmp_6_fu_405_p4);

assign tmp_fu_865_p4 = {{r_V_fu_859_p2[18:13]}};

assign tmp_s_fu_336_p2 = ((acc < tmp_85_fu_332_p1) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    OP1_V_reg_1332[31:16] <= 16'b0000000000000000;
    tmp_7_cast_reg_1358[12:0] <= 13'b0000000000000;
    tmp_7_cast_reg_1358[32:29] <= 4'b0000;
end

endmodule //pwm
