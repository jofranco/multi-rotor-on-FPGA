// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pid,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=40,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=74,HLS_SYN_FF=3713,HLS_SYN_LUT=5780,HLS_VERSION=2018_2}" *)

module pid (
        ap_clk,
        ap_rst_n,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_TEST_AWVALID,
        s_axi_TEST_AWREADY,
        s_axi_TEST_AWADDR,
        s_axi_TEST_WVALID,
        s_axi_TEST_WREADY,
        s_axi_TEST_WDATA,
        s_axi_TEST_WSTRB,
        s_axi_TEST_ARVALID,
        s_axi_TEST_ARREADY,
        s_axi_TEST_ARADDR,
        s_axi_TEST_RVALID,
        s_axi_TEST_RREADY,
        s_axi_TEST_RDATA,
        s_axi_TEST_RRESP,
        s_axi_TEST_BVALID,
        s_axi_TEST_BREADY,
        s_axi_TEST_BRESP
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_ADDR_WIDTH = 15;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_TARGET_ADDR = 0;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_TEST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_TEST_AWVALID;
output   s_axi_TEST_AWREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_AWADDR;
input   s_axi_TEST_WVALID;
output   s_axi_TEST_WREADY;
input  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_WDATA;
input  [C_S_AXI_TEST_WSTRB_WIDTH - 1:0] s_axi_TEST_WSTRB;
input   s_axi_TEST_ARVALID;
output   s_axi_TEST_ARREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_ARADDR;
output   s_axi_TEST_RVALID;
input   s_axi_TEST_RREADY;
output  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_RDATA;
output  [1:0] s_axi_TEST_RRESP;
output   s_axi_TEST_BVALID;
input   s_axi_TEST_BREADY;
output  [1:0] s_axi_TEST_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [2:0] cmdIn_V_address0;
reg    cmdIn_V_ce0;
wire   [15:0] cmdIn_V_q0;
reg   [2:0] measured_V_address0;
reg    measured_V_ce0;
wire   [15:0] measured_V_q0;
reg   [2:0] kp_V_address0;
reg    kp_V_ce0;
wire   [31:0] kp_V_q0;
reg   [1:0] kd_V_address0;
reg    kd_V_ce0;
wire   [31:0] kd_V_q0;
reg   [1:0] ki_V_address0;
reg    ki_V_ce0;
wire   [31:0] ki_V_q0;
reg   [11:0] test_V_address0;
reg    test_V_ce0;
reg    test_V_we0;
reg   [31:0] test_V_d0;
reg   [2:0] buffer_V_address0;
reg    buffer_V_ce0;
reg    buffer_V_we0;
wire   [15:0] buffer_V_q0;
reg   [31:0] integral_pos_V_0;
reg   [15:0] last_error_pos_V_0;
reg   [31:0] integral_pos_V_1;
reg   [15:0] last_error_pos_V_1;
reg   [31:0] integral_rate_V_0;
reg   [15:0] last_error_rate_V_0;
reg   [31:0] integral_rate_V_1;
reg   [15:0] last_error_rate_V_1;
reg    OUT_r_blk_n_AW;
wire    ap_CS_fsm_state20;
reg    OUT_r_blk_n_W;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg    OUT_r_blk_n_B;
wire    ap_CS_fsm_state33;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
reg   [15:0] OUT_r_WDATA;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [15:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
reg   [15:0] reg_652;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state19;
reg   [15:0] reg_656;
reg   [31:0] reg_660;
reg   [0:0] tmp_7_reg_2777;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
reg   [31:0] reg_664;
reg   [31:0] reg_668;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire   [2:0] i_1_fu_678_p2;
reg   [2:0] i_1_reg_2761;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_2_fu_684_p1;
reg   [63:0] tmp_2_reg_2766;
wire   [0:0] exitcond1_fu_672_p2;
wire   [0:0] tmp_7_fu_744_p2;
wire    ap_CS_fsm_state4;
wire  signed [16:0] p_Val2_4_fu_782_p2;
reg  signed [16:0] p_Val2_4_reg_2789;
wire  signed [31:0] tmp_4_fu_828_p3;
reg  signed [31:0] tmp_4_reg_2795;
wire   [15:0] tmp_40_fu_836_p1;
reg   [15:0] tmp_40_reg_2801;
wire   [17:0] tmp_11_fu_856_p2;
reg   [17:0] tmp_11_reg_2816;
wire   [48:0] p_Val2_8_fu_869_p2;
reg   [48:0] p_Val2_8_reg_2821;
wire   [63:0] p_Val2_7_fu_882_p2;
reg   [63:0] p_Val2_7_reg_2826;
wire  signed [16:0] p_Val2_14_fu_901_p2;
reg  signed [16:0] p_Val2_14_reg_2831;
wire  signed [31:0] tmp_27_fu_947_p3;
reg  signed [31:0] tmp_27_reg_2837;
wire   [15:0] tmp_43_fu_955_p1;
reg   [15:0] tmp_43_reg_2848;
wire   [64:0] p_Val2_10_fu_969_p2;
reg   [64:0] p_Val2_10_reg_2853;
wire   [49:0] p_Val2_9_fu_982_p2;
reg   [49:0] p_Val2_9_reg_2858;
wire   [17:0] tmp_28_fu_1004_p2;
reg   [17:0] tmp_28_reg_2863;
wire   [48:0] p_Val2_18_fu_1017_p2;
reg   [48:0] p_Val2_18_reg_2868;
wire   [63:0] p_Val2_17_fu_1030_p2;
reg   [63:0] p_Val2_17_reg_2873;
wire   [64:0] p_Val2_20_fu_1089_p2;
reg   [64:0] p_Val2_20_reg_2888;
wire   [49:0] p_Val2_19_fu_1102_p2;
reg   [49:0] p_Val2_19_reg_2893;
wire   [16:0] r_V_fu_1116_p2;
reg   [16:0] r_V_reg_2898;
wire   [15:0] phitmp5_fu_1146_p3;
reg   [15:0] phitmp5_reg_2903;
reg   [15:0] phitmp_reg_2908;
wire    ap_CS_fsm_state10;
wire   [15:0] phitmp6_fu_1239_p3;
reg   [15:0] phitmp6_reg_2913;
wire    ap_CS_fsm_state11;
wire  signed [16:0] p_Val2_31_fu_1262_p2;
reg  signed [16:0] p_Val2_31_reg_2923;
wire    ap_CS_fsm_state12;
wire   [15:0] tmp_63_fu_1268_p1;
reg   [15:0] tmp_63_reg_2940;
wire  signed [31:0] tmp_52_fu_1318_p3;
reg  signed [31:0] tmp_52_reg_2950;
wire  signed [16:0] p_Val2_40_fu_1340_p2;
reg  signed [16:0] p_Val2_40_reg_2960;
wire   [15:0] tmp_82_fu_1346_p1;
reg   [15:0] tmp_82_reg_2977;
wire   [17:0] tmp_53_fu_1361_p2;
reg   [17:0] tmp_53_reg_2982;
wire   [48:0] p_Val2_34_fu_1374_p2;
reg   [48:0] p_Val2_34_reg_2987;
wire   [63:0] p_Val2_35_fu_1387_p2;
reg   [63:0] p_Val2_35_reg_2992;
wire  signed [31:0] tmp_71_fu_1437_p3;
reg  signed [31:0] tmp_71_reg_2997;
wire   [64:0] p_Val2_36_fu_1461_p2;
reg   [64:0] p_Val2_36_reg_3007;
wire   [49:0] p_Val2_37_fu_1474_p2;
reg   [49:0] p_Val2_37_reg_3012;
wire   [17:0] tmp_72_fu_1491_p2;
reg   [17:0] tmp_72_reg_3017;
wire   [48:0] p_Val2_43_fu_1504_p2;
reg   [48:0] p_Val2_43_reg_3022;
wire   [63:0] p_Val2_44_fu_1517_p2;
reg   [63:0] p_Val2_44_reg_3027;
wire   [64:0] p_Val2_45_fu_1619_p2;
reg   [64:0] p_Val2_45_reg_3042;
wire   [49:0] p_Val2_46_fu_1632_p2;
reg   [49:0] p_Val2_46_reg_3047;
wire   [16:0] r_V_1_fu_1646_p2;
reg   [16:0] r_V_1_reg_3052;
wire   [18:0] tmp_86_fu_1660_p3;
reg   [18:0] tmp_86_reg_3057;
reg   [16:0] tmp_85_reg_3062;
wire    ap_CS_fsm_state17;
wire   [18:0] tmp_87_fu_1773_p3;
reg   [18:0] tmp_87_reg_3067;
wire   [33:0] r_V_2_fu_1838_p2;
reg   [33:0] r_V_2_reg_3072;
wire    ap_CS_fsm_state18;
wire   [33:0] r_V_2_1_fu_1854_p2;
reg   [33:0] r_V_2_1_reg_3077;
wire   [33:0] addconv2_fu_1860_p2;
reg   [33:0] addconv2_reg_3082;
wire   [33:0] r_V_2_3_fu_1876_p2;
reg   [33:0] r_V_2_3_reg_3087;
wire   [33:0] r_V_2_4_fu_1882_p2;
reg   [33:0] r_V_2_4_reg_3092;
wire   [33:0] r_V_2_5_fu_1888_p2;
reg   [33:0] r_V_2_5_reg_3097;
wire   [33:0] addconv4_fu_1894_p2;
reg   [33:0] addconv4_reg_3102;
wire   [33:0] r_V_2_7_fu_1900_p2;
reg   [33:0] r_V_2_7_reg_3107;
wire  signed [48:0] p_Val2_53_fu_1909_p2;
reg  signed [48:0] p_Val2_53_reg_3112;
wire   [46:0] tmp_89_fu_1915_p1;
reg   [46:0] tmp_89_reg_3117;
wire  signed [48:0] p_Val2_81_1_fu_1922_p2;
reg  signed [48:0] p_Val2_81_1_reg_3122;
wire   [46:0] tmp_96_fu_1928_p1;
reg   [46:0] tmp_96_reg_3127;
wire   [48:0] p_Val2_81_2_fu_1935_p2;
reg   [48:0] p_Val2_81_2_reg_3132;
wire   [46:0] tmp_99_fu_1941_p1;
reg   [46:0] tmp_99_reg_3137;
wire  signed [48:0] p_Val2_81_3_fu_1948_p2;
reg  signed [48:0] p_Val2_81_3_reg_3142;
wire   [46:0] tmp_102_fu_1954_p1;
reg   [46:0] tmp_102_reg_3147;
wire   [48:0] p_Val2_81_4_fu_1961_p2;
reg   [48:0] p_Val2_81_4_reg_3152;
wire   [46:0] tmp_105_fu_1967_p1;
reg   [46:0] tmp_105_reg_3157;
wire  signed [48:0] p_Val2_81_5_fu_1974_p2;
reg  signed [48:0] p_Val2_81_5_reg_3162;
wire   [46:0] tmp_109_fu_1980_p1;
reg   [46:0] tmp_109_reg_3167;
wire   [48:0] p_Val2_81_6_fu_1987_p2;
reg   [48:0] p_Val2_81_6_reg_3172;
wire   [46:0] tmp_113_fu_1993_p1;
reg   [46:0] tmp_113_reg_3177;
wire   [48:0] p_Val2_81_7_fu_2000_p2;
reg   [48:0] p_Val2_81_7_reg_3182;
wire   [46:0] tmp_115_fu_2006_p1;
reg   [46:0] tmp_115_reg_3187;
wire  signed [15:0] p_Val2_55_fu_2112_p3;
reg  signed [15:0] p_Val2_55_reg_3192;
reg    ap_sig_ioackin_OUT_r_AWREADY;
wire  signed [15:0] p_Val2_83_1_fu_2198_p3;
reg  signed [15:0] p_Val2_83_1_reg_3198;
wire  signed [15:0] p_Val2_83_2_fu_2280_p3;
reg  signed [15:0] p_Val2_83_2_reg_3204;
wire  signed [15:0] p_Val2_83_3_fu_2366_p3;
reg  signed [15:0] p_Val2_83_3_reg_3210;
wire  signed [15:0] p_Val2_83_4_fu_2448_p3;
reg  signed [15:0] p_Val2_83_4_reg_3216;
wire  signed [15:0] p_Val2_83_5_fu_2534_p3;
reg  signed [15:0] p_Val2_83_5_reg_3222;
wire  signed [15:0] p_Val2_83_6_fu_2616_p3;
reg  signed [15:0] p_Val2_83_6_reg_3228;
wire  signed [15:0] p_Val2_83_7_fu_2698_p3;
reg  signed [15:0] p_Val2_83_7_reg_3234;
reg   [2:0] i_reg_608;
wire    ap_CS_fsm_state3;
reg   [15:0] p_Val2_26_reg_619;
reg   [15:0] p_Val2_25_reg_630;
reg   [15:0] p_Val2_s_16_reg_641;
reg    ap_reg_ioackin_OUT_r_AWREADY;
reg    ap_reg_ioackin_OUT_r_WREADY;
reg    ap_sig_ioackin_OUT_r_WREADY;
wire  signed [31:0] tmp_3_fu_689_p1;
wire  signed [31:0] tmp_95_fu_2706_p1;
wire  signed [31:0] tmp_114_1_fu_2710_p1;
wire  signed [31:0] tmp_114_2_fu_2714_p1;
wire  signed [31:0] tmp_114_3_fu_2718_p1;
wire  signed [31:0] tmp_114_4_fu_2722_p1;
wire  signed [31:0] tmp_114_5_fu_2726_p1;
wire  signed [31:0] tmp_114_6_fu_2730_p1;
wire  signed [31:0] tmp_114_7_fu_2734_p1;
wire  signed [15:0] tmp_3_fu_689_p0;
wire   [12:0] tmp_36_fu_712_p1;
wire   [2:0] ret_V_fu_694_p4;
wire   [0:0] tmp_5_fu_716_p2;
wire   [2:0] ret_V_1_fu_722_p2;
wire   [0:0] tmp_19_fu_704_p3;
wire   [2:0] p_s_fu_728_p3;
wire   [2:0] p_1_fu_736_p3;
wire  signed [16:0] tmp_8_fu_774_p1;
wire  signed [16:0] tmp_9_fu_778_p1;
wire  signed [31:0] tmp_fu_792_p1;
wire   [31:0] tmp_6_fu_796_p2;
wire   [0:0] tmp_s_fu_802_p2;
wire   [0:0] tmp_1_fu_808_p2;
wire   [0:0] tmp_10_fu_822_p2;
wire   [31:0] p_tmp_6_cast_fu_814_p3;
wire  signed [15:0] tmp_10_cast_fu_852_p0;
wire  signed [17:0] tmp_cast_fu_840_p1;
wire  signed [17:0] tmp_10_cast_fu_852_p1;
wire  signed [16:0] p_Val2_8_fu_869_p0;
wire  signed [31:0] p_Val2_8_fu_869_p1;
wire  signed [31:0] p_Val2_7_fu_882_p0;
wire  signed [31:0] p_Val2_7_fu_882_p1;
wire  signed [16:0] tmp_20_fu_893_p1;
wire  signed [16:0] tmp_21_fu_897_p1;
wire  signed [31:0] tmp_22_fu_911_p1;
wire   [31:0] tmp_23_fu_915_p2;
wire   [0:0] tmp_24_fu_921_p2;
wire   [0:0] tmp_25_fu_927_p2;
wire   [0:0] tmp_26_fu_941_p2;
wire   [31:0] p_tmp_1_cast_fu_933_p3;
wire  signed [63:0] p_Val2_8_cast_fu_959_p1;
wire   [64:0] tmp_12_fu_962_p1;
wire   [64:0] tmp_13_fu_966_p1;
wire  signed [17:0] p_Val2_9_fu_982_p0;
wire  signed [31:0] p_Val2_9_fu_982_p1;
wire  signed [15:0] tmp_29_cast_fu_1000_p0;
wire  signed [17:0] tmp_24_cast_fu_988_p1;
wire  signed [17:0] tmp_29_cast_fu_1000_p1;
wire  signed [16:0] p_Val2_18_fu_1017_p0;
wire  signed [31:0] p_Val2_18_fu_1017_p1;
wire  signed [31:0] p_Val2_17_fu_1030_p0;
wire  signed [31:0] p_Val2_17_fu_1030_p1;
wire  signed [63:0] p_Val2_9_cast_fu_1041_p1;
wire   [65:0] tmp_15_fu_1047_p1;
wire   [65:0] tmp_14_fu_1044_p1;
wire   [65:0] p_Val2_11_fu_1051_p2;
wire   [31:0] tmp_16_fu_1057_p4;
wire  signed [63:0] p_Val2_18_cast_fu_1079_p1;
wire   [64:0] tmp_29_fu_1082_p1;
wire   [64:0] tmp_30_fu_1086_p1;
wire  signed [17:0] p_Val2_19_fu_1102_p0;
wire  signed [31:0] p_Val2_19_fu_1102_p1;
wire  signed [16:0] tmp_37_fu_1108_p1;
wire  signed [16:0] tmp_38_fu_1112_p1;
wire   [0:0] tmp_17_fu_1067_p2;
wire   [0:0] tmp_18_fu_1073_p2;
wire   [0:0] tmp_41_fu_1140_p2;
wire   [15:0] tmp_40_cast_fu_1132_p3;
wire   [15:0] tmp_39_fu_1122_p4;
wire  signed [63:0] p_Val2_19_cast_fu_1154_p1;
wire   [65:0] tmp_32_fu_1160_p1;
wire   [65:0] tmp_31_fu_1157_p1;
wire   [65:0] p_Val2_21_fu_1164_p2;
wire   [31:0] tmp_33_fu_1170_p4;
wire  signed [16:0] p_Val2_24_fu_1199_p0;
wire  signed [31:0] p_Val2_24_fu_1199_p1;
wire   [48:0] p_Val2_24_fu_1199_p2;
wire   [0:0] tmp_34_fu_1180_p2;
wire   [0:0] tmp_35_fu_1186_p2;
wire   [0:0] tmp_44_fu_1233_p2;
wire   [15:0] tmp_43_cast_fu_1225_p3;
wire   [15:0] tmp_42_fu_1215_p4;
wire   [15:0] p_Val2_29_fu_1247_p3;
wire  signed [16:0] tmp_45_fu_1254_p1;
wire  signed [16:0] tmp_46_fu_1258_p1;
wire  signed [31:0] tmp_47_fu_1283_p1;
wire   [31:0] tmp_48_fu_1286_p2;
wire   [0:0] tmp_49_fu_1292_p2;
wire   [0:0] tmp_50_fu_1298_p2;
wire   [0:0] tmp_51_fu_1312_p2;
wire   [31:0] p_tmp_3_cast_fu_1304_p3;
wire   [15:0] p_Val2_28_fu_1272_p3;
wire  signed [16:0] tmp_64_fu_1332_p1;
wire  signed [16:0] tmp_65_fu_1336_p1;
wire  signed [15:0] tmp_53_cast_fu_1357_p0;
wire  signed [17:0] tmp_48_cast_fu_1350_p1;
wire  signed [17:0] tmp_53_cast_fu_1357_p1;
wire  signed [16:0] p_Val2_34_fu_1374_p0;
wire  signed [31:0] p_Val2_34_fu_1374_p1;
wire  signed [31:0] p_Val2_35_fu_1387_p0;
wire  signed [31:0] p_Val2_35_fu_1387_p1;
wire  signed [31:0] tmp_66_fu_1402_p1;
wire   [31:0] tmp_67_fu_1405_p2;
wire   [0:0] tmp_68_fu_1411_p2;
wire   [0:0] tmp_69_fu_1417_p2;
wire   [0:0] tmp_70_fu_1431_p2;
wire   [31:0] p_tmp_4_cast_fu_1423_p3;
wire  signed [63:0] p_Val2_34_cast_fu_1451_p1;
wire   [64:0] tmp_54_fu_1454_p1;
wire   [64:0] tmp_55_fu_1458_p1;
wire  signed [17:0] p_Val2_37_fu_1474_p0;
wire  signed [31:0] p_Val2_37_fu_1474_p1;
wire  signed [15:0] tmp_73_cast_fu_1487_p0;
wire  signed [17:0] tmp_68_cast_fu_1480_p1;
wire  signed [17:0] tmp_73_cast_fu_1487_p1;
wire  signed [16:0] p_Val2_43_fu_1504_p0;
wire  signed [31:0] p_Val2_43_fu_1504_p1;
wire  signed [31:0] p_Val2_44_fu_1517_p0;
wire  signed [31:0] p_Val2_44_fu_1517_p1;
wire  signed [63:0] p_Val2_37_cast_fu_1535_p1;
wire   [65:0] tmp_57_fu_1541_p1;
wire   [65:0] tmp_56_fu_1538_p1;
wire   [65:0] p_Val2_38_fu_1545_p2;
wire   [31:0] tmp_58_fu_1551_p4;
wire   [16:0] tmp_61_fu_1573_p4;
wire   [0:0] tmp_59_fu_1561_p2;
wire   [0:0] tmp_60_fu_1567_p2;
wire   [0:0] sel_tmp_fu_1591_p2;
wire   [0:0] sel_tmp3_fu_1597_p2;
wire  signed [63:0] p_Val2_43_cast_fu_1609_p1;
wire   [64:0] tmp_73_fu_1612_p1;
wire   [64:0] tmp_74_fu_1616_p1;
wire  signed [17:0] p_Val2_46_fu_1632_p0;
wire  signed [31:0] p_Val2_46_fu_1632_p1;
wire   [15:0] p_Val2_27_fu_1528_p3;
wire  signed [16:0] tmp_83_fu_1638_p1;
wire  signed [16:0] tmp_84_fu_1642_p1;
wire   [0:0] tmp_62_fu_1603_p2;
wire   [18:0] tmp_86_cast_fu_1652_p3;
wire   [18:0] phitmp1_fu_1583_p3;
wire  signed [63:0] p_Val2_46_cast_fu_1668_p1;
wire   [65:0] tmp_76_fu_1674_p1;
wire   [65:0] tmp_75_fu_1671_p1;
wire   [65:0] p_Val2_47_fu_1678_p2;
wire   [31:0] tmp_77_fu_1684_p4;
wire   [16:0] tmp_80_fu_1706_p4;
wire   [0:0] tmp_78_fu_1694_p2;
wire   [0:0] tmp_79_fu_1700_p2;
wire   [0:0] sel_tmp7_fu_1724_p2;
wire   [0:0] sel_tmp8_fu_1730_p2;
wire  signed [16:0] p_Val2_49_fu_1749_p0;
wire  signed [31:0] p_Val2_49_fu_1749_p1;
wire   [48:0] p_Val2_49_fu_1749_p2;
wire   [0:0] tmp_81_fu_1736_p2;
wire   [18:0] tmp_88_cast_fu_1765_p3;
wire   [18:0] phitmp2_fu_1716_p3;
wire   [31:0] p_shl1_fu_1781_p3;
wire   [31:0] p_Val2_51_fu_1792_p3;
wire  signed [32:0] p_Val2_51_cast_fu_1799_p1;
wire  signed [32:0] p_shl1_cast_fu_1788_p1;
wire  signed [31:0] p_shl_fu_1809_p3;
wire  signed [32:0] p_shl_cast_fu_1820_p1;
wire   [32:0] addconv_fu_1803_p2;
wire   [32:0] p_Val2_52_fu_1824_p2;
wire  signed [33:0] tmp_91_cast_fu_1830_p1;
wire  signed [33:0] p_shl_cast1_fu_1816_p1;
wire   [32:0] sum_fu_1844_p2;
wire  signed [33:0] sum_cast_fu_1850_p1;
wire   [32:0] addconv3_fu_1866_p2;
wire  signed [33:0] tmp_102_3_cast_fu_1872_p1;
wire  signed [33:0] tmp_92_cast_fu_1834_p1;
wire  signed [33:0] p_Val2_53_fu_1909_p1;
wire  signed [33:0] p_Val2_81_1_fu_1922_p1;
wire  signed [33:0] p_Val2_81_2_fu_1935_p1;
wire  signed [33:0] p_Val2_81_3_fu_1948_p1;
wire  signed [33:0] p_Val2_81_4_fu_1961_p1;
wire  signed [33:0] p_Val2_81_5_fu_1974_p1;
wire  signed [33:0] p_Val2_81_6_fu_1987_p1;
wire  signed [33:0] p_Val2_81_7_fu_2000_p1;
wire  signed [45:0] tmp_88_fu_2013_p3;
wire  signed [49:0] p_Val2_53_cast_fu_2010_p1;
wire   [51:0] tmp_91_cast1_fu_2033_p1;
wire  signed [51:0] tmp_94_cast_cast_fu_2029_p1;
wire  signed [46:0] tmp_90_fu_2037_p1;
wire   [46:0] p_Val2_55_cast_fu_2047_p2;
wire   [18:0] tmp_91_fu_2052_p4;
wire   [51:0] p_Val2_54_fu_2041_p2;
wire   [0:0] tmp_92_fu_2062_p3;
wire   [0:0] tmp_93_fu_2070_p2;
wire   [0:0] sel_tmp1_fu_2086_p2;
wire   [0:0] sel_tmp2_fu_2092_p2;
wire   [0:0] tmp_94_fu_2106_p2;
wire   [15:0] sel_tmp5_cast_fu_2098_p3;
wire   [15:0] phitmp4_fu_2076_p4;
wire  signed [50:0] p_Val2_81_1_cast_fu_2120_p1;
wire   [52:0] tmp_10646_1_cast_fu_2123_p1;
wire  signed [52:0] tmp_94_cast_cast2_fu_2025_p1;
wire   [46:0] p_Val2_82_1_cast_fu_2133_p2;
wire   [18:0] tmp_108_1_fu_2138_p4;
wire   [52:0] p_Val2_82_1_fu_2127_p2;
wire   [0:0] tmp_97_fu_2148_p3;
wire   [0:0] tmp_110_1_fu_2156_p2;
wire   [0:0] sel_tmp6_fu_2172_p2;
wire   [0:0] sel_tmp4_fu_2178_p2;
wire   [0:0] tmp_98_fu_2192_p2;
wire   [15:0] sel_tmp9_cast_fu_2184_p3;
wire   [15:0] phitmp49_1_fu_2162_p4;
wire   [50:0] tmp_10646_2_cast_fu_2206_p1;
wire  signed [50:0] tmp_94_cast_cast1_fu_2021_p1;
wire   [46:0] p_Val2_82_2_cast_fu_2215_p2;
wire   [18:0] tmp_108_2_fu_2220_p4;
wire   [50:0] p_Val2_82_2_fu_2209_p2;
wire   [0:0] tmp_100_fu_2230_p3;
wire   [0:0] tmp_110_2_fu_2238_p2;
wire   [0:0] sel_tmp5_fu_2254_p2;
wire   [0:0] sel_tmp9_fu_2260_p2;
wire   [0:0] tmp_101_fu_2274_p2;
wire   [15:0] sel_tmp12_cast_fu_2266_p3;
wire   [15:0] phitmp49_2_fu_2244_p4;
wire  signed [49:0] p_Val2_81_3_cast_fu_2288_p1;
wire   [51:0] tmp_10646_3_cast_fu_2291_p1;
wire   [46:0] p_Val2_82_3_cast_fu_2301_p2;
wire   [18:0] tmp_108_3_fu_2306_p4;
wire   [51:0] p_Val2_82_3_fu_2295_p2;
wire   [0:0] tmp_103_fu_2316_p3;
wire   [0:0] tmp_110_3_fu_2324_p2;
wire   [0:0] sel_tmp10_fu_2340_p2;
wire   [0:0] sel_tmp11_fu_2346_p2;
wire   [0:0] tmp_104_fu_2360_p2;
wire   [15:0] sel_tmp15_cast_fu_2352_p3;
wire   [15:0] phitmp49_3_fu_2330_p4;
wire   [50:0] tmp_10646_4_cast_fu_2374_p1;
wire   [46:0] p_Val2_82_4_cast_fu_2383_p2;
wire   [18:0] tmp_108_4_fu_2388_p4;
wire   [50:0] p_Val2_82_4_fu_2377_p2;
wire   [0:0] tmp_107_fu_2398_p3;
wire   [0:0] tmp_110_4_fu_2406_p2;
wire   [0:0] sel_tmp12_fu_2422_p2;
wire   [0:0] sel_tmp13_fu_2428_p2;
wire   [0:0] tmp_106_fu_2442_p2;
wire   [15:0] sel_tmp18_cast_fu_2434_p3;
wire   [15:0] phitmp49_4_fu_2412_p4;
wire  signed [50:0] p_Val2_81_5_cast_fu_2456_p1;
wire   [52:0] tmp_10646_5_cast_fu_2459_p1;
wire   [46:0] p_Val2_82_5_cast_fu_2469_p2;
wire   [18:0] tmp_108_5_fu_2474_p4;
wire   [52:0] p_Val2_82_5_fu_2463_p2;
wire   [0:0] tmp_111_fu_2484_p3;
wire   [0:0] tmp_110_5_fu_2492_p2;
wire   [0:0] sel_tmp14_fu_2508_p2;
wire   [0:0] sel_tmp15_fu_2514_p2;
wire   [0:0] tmp_108_fu_2528_p2;
wire   [15:0] sel_tmp21_cast_fu_2520_p3;
wire   [15:0] phitmp49_5_fu_2498_p4;
wire   [50:0] tmp_10646_6_cast_fu_2542_p1;
wire   [46:0] p_Val2_82_6_cast_fu_2551_p2;
wire   [18:0] tmp_108_6_fu_2556_p4;
wire   [50:0] p_Val2_82_6_fu_2545_p2;
wire   [0:0] tmp_114_fu_2566_p3;
wire   [0:0] tmp_110_6_fu_2574_p2;
wire   [0:0] sel_tmp16_fu_2590_p2;
wire   [0:0] sel_tmp17_fu_2596_p2;
wire   [0:0] tmp_110_fu_2610_p2;
wire   [15:0] sel_tmp24_cast_fu_2602_p3;
wire   [15:0] phitmp49_6_fu_2580_p4;
wire   [50:0] tmp_10646_7_cast_fu_2624_p1;
wire   [46:0] p_Val2_82_7_cast_fu_2633_p2;
wire   [18:0] tmp_108_7_fu_2638_p4;
wire   [50:0] p_Val2_82_7_fu_2627_p2;
wire   [0:0] tmp_116_fu_2648_p3;
wire   [0:0] tmp_110_7_fu_2656_p2;
wire   [0:0] sel_tmp18_fu_2672_p2;
wire   [0:0] sel_tmp19_fu_2678_p2;
wire   [0:0] tmp_112_fu_2692_p2;
wire   [15:0] sel_tmp27_cast_fu_2684_p3;
wire   [15:0] phitmp49_7_fu_2662_p4;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
#0 integral_pos_V_0 = 32'd0;
#0 last_error_pos_V_0 = 16'd0;
#0 integral_pos_V_1 = 32'd0;
#0 last_error_pos_V_1 = 16'd0;
#0 integral_rate_V_0 = 32'd0;
#0 last_error_rate_V_0 = 16'd0;
#0 integral_rate_V_1 = 32'd0;
#0 last_error_rate_V_1 = 16'd0;
#0 ap_reg_ioackin_OUT_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUT_r_WREADY = 1'b0;
end

pid_buffer_V #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .we0(buffer_V_we0),
    .d0(cmdIn_V_q0),
    .q0(buffer_V_q0)
);

pid_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
pid_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .cmdIn_V_address0(cmdIn_V_address0),
    .cmdIn_V_ce0(cmdIn_V_ce0),
    .cmdIn_V_q0(cmdIn_V_q0),
    .measured_V_address0(measured_V_address0),
    .measured_V_ce0(measured_V_ce0),
    .measured_V_q0(measured_V_q0),
    .kp_V_address0(kp_V_address0),
    .kp_V_ce0(kp_V_ce0),
    .kp_V_q0(kp_V_q0),
    .kd_V_address0(kd_V_address0),
    .kd_V_ce0(kd_V_ce0),
    .kd_V_q0(kd_V_q0),
    .ki_V_address0(ki_V_address0),
    .ki_V_ce0(ki_V_ce0),
    .ki_V_q0(ki_V_q0)
);

pid_TEST_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TEST_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TEST_DATA_WIDTH ))
pid_TEST_s_axi_U(
    .AWVALID(s_axi_TEST_AWVALID),
    .AWREADY(s_axi_TEST_AWREADY),
    .AWADDR(s_axi_TEST_AWADDR),
    .WVALID(s_axi_TEST_WVALID),
    .WREADY(s_axi_TEST_WREADY),
    .WDATA(s_axi_TEST_WDATA),
    .WSTRB(s_axi_TEST_WSTRB),
    .ARVALID(s_axi_TEST_ARVALID),
    .ARREADY(s_axi_TEST_ARREADY),
    .ARADDR(s_axi_TEST_ARADDR),
    .RVALID(s_axi_TEST_RVALID),
    .RREADY(s_axi_TEST_RREADY),
    .RDATA(s_axi_TEST_RDATA),
    .RRESP(s_axi_TEST_RRESP),
    .BVALID(s_axi_TEST_BVALID),
    .BREADY(s_axi_TEST_BREADY),
    .BRESP(s_axi_TEST_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .test_V_address0(test_V_address0),
    .test_V_ce0(test_V_ce0),
    .test_V_we0(test_V_we0),
    .test_V_d0(test_V_d0)
);

pid_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OUT_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
pid_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd8),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(OUT_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUT_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            if ((ap_sig_ioackin_OUT_r_AWREADY == 1'b1)) begin
                ap_reg_ioackin_OUT_r_AWREADY <= 1'b0;
            end else if ((1'b1 == OUT_r_AWREADY)) begin
                ap_reg_ioackin_OUT_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUT_r_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
            ap_reg_ioackin_OUT_r_WREADY <= 1'b0;
        end else if ((((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state21)))) begin
            ap_reg_ioackin_OUT_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_608 <= i_1_reg_2761;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_608 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        integral_pos_V_0 <= tmp_4_reg_2795;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        integral_pos_V_0 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        integral_pos_V_1 <= tmp_27_reg_2837;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        integral_pos_V_1 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        last_error_pos_V_0 <= tmp_40_reg_2801;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        last_error_pos_V_0 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        last_error_pos_V_1 <= tmp_43_reg_2848;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        last_error_pos_V_1 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        p_Val2_25_reg_630 <= phitmp6_reg_2913;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_25_reg_630 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        p_Val2_26_reg_619 <= phitmp5_reg_2903;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_26_reg_619 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        p_Val2_s_16_reg_641 <= phitmp_reg_2908;
    end else if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_16_reg_641 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        addconv2_reg_3082[33 : 15] <= addconv2_fu_1860_p2[33 : 15];
        addconv4_reg_3102[33 : 15] <= addconv4_fu_1894_p2[33 : 15];
        r_V_2_1_reg_3077[33 : 15] <= r_V_2_1_fu_1854_p2[33 : 15];
        r_V_2_3_reg_3087[33 : 15] <= r_V_2_3_fu_1876_p2[33 : 15];
        r_V_2_4_reg_3092[33 : 15] <= r_V_2_4_fu_1882_p2[33 : 15];
        r_V_2_5_reg_3097[33 : 15] <= r_V_2_5_fu_1888_p2[33 : 15];
        r_V_2_7_reg_3107[33 : 15] <= r_V_2_7_fu_1900_p2[33 : 15];
        r_V_2_reg_3072[33 : 15] <= r_V_2_fu_1838_p2[33 : 15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_2761 <= i_1_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        integral_rate_V_0 <= tmp_52_fu_1318_p3;
        p_Val2_40_reg_2960 <= p_Val2_40_fu_1340_p2;
        tmp_52_reg_2950 <= tmp_52_fu_1318_p3;
        tmp_82_reg_2977 <= tmp_82_fu_1346_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        integral_rate_V_1 <= tmp_71_fu_1437_p3;
        last_error_rate_V_0 <= tmp_63_reg_2940;
        p_Val2_34_reg_2987 <= p_Val2_34_fu_1374_p2;
        p_Val2_35_reg_2992 <= p_Val2_35_fu_1387_p2;
        tmp_53_reg_2982 <= tmp_53_fu_1361_p2;
        tmp_71_reg_2997 <= tmp_71_fu_1437_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        last_error_rate_V_1 <= tmp_82_reg_2977;
        p_Val2_36_reg_3007 <= p_Val2_36_fu_1461_p2;
        p_Val2_37_reg_3012 <= p_Val2_37_fu_1474_p2;
        p_Val2_43_reg_3022 <= p_Val2_43_fu_1504_p2;
        p_Val2_44_reg_3027 <= p_Val2_44_fu_1517_p2;
        tmp_72_reg_3017 <= tmp_72_fu_1491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        p_Val2_10_reg_2853 <= p_Val2_10_fu_969_p2;
        p_Val2_17_reg_2873 <= p_Val2_17_fu_1030_p2;
        p_Val2_18_reg_2868 <= p_Val2_18_fu_1017_p2;
        p_Val2_9_reg_2858 <= p_Val2_9_fu_982_p2;
        tmp_28_reg_2863 <= tmp_28_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_14_reg_2831 <= p_Val2_14_fu_901_p2;
        tmp_27_reg_2837 <= tmp_27_fu_947_p3;
        tmp_43_reg_2848 <= tmp_43_fu_955_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        p_Val2_19_reg_2893 <= p_Val2_19_fu_1102_p2;
        p_Val2_20_reg_2888 <= p_Val2_20_fu_1089_p2;
        phitmp5_reg_2903 <= phitmp5_fu_1146_p3;
        r_V_reg_2898 <= r_V_fu_1116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_31_reg_2923 <= p_Val2_31_fu_1262_p2;
        tmp_63_reg_2940 <= tmp_63_fu_1268_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_45_reg_3042 <= p_Val2_45_fu_1619_p2;
        p_Val2_46_reg_3047 <= p_Val2_46_fu_1632_p2;
        r_V_1_reg_3052 <= r_V_1_fu_1646_p2;
        tmp_86_reg_3057[18 : 2] <= tmp_86_fu_1660_p3[18 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_4_reg_2789 <= p_Val2_4_fu_782_p2;
        tmp_40_reg_2801 <= tmp_40_fu_836_p1;
        tmp_4_reg_2795 <= tmp_4_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_53_reg_3112[48 : 15] <= p_Val2_53_fu_1909_p2[48 : 15];
        p_Val2_81_1_reg_3122[48 : 15] <= p_Val2_81_1_fu_1922_p2[48 : 15];
        p_Val2_81_2_reg_3132[48 : 15] <= p_Val2_81_2_fu_1935_p2[48 : 15];
        p_Val2_81_3_reg_3142[48 : 15] <= p_Val2_81_3_fu_1948_p2[48 : 15];
        p_Val2_81_4_reg_3152[48 : 15] <= p_Val2_81_4_fu_1961_p2[48 : 15];
        p_Val2_81_5_reg_3162[48 : 15] <= p_Val2_81_5_fu_1974_p2[48 : 15];
        p_Val2_81_6_reg_3172[48 : 15] <= p_Val2_81_6_fu_1987_p2[48 : 15];
        p_Val2_81_7_reg_3182[48 : 15] <= p_Val2_81_7_fu_2000_p2[48 : 15];
        tmp_102_reg_3147[46 : 15] <= tmp_102_fu_1954_p1[46 : 15];
        tmp_105_reg_3157[46 : 15] <= tmp_105_fu_1967_p1[46 : 15];
        tmp_109_reg_3167[46 : 15] <= tmp_109_fu_1980_p1[46 : 15];
        tmp_113_reg_3177[46 : 15] <= tmp_113_fu_1993_p1[46 : 15];
        tmp_115_reg_3187[46 : 15] <= tmp_115_fu_2006_p1[46 : 15];
        tmp_89_reg_3117[46 : 15] <= tmp_89_fu_1915_p1[46 : 15];
        tmp_96_reg_3127[46 : 15] <= tmp_96_fu_1928_p1[46 : 15];
        tmp_99_reg_3137[46 : 15] <= tmp_99_fu_1941_p1[46 : 15];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_OUT_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        p_Val2_55_reg_3192 <= p_Val2_55_fu_2112_p3;
        p_Val2_83_1_reg_3198 <= p_Val2_83_1_fu_2198_p3;
        p_Val2_83_2_reg_3204 <= p_Val2_83_2_fu_2280_p3;
        p_Val2_83_3_reg_3210 <= p_Val2_83_3_fu_2366_p3;
        p_Val2_83_4_reg_3216 <= p_Val2_83_4_fu_2448_p3;
        p_Val2_83_5_reg_3222 <= p_Val2_83_5_fu_2534_p3;
        p_Val2_83_6_reg_3228 <= p_Val2_83_6_fu_2616_p3;
        p_Val2_83_7_reg_3234 <= p_Val2_83_7_fu_2698_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_7_reg_2826 <= p_Val2_7_fu_882_p2;
        p_Val2_8_reg_2821 <= p_Val2_8_fu_869_p2;
        tmp_11_reg_2816 <= tmp_11_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        phitmp6_reg_2913 <= phitmp6_fu_1239_p3;
        phitmp_reg_2908 <= {{p_Val2_24_fu_1199_p2[28:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_652 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_656 <= measured_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_660 <= kp_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_664 <= ki_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_7_reg_2777 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        reg_668 <= kd_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_672_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_2_reg_2766[2 : 0] <= tmp_2_fu_684_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_7_reg_2777 <= tmp_7_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_85_reg_3062 <= {{p_Val2_49_fu_1749_p2[29:13]}};
        tmp_87_reg_3067[18 : 2] <= tmp_87_fu_1773_p3[18 : 2];
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_OUT_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state20))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state33))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUT_r_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            OUT_r_WDATA = p_Val2_83_7_reg_3234;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            OUT_r_WDATA = p_Val2_83_6_reg_3228;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            OUT_r_WDATA = p_Val2_83_5_reg_3222;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            OUT_r_WDATA = p_Val2_83_4_reg_3216;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            OUT_r_WDATA = p_Val2_83_3_reg_3210;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            OUT_r_WDATA = p_Val2_83_2_reg_3204;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            OUT_r_WDATA = p_Val2_83_1_reg_3198;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            OUT_r_WDATA = p_Val2_55_reg_3192;
        end else begin
            OUT_r_WDATA = 'bx;
        end
    end else begin
        OUT_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22)) | ((ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21)))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUT_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_OUT_r_AWREADY = OUT_r_AWREADY;
    end else begin
        ap_sig_ioackin_OUT_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUT_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_OUT_r_WREADY = OUT_r_WREADY;
    end else begin
        ap_sig_ioackin_OUT_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_V_address0 = 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        buffer_V_address0 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_V_address0 = 3'd2;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        buffer_V_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_V_address0 = tmp_2_reg_2766;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_V_address0 = 3'd5;
    end else begin
        buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_V_we0 = 1'b1;
    end else begin
        buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cmdIn_V_ce0 = 1'b1;
    end else begin
        cmdIn_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        kd_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        kd_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kd_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kd_V_address0 = 64'd0;
    end else begin
        kd_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        kd_V_ce0 = 1'b1;
    end else begin
        kd_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ki_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ki_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ki_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ki_V_address0 = 64'd0;
    end else begin
        ki_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        ki_V_ce0 = 1'b1;
    end else begin
        ki_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        kp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        kp_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        kp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kp_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kp_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kp_V_address0 = 64'd0;
    end else begin
        kp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        kp_V_ce0 = 1'b1;
    end else begin
        kp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        measured_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        measured_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        measured_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        measured_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        measured_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        measured_V_address0 = 64'd0;
    end else begin
        measured_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        measured_V_ce0 = 1'b1;
    end else begin
        measured_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        test_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        test_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        test_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        test_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        test_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        test_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        test_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        test_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        test_V_address0 = tmp_2_reg_2766;
    end else begin
        test_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        test_V_ce0 = 1'b1;
    end else begin
        test_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        test_V_d0 = tmp_114_7_fu_2734_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        test_V_d0 = tmp_114_6_fu_2730_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        test_V_d0 = tmp_114_5_fu_2726_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        test_V_d0 = tmp_114_4_fu_2722_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        test_V_d0 = tmp_114_3_fu_2718_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        test_V_d0 = tmp_114_2_fu_2714_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        test_V_d0 = tmp_114_1_fu_2710_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        test_V_d0 = tmp_95_fu_2706_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        test_V_d0 = tmp_3_fu_689_p1;
    end else begin
        test_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        test_V_we0 = 1'b1;
    end else begin
        test_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_672_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_7_fu_744_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((ap_sig_ioackin_OUT_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv2_fu_1860_p2 = ($signed(p_shl_cast1_fu_1816_p1) + $signed(sum_cast_fu_1850_p1));

assign addconv3_fu_1866_p2 = ($signed(p_shl1_cast_fu_1788_p1) - $signed(p_Val2_51_cast_fu_1799_p1));

assign addconv4_fu_1894_p2 = ($signed(sum_cast_fu_1850_p1) - $signed(p_shl_cast1_fu_1816_p1));

assign addconv_fu_1803_p2 = ($signed(p_Val2_51_cast_fu_1799_p1) - $signed(p_shl1_cast_fu_1788_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmdIn_V_address0 = tmp_2_fu_684_p1;

assign exitcond1_fu_672_p2 = ((i_reg_608 == 3'd6) ? 1'b1 : 1'b0);

assign i_1_fu_678_p2 = (i_reg_608 + 3'd1);

assign p_1_fu_736_p3 = ((tmp_19_fu_704_p3[0:0] === 1'b1) ? p_s_fu_728_p3 : ret_V_fu_694_p4);

assign p_Val2_10_fu_969_p2 = (tmp_12_fu_962_p1 + tmp_13_fu_966_p1);

assign p_Val2_11_fu_1051_p2 = (tmp_15_fu_1047_p1 + tmp_14_fu_1044_p1);

assign p_Val2_14_fu_901_p2 = ($signed(tmp_20_fu_893_p1) - $signed(tmp_21_fu_897_p1));

assign p_Val2_17_fu_1030_p0 = tmp_27_reg_2837;

assign p_Val2_17_fu_1030_p1 = reg_664;

assign p_Val2_17_fu_1030_p2 = ($signed(p_Val2_17_fu_1030_p0) * $signed(p_Val2_17_fu_1030_p1));

assign p_Val2_18_cast_fu_1079_p1 = $signed(p_Val2_18_reg_2868);

assign p_Val2_18_fu_1017_p0 = p_Val2_14_reg_2831;

assign p_Val2_18_fu_1017_p1 = reg_660;

assign p_Val2_18_fu_1017_p2 = ($signed(p_Val2_18_fu_1017_p0) * $signed(p_Val2_18_fu_1017_p1));

assign p_Val2_19_cast_fu_1154_p1 = $signed(p_Val2_19_reg_2893);

assign p_Val2_19_fu_1102_p0 = tmp_28_reg_2863;

assign p_Val2_19_fu_1102_p1 = reg_668;

assign p_Val2_19_fu_1102_p2 = ($signed(p_Val2_19_fu_1102_p0) * $signed(p_Val2_19_fu_1102_p1));

assign p_Val2_20_fu_1089_p2 = (tmp_29_fu_1082_p1 + tmp_30_fu_1086_p1);

assign p_Val2_21_fu_1164_p2 = (tmp_32_fu_1160_p1 + tmp_31_fu_1157_p1);

assign p_Val2_24_fu_1199_p0 = r_V_reg_2898;

assign p_Val2_24_fu_1199_p1 = reg_660;

assign p_Val2_24_fu_1199_p2 = ($signed(p_Val2_24_fu_1199_p0) * $signed(p_Val2_24_fu_1199_p1));

assign p_Val2_27_fu_1528_p3 = ((tmp_7_reg_2777[0:0] === 1'b1) ? p_Val2_s_16_reg_641 : buffer_V_q0);

assign p_Val2_28_fu_1272_p3 = ((tmp_7_reg_2777[0:0] === 1'b1) ? p_Val2_25_reg_630 : buffer_V_q0);

assign p_Val2_29_fu_1247_p3 = ((tmp_7_reg_2777[0:0] === 1'b1) ? p_Val2_26_reg_619 : buffer_V_q0);

assign p_Val2_31_fu_1262_p2 = ($signed(tmp_45_fu_1254_p1) - $signed(tmp_46_fu_1258_p1));

assign p_Val2_34_cast_fu_1451_p1 = $signed(p_Val2_34_reg_2987);

assign p_Val2_34_fu_1374_p0 = p_Val2_31_reg_2923;

assign p_Val2_34_fu_1374_p1 = reg_660;

assign p_Val2_34_fu_1374_p2 = ($signed(p_Val2_34_fu_1374_p0) * $signed(p_Val2_34_fu_1374_p1));

assign p_Val2_35_fu_1387_p0 = tmp_52_reg_2950;

assign p_Val2_35_fu_1387_p1 = reg_664;

assign p_Val2_35_fu_1387_p2 = ($signed(p_Val2_35_fu_1387_p0) * $signed(p_Val2_35_fu_1387_p1));

assign p_Val2_36_fu_1461_p2 = (tmp_54_fu_1454_p1 + tmp_55_fu_1458_p1);

assign p_Val2_37_cast_fu_1535_p1 = $signed(p_Val2_37_reg_3012);

assign p_Val2_37_fu_1474_p0 = tmp_53_reg_2982;

assign p_Val2_37_fu_1474_p1 = reg_668;

assign p_Val2_37_fu_1474_p2 = ($signed(p_Val2_37_fu_1474_p0) * $signed(p_Val2_37_fu_1474_p1));

assign p_Val2_38_fu_1545_p2 = (tmp_57_fu_1541_p1 + tmp_56_fu_1538_p1);

assign p_Val2_40_fu_1340_p2 = ($signed(tmp_64_fu_1332_p1) - $signed(tmp_65_fu_1336_p1));

assign p_Val2_43_cast_fu_1609_p1 = $signed(p_Val2_43_reg_3022);

assign p_Val2_43_fu_1504_p0 = p_Val2_40_reg_2960;

assign p_Val2_43_fu_1504_p1 = reg_660;

assign p_Val2_43_fu_1504_p2 = ($signed(p_Val2_43_fu_1504_p0) * $signed(p_Val2_43_fu_1504_p1));

assign p_Val2_44_fu_1517_p0 = tmp_71_reg_2997;

assign p_Val2_44_fu_1517_p1 = reg_664;

assign p_Val2_44_fu_1517_p2 = ($signed(p_Val2_44_fu_1517_p0) * $signed(p_Val2_44_fu_1517_p1));

assign p_Val2_45_fu_1619_p2 = (tmp_73_fu_1612_p1 + tmp_74_fu_1616_p1);

assign p_Val2_46_cast_fu_1668_p1 = $signed(p_Val2_46_reg_3047);

assign p_Val2_46_fu_1632_p0 = tmp_72_reg_3017;

assign p_Val2_46_fu_1632_p1 = reg_668;

assign p_Val2_46_fu_1632_p2 = ($signed(p_Val2_46_fu_1632_p0) * $signed(p_Val2_46_fu_1632_p1));

assign p_Val2_47_fu_1678_p2 = (tmp_76_fu_1674_p1 + tmp_75_fu_1671_p1);

assign p_Val2_49_fu_1749_p0 = r_V_1_reg_3052;

assign p_Val2_49_fu_1749_p1 = reg_660;

assign p_Val2_49_fu_1749_p2 = ($signed(p_Val2_49_fu_1749_p0) * $signed(p_Val2_49_fu_1749_p1));

assign p_Val2_4_fu_782_p2 = ($signed(tmp_8_fu_774_p1) - $signed(tmp_9_fu_778_p1));

assign p_Val2_51_cast_fu_1799_p1 = $signed(p_Val2_51_fu_1792_p3);

assign p_Val2_51_fu_1792_p3 = {{tmp_87_reg_3067}, {13'd0}};

assign p_Val2_52_fu_1824_p2 = ($signed(33'd0) - $signed(p_shl_cast_fu_1820_p1));

assign p_Val2_53_cast_fu_2010_p1 = p_Val2_53_reg_3112;

assign p_Val2_53_fu_1909_p1 = r_V_2_reg_3072;

assign p_Val2_53_fu_1909_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_53_fu_1909_p1));

assign p_Val2_54_fu_2041_p2 = ($signed(tmp_91_cast1_fu_2033_p1) + $signed(tmp_94_cast_cast_fu_2029_p1));

assign p_Val2_55_cast_fu_2047_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_89_reg_3117));

assign p_Val2_55_fu_2112_p3 = ((tmp_94_fu_2106_p2[0:0] === 1'b1) ? sel_tmp5_cast_fu_2098_p3 : phitmp4_fu_2076_p4);

assign p_Val2_7_fu_882_p0 = tmp_4_reg_2795;

assign p_Val2_7_fu_882_p1 = reg_664;

assign p_Val2_7_fu_882_p2 = ($signed(p_Val2_7_fu_882_p0) * $signed(p_Val2_7_fu_882_p1));

assign p_Val2_81_1_cast_fu_2120_p1 = p_Val2_81_1_reg_3122;

assign p_Val2_81_1_fu_1922_p1 = r_V_2_1_reg_3077;

assign p_Val2_81_1_fu_1922_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_1_fu_1922_p1));

assign p_Val2_81_2_fu_1935_p1 = addconv2_reg_3082;

assign p_Val2_81_2_fu_1935_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_2_fu_1935_p1));

assign p_Val2_81_3_cast_fu_2288_p1 = p_Val2_81_3_reg_3142;

assign p_Val2_81_3_fu_1948_p1 = r_V_2_3_reg_3087;

assign p_Val2_81_3_fu_1948_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_3_fu_1948_p1));

assign p_Val2_81_4_fu_1961_p1 = r_V_2_4_reg_3092;

assign p_Val2_81_4_fu_1961_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_4_fu_1961_p1));

assign p_Val2_81_5_cast_fu_2456_p1 = p_Val2_81_5_reg_3162;

assign p_Val2_81_5_fu_1974_p1 = r_V_2_5_reg_3097;

assign p_Val2_81_5_fu_1974_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_5_fu_1974_p1));

assign p_Val2_81_6_fu_1987_p1 = addconv4_reg_3102;

assign p_Val2_81_6_fu_1987_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_6_fu_1987_p1));

assign p_Val2_81_7_fu_2000_p1 = r_V_2_7_reg_3107;

assign p_Val2_81_7_fu_2000_p2 = ($signed({{1'b0}, {49'd10813}}) * $signed(p_Val2_81_7_fu_2000_p1));

assign p_Val2_82_1_cast_fu_2133_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_96_reg_3127));

assign p_Val2_82_1_fu_2127_p2 = ($signed(tmp_10646_1_cast_fu_2123_p1) + $signed(tmp_94_cast_cast2_fu_2025_p1));

assign p_Val2_82_2_cast_fu_2215_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_99_reg_3137));

assign p_Val2_82_2_fu_2209_p2 = ($signed(tmp_10646_2_cast_fu_2206_p1) + $signed(tmp_94_cast_cast1_fu_2021_p1));

assign p_Val2_82_3_cast_fu_2301_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_102_reg_3147));

assign p_Val2_82_3_fu_2295_p2 = ($signed(tmp_10646_3_cast_fu_2291_p1) + $signed(tmp_94_cast_cast_fu_2029_p1));

assign p_Val2_82_4_cast_fu_2383_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_105_reg_3157));

assign p_Val2_82_4_fu_2377_p2 = ($signed(tmp_10646_4_cast_fu_2374_p1) + $signed(tmp_94_cast_cast1_fu_2021_p1));

assign p_Val2_82_5_cast_fu_2469_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_109_reg_3167));

assign p_Val2_82_5_fu_2463_p2 = ($signed(tmp_10646_5_cast_fu_2459_p1) + $signed(tmp_94_cast_cast2_fu_2025_p1));

assign p_Val2_82_6_cast_fu_2551_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_113_reg_3177));

assign p_Val2_82_6_fu_2545_p2 = ($signed(tmp_10646_6_cast_fu_2542_p1) + $signed(tmp_94_cast_cast1_fu_2021_p1));

assign p_Val2_82_7_cast_fu_2633_p2 = ($signed(tmp_90_fu_2037_p1) + $signed(tmp_115_reg_3187));

assign p_Val2_82_7_fu_2627_p2 = ($signed(tmp_10646_7_cast_fu_2624_p1) + $signed(tmp_94_cast_cast1_fu_2021_p1));

assign p_Val2_83_1_fu_2198_p3 = ((tmp_98_fu_2192_p2[0:0] === 1'b1) ? sel_tmp9_cast_fu_2184_p3 : phitmp49_1_fu_2162_p4);

assign p_Val2_83_2_fu_2280_p3 = ((tmp_101_fu_2274_p2[0:0] === 1'b1) ? sel_tmp12_cast_fu_2266_p3 : phitmp49_2_fu_2244_p4);

assign p_Val2_83_3_fu_2366_p3 = ((tmp_104_fu_2360_p2[0:0] === 1'b1) ? sel_tmp15_cast_fu_2352_p3 : phitmp49_3_fu_2330_p4);

assign p_Val2_83_4_fu_2448_p3 = ((tmp_106_fu_2442_p2[0:0] === 1'b1) ? sel_tmp18_cast_fu_2434_p3 : phitmp49_4_fu_2412_p4);

assign p_Val2_83_5_fu_2534_p3 = ((tmp_108_fu_2528_p2[0:0] === 1'b1) ? sel_tmp21_cast_fu_2520_p3 : phitmp49_5_fu_2498_p4);

assign p_Val2_83_6_fu_2616_p3 = ((tmp_110_fu_2610_p2[0:0] === 1'b1) ? sel_tmp24_cast_fu_2602_p3 : phitmp49_6_fu_2580_p4);

assign p_Val2_83_7_fu_2698_p3 = ((tmp_112_fu_2692_p2[0:0] === 1'b1) ? sel_tmp27_cast_fu_2684_p3 : phitmp49_7_fu_2662_p4);

assign p_Val2_8_cast_fu_959_p1 = $signed(p_Val2_8_reg_2821);

assign p_Val2_8_fu_869_p0 = p_Val2_4_reg_2789;

assign p_Val2_8_fu_869_p1 = reg_660;

assign p_Val2_8_fu_869_p2 = ($signed(p_Val2_8_fu_869_p0) * $signed(p_Val2_8_fu_869_p1));

assign p_Val2_9_cast_fu_1041_p1 = $signed(p_Val2_9_reg_2858);

assign p_Val2_9_fu_982_p0 = tmp_11_reg_2816;

assign p_Val2_9_fu_982_p1 = reg_668;

assign p_Val2_9_fu_982_p2 = ($signed(p_Val2_9_fu_982_p0) * $signed(p_Val2_9_fu_982_p1));

assign p_s_fu_728_p3 = ((tmp_5_fu_716_p2[0:0] === 1'b1) ? ret_V_fu_694_p4 : ret_V_1_fu_722_p2);

assign p_shl1_cast_fu_1788_p1 = $signed(p_shl1_fu_1781_p3);

assign p_shl1_fu_1781_p3 = {{tmp_86_reg_3057}, {13'd0}};

assign p_shl_cast1_fu_1816_p1 = p_shl_fu_1809_p3;

assign p_shl_cast_fu_1820_p1 = p_shl_fu_1809_p3;

assign p_shl_fu_1809_p3 = {{tmp_85_reg_3062}, {15'd0}};

assign p_tmp_1_cast_fu_933_p3 = ((tmp_24_fu_921_p2[0:0] === 1'b1) ? 32'd4294148096 : 32'd819200);

assign p_tmp_3_cast_fu_1304_p3 = ((tmp_49_fu_1292_p2[0:0] === 1'b1) ? 32'd4294148096 : 32'd819200);

assign p_tmp_4_cast_fu_1423_p3 = ((tmp_68_fu_1411_p2[0:0] === 1'b1) ? 32'd4294148096 : 32'd819200);

assign p_tmp_6_cast_fu_814_p3 = ((tmp_s_fu_802_p2[0:0] === 1'b1) ? 32'd4294148096 : 32'd819200);

assign phitmp1_fu_1583_p3 = {{tmp_61_fu_1573_p4}, {2'd0}};

assign phitmp2_fu_1716_p3 = {{tmp_80_fu_1706_p4}, {2'd0}};

assign phitmp49_1_fu_2162_p4 = {{p_Val2_82_1_fu_2127_p2[45:30]}};

assign phitmp49_2_fu_2244_p4 = {{p_Val2_82_2_fu_2209_p2[45:30]}};

assign phitmp49_3_fu_2330_p4 = {{p_Val2_82_3_fu_2295_p2[45:30]}};

assign phitmp49_4_fu_2412_p4 = {{p_Val2_82_4_fu_2377_p2[45:30]}};

assign phitmp49_5_fu_2498_p4 = {{p_Val2_82_5_fu_2463_p2[45:30]}};

assign phitmp49_6_fu_2580_p4 = {{p_Val2_82_6_fu_2545_p2[45:30]}};

assign phitmp49_7_fu_2662_p4 = {{p_Val2_82_7_fu_2627_p2[45:30]}};

assign phitmp4_fu_2076_p4 = {{p_Val2_54_fu_2041_p2[45:30]}};

assign phitmp5_fu_1146_p3 = ((tmp_41_fu_1140_p2[0:0] === 1'b1) ? tmp_40_cast_fu_1132_p3 : tmp_39_fu_1122_p4);

assign phitmp6_fu_1239_p3 = ((tmp_44_fu_1233_p2[0:0] === 1'b1) ? tmp_43_cast_fu_1225_p3 : tmp_42_fu_1215_p4);

assign r_V_1_fu_1646_p2 = ($signed(tmp_83_fu_1638_p1) - $signed(tmp_84_fu_1642_p1));

assign r_V_2_1_fu_1854_p2 = ($signed(p_shl_cast1_fu_1816_p1) - $signed(sum_cast_fu_1850_p1));

assign r_V_2_3_fu_1876_p2 = ($signed(tmp_102_3_cast_fu_1872_p1) - $signed(p_shl_cast1_fu_1816_p1));

assign r_V_2_4_fu_1882_p2 = ($signed(p_shl_cast1_fu_1816_p1) + $signed(tmp_91_cast_fu_1830_p1));

assign r_V_2_5_fu_1888_p2 = ($signed(tmp_92_cast_fu_1834_p1) - $signed(sum_cast_fu_1850_p1));

assign r_V_2_7_fu_1900_p2 = ($signed(p_shl_cast1_fu_1816_p1) + $signed(tmp_102_3_cast_fu_1872_p1));

assign r_V_2_fu_1838_p2 = ($signed(tmp_91_cast_fu_1830_p1) - $signed(p_shl_cast1_fu_1816_p1));

assign r_V_fu_1116_p2 = ($signed(tmp_37_fu_1108_p1) - $signed(tmp_38_fu_1112_p1));

assign ret_V_1_fu_722_p2 = (3'd1 + ret_V_fu_694_p4);

assign ret_V_fu_694_p4 = {{buffer_V_q0[15:13]}};

assign sel_tmp10_fu_2340_p2 = (tmp_103_fu_2316_p3 ^ 1'd1);

assign sel_tmp11_fu_2346_p2 = (tmp_110_3_fu_2324_p2 & sel_tmp10_fu_2340_p2);

assign sel_tmp12_cast_fu_2266_p3 = ((sel_tmp9_fu_2260_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp12_fu_2422_p2 = (tmp_107_fu_2398_p3 ^ 1'd1);

assign sel_tmp13_fu_2428_p2 = (tmp_110_4_fu_2406_p2 & sel_tmp12_fu_2422_p2);

assign sel_tmp14_fu_2508_p2 = (tmp_111_fu_2484_p3 ^ 1'd1);

assign sel_tmp15_cast_fu_2352_p3 = ((sel_tmp11_fu_2346_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp15_fu_2514_p2 = (tmp_110_5_fu_2492_p2 & sel_tmp14_fu_2508_p2);

assign sel_tmp16_fu_2590_p2 = (tmp_114_fu_2566_p3 ^ 1'd1);

assign sel_tmp17_fu_2596_p2 = (tmp_110_6_fu_2574_p2 & sel_tmp16_fu_2590_p2);

assign sel_tmp18_cast_fu_2434_p3 = ((sel_tmp13_fu_2428_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp18_fu_2672_p2 = (tmp_116_fu_2648_p3 ^ 1'd1);

assign sel_tmp19_fu_2678_p2 = (tmp_110_7_fu_2656_p2 & sel_tmp18_fu_2672_p2);

assign sel_tmp1_fu_2086_p2 = (tmp_92_fu_2062_p3 ^ 1'd1);

assign sel_tmp21_cast_fu_2520_p3 = ((sel_tmp15_fu_2514_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp24_cast_fu_2602_p3 = ((sel_tmp17_fu_2596_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp27_cast_fu_2684_p3 = ((sel_tmp19_fu_2678_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp2_fu_2092_p2 = (tmp_93_fu_2070_p2 & sel_tmp1_fu_2086_p2);

assign sel_tmp3_fu_1597_p2 = (tmp_60_fu_1567_p2 & sel_tmp_fu_1591_p2);

assign sel_tmp4_fu_2178_p2 = (tmp_110_1_fu_2156_p2 & sel_tmp6_fu_2172_p2);

assign sel_tmp5_cast_fu_2098_p3 = ((sel_tmp2_fu_2092_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp5_fu_2254_p2 = (tmp_100_fu_2230_p3 ^ 1'd1);

assign sel_tmp6_fu_2172_p2 = (tmp_97_fu_2148_p3 ^ 1'd1);

assign sel_tmp7_fu_1724_p2 = (tmp_78_fu_1694_p2 ^ 1'd1);

assign sel_tmp8_fu_1730_p2 = (tmp_79_fu_1700_p2 & sel_tmp7_fu_1724_p2);

assign sel_tmp9_cast_fu_2184_p3 = ((sel_tmp4_fu_2178_p2[0:0] === 1'b1) ? 16'd8183 : 16'd0);

assign sel_tmp9_fu_2260_p2 = (tmp_110_2_fu_2238_p2 & sel_tmp5_fu_2254_p2);

assign sel_tmp_fu_1591_p2 = (tmp_59_fu_1561_p2 ^ 1'd1);

assign sum_cast_fu_1850_p1 = $signed(sum_fu_1844_p2);

assign sum_fu_1844_p2 = ($signed(p_shl1_cast_fu_1788_p1) + $signed(p_Val2_51_cast_fu_1799_p1));

assign tmp_100_fu_2230_p3 = p_Val2_82_2_cast_fu_2215_p2[32'd46];

assign tmp_101_fu_2274_p2 = (tmp_100_fu_2230_p3 | sel_tmp9_fu_2260_p2);

assign tmp_102_3_cast_fu_1872_p1 = $signed(addconv3_fu_1866_p2);

assign tmp_102_fu_1954_p1 = p_Val2_81_3_fu_1948_p2[46:0];

assign tmp_103_fu_2316_p3 = p_Val2_82_3_cast_fu_2301_p2[32'd46];

assign tmp_104_fu_2360_p2 = (tmp_103_fu_2316_p3 | sel_tmp11_fu_2346_p2);

assign tmp_105_fu_1967_p1 = p_Val2_81_4_fu_1961_p2[46:0];

assign tmp_10646_1_cast_fu_2123_p1 = $unsigned(p_Val2_81_1_cast_fu_2120_p1);

assign tmp_10646_2_cast_fu_2206_p1 = p_Val2_81_2_reg_3132;

assign tmp_10646_3_cast_fu_2291_p1 = $unsigned(p_Val2_81_3_cast_fu_2288_p1);

assign tmp_10646_4_cast_fu_2374_p1 = p_Val2_81_4_reg_3152;

assign tmp_10646_5_cast_fu_2459_p1 = $unsigned(p_Val2_81_5_cast_fu_2456_p1);

assign tmp_10646_6_cast_fu_2542_p1 = p_Val2_81_6_reg_3172;

assign tmp_10646_7_cast_fu_2624_p1 = p_Val2_81_7_reg_3182;

assign tmp_106_fu_2442_p2 = (tmp_107_fu_2398_p3 | sel_tmp13_fu_2428_p2);

assign tmp_107_fu_2398_p3 = p_Val2_82_4_cast_fu_2383_p2[32'd46];

assign tmp_108_1_fu_2138_p4 = {{p_Val2_82_1_cast_fu_2133_p2[46:28]}};

assign tmp_108_2_fu_2220_p4 = {{p_Val2_82_2_cast_fu_2215_p2[46:28]}};

assign tmp_108_3_fu_2306_p4 = {{p_Val2_82_3_cast_fu_2301_p2[46:28]}};

assign tmp_108_4_fu_2388_p4 = {{p_Val2_82_4_cast_fu_2383_p2[46:28]}};

assign tmp_108_5_fu_2474_p4 = {{p_Val2_82_5_cast_fu_2469_p2[46:28]}};

assign tmp_108_6_fu_2556_p4 = {{p_Val2_82_6_cast_fu_2551_p2[46:28]}};

assign tmp_108_7_fu_2638_p4 = {{p_Val2_82_7_cast_fu_2633_p2[46:28]}};

assign tmp_108_fu_2528_p2 = (tmp_111_fu_2484_p3 | sel_tmp15_fu_2514_p2);

assign tmp_109_fu_1980_p1 = p_Val2_81_5_fu_1974_p2[46:0];

assign tmp_10_cast_fu_852_p0 = last_error_pos_V_0;

assign tmp_10_cast_fu_852_p1 = tmp_10_cast_fu_852_p0;

assign tmp_10_fu_822_p2 = (tmp_s_fu_802_p2 | tmp_1_fu_808_p2);

assign tmp_110_1_fu_2156_p2 = (($signed(tmp_108_1_fu_2138_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_2_fu_2238_p2 = (($signed(tmp_108_2_fu_2220_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_3_fu_2324_p2 = (($signed(tmp_108_3_fu_2306_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_4_fu_2406_p2 = (($signed(tmp_108_4_fu_2388_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_5_fu_2492_p2 = (($signed(tmp_108_5_fu_2474_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_6_fu_2574_p2 = (($signed(tmp_108_6_fu_2556_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_7_fu_2656_p2 = (($signed(tmp_108_7_fu_2638_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_110_fu_2610_p2 = (tmp_114_fu_2566_p3 | sel_tmp17_fu_2596_p2);

assign tmp_111_fu_2484_p3 = p_Val2_82_5_cast_fu_2469_p2[32'd46];

assign tmp_112_fu_2692_p2 = (tmp_116_fu_2648_p3 | sel_tmp19_fu_2678_p2);

assign tmp_113_fu_1993_p1 = p_Val2_81_6_fu_1987_p2[46:0];

assign tmp_114_1_fu_2710_p1 = p_Val2_83_1_reg_3198;

assign tmp_114_2_fu_2714_p1 = p_Val2_83_2_reg_3204;

assign tmp_114_3_fu_2718_p1 = p_Val2_83_3_reg_3210;

assign tmp_114_4_fu_2722_p1 = p_Val2_83_4_reg_3216;

assign tmp_114_5_fu_2726_p1 = p_Val2_83_5_reg_3222;

assign tmp_114_6_fu_2730_p1 = p_Val2_83_6_reg_3228;

assign tmp_114_7_fu_2734_p1 = p_Val2_83_7_reg_3234;

assign tmp_114_fu_2566_p3 = p_Val2_82_6_cast_fu_2551_p2[32'd46];

assign tmp_115_fu_2006_p1 = p_Val2_81_7_fu_2000_p2[46:0];

assign tmp_116_fu_2648_p3 = p_Val2_82_7_cast_fu_2633_p2[32'd46];

assign tmp_11_fu_856_p2 = ($signed(tmp_cast_fu_840_p1) - $signed(tmp_10_cast_fu_852_p1));

assign tmp_12_fu_962_p1 = $unsigned(p_Val2_8_cast_fu_959_p1);

assign tmp_13_fu_966_p1 = p_Val2_7_reg_2826;

assign tmp_14_fu_1044_p1 = p_Val2_10_reg_2853;

assign tmp_15_fu_1047_p1 = $unsigned(p_Val2_9_cast_fu_1041_p1);

assign tmp_16_fu_1057_p4 = {{p_Val2_11_fu_1051_p2[44:13]}};

assign tmp_17_fu_1067_p2 = (($signed(tmp_16_fu_1057_p4) < $signed(32'd4294959104)) ? 1'b1 : 1'b0);

assign tmp_18_fu_1073_p2 = (($signed(tmp_16_fu_1057_p4) > $signed(32'd8183)) ? 1'b1 : 1'b0);

assign tmp_19_fu_704_p3 = buffer_V_q0[32'd15];

assign tmp_1_fu_808_p2 = (($signed(tmp_6_fu_796_p2) > $signed(32'd819200)) ? 1'b1 : 1'b0);

assign tmp_20_fu_893_p1 = $signed(reg_652);

assign tmp_21_fu_897_p1 = $signed(reg_656);

assign tmp_22_fu_911_p1 = p_Val2_14_fu_901_p2;

assign tmp_23_fu_915_p2 = ($signed(tmp_22_fu_911_p1) + $signed(integral_pos_V_1));

assign tmp_24_cast_fu_988_p1 = p_Val2_14_reg_2831;

assign tmp_24_fu_921_p2 = (($signed(tmp_23_fu_915_p2) < $signed(32'd4294148096)) ? 1'b1 : 1'b0);

assign tmp_25_fu_927_p2 = (($signed(tmp_23_fu_915_p2) > $signed(32'd819200)) ? 1'b1 : 1'b0);

assign tmp_26_fu_941_p2 = (tmp_25_fu_927_p2 | tmp_24_fu_921_p2);

assign tmp_27_fu_947_p3 = ((tmp_26_fu_941_p2[0:0] === 1'b1) ? p_tmp_1_cast_fu_933_p3 : tmp_23_fu_915_p2);

assign tmp_28_fu_1004_p2 = ($signed(tmp_24_cast_fu_988_p1) - $signed(tmp_29_cast_fu_1000_p1));

assign tmp_29_cast_fu_1000_p0 = last_error_pos_V_1;

assign tmp_29_cast_fu_1000_p1 = tmp_29_cast_fu_1000_p0;

assign tmp_29_fu_1082_p1 = $unsigned(p_Val2_18_cast_fu_1079_p1);

assign tmp_2_fu_684_p1 = i_reg_608;

assign tmp_30_fu_1086_p1 = p_Val2_17_reg_2873;

assign tmp_31_fu_1157_p1 = p_Val2_20_reg_2888;

assign tmp_32_fu_1160_p1 = $unsigned(p_Val2_19_cast_fu_1154_p1);

assign tmp_33_fu_1170_p4 = {{p_Val2_21_fu_1164_p2[44:13]}};

assign tmp_34_fu_1180_p2 = (($signed(tmp_33_fu_1170_p4) < $signed(32'd4294959104)) ? 1'b1 : 1'b0);

assign tmp_35_fu_1186_p2 = (($signed(tmp_33_fu_1170_p4) > $signed(32'd8183)) ? 1'b1 : 1'b0);

assign tmp_36_fu_712_p1 = buffer_V_q0[12:0];

assign tmp_37_fu_1108_p1 = $signed(buffer_V_q0);

assign tmp_38_fu_1112_p1 = $signed(measured_V_q0);

assign tmp_39_fu_1122_p4 = {{p_Val2_11_fu_1051_p2[28:13]}};

assign tmp_3_fu_689_p0 = cmdIn_V_q0;

assign tmp_3_fu_689_p1 = tmp_3_fu_689_p0;

assign tmp_40_cast_fu_1132_p3 = ((tmp_17_fu_1067_p2[0:0] === 1'b1) ? 16'd57344 : 16'd8183);

assign tmp_40_fu_836_p1 = p_Val2_4_fu_782_p2[15:0];

assign tmp_41_fu_1140_p2 = (tmp_18_fu_1073_p2 | tmp_17_fu_1067_p2);

assign tmp_42_fu_1215_p4 = {{p_Val2_21_fu_1164_p2[28:13]}};

assign tmp_43_cast_fu_1225_p3 = ((tmp_34_fu_1180_p2[0:0] === 1'b1) ? 16'd57344 : 16'd8183);

assign tmp_43_fu_955_p1 = p_Val2_14_fu_901_p2[15:0];

assign tmp_44_fu_1233_p2 = (tmp_35_fu_1186_p2 | tmp_34_fu_1180_p2);

assign tmp_45_fu_1254_p1 = $signed(p_Val2_29_fu_1247_p3);

assign tmp_46_fu_1258_p1 = $signed(measured_V_q0);

assign tmp_47_fu_1283_p1 = p_Val2_31_reg_2923;

assign tmp_48_cast_fu_1350_p1 = p_Val2_31_reg_2923;

assign tmp_48_fu_1286_p2 = ($signed(tmp_47_fu_1283_p1) + $signed(integral_rate_V_0));

assign tmp_49_fu_1292_p2 = (($signed(tmp_48_fu_1286_p2) < $signed(32'd4294148096)) ? 1'b1 : 1'b0);

assign tmp_4_fu_828_p3 = ((tmp_10_fu_822_p2[0:0] === 1'b1) ? p_tmp_6_cast_fu_814_p3 : tmp_6_fu_796_p2);

assign tmp_50_fu_1298_p2 = (($signed(tmp_48_fu_1286_p2) > $signed(32'd819200)) ? 1'b1 : 1'b0);

assign tmp_51_fu_1312_p2 = (tmp_50_fu_1298_p2 | tmp_49_fu_1292_p2);

assign tmp_52_fu_1318_p3 = ((tmp_51_fu_1312_p2[0:0] === 1'b1) ? p_tmp_3_cast_fu_1304_p3 : tmp_48_fu_1286_p2);

assign tmp_53_cast_fu_1357_p0 = last_error_rate_V_0;

assign tmp_53_cast_fu_1357_p1 = tmp_53_cast_fu_1357_p0;

assign tmp_53_fu_1361_p2 = ($signed(tmp_48_cast_fu_1350_p1) - $signed(tmp_53_cast_fu_1357_p1));

assign tmp_54_fu_1454_p1 = $unsigned(p_Val2_34_cast_fu_1451_p1);

assign tmp_55_fu_1458_p1 = p_Val2_35_reg_2992;

assign tmp_56_fu_1538_p1 = p_Val2_36_reg_3007;

assign tmp_57_fu_1541_p1 = $unsigned(p_Val2_37_cast_fu_1535_p1);

assign tmp_58_fu_1551_p4 = {{p_Val2_38_fu_1545_p2[44:13]}};

assign tmp_59_fu_1561_p2 = (($signed(tmp_58_fu_1551_p4) < $signed(32'd4294959104)) ? 1'b1 : 1'b0);

assign tmp_5_fu_716_p2 = ((tmp_36_fu_712_p1 == 13'd0) ? 1'b1 : 1'b0);

assign tmp_60_fu_1567_p2 = (($signed(tmp_58_fu_1551_p4) > $signed(32'd8183)) ? 1'b1 : 1'b0);

assign tmp_61_fu_1573_p4 = {{p_Val2_38_fu_1545_p2[29:13]}};

assign tmp_62_fu_1603_p2 = (tmp_59_fu_1561_p2 | sel_tmp3_fu_1597_p2);

assign tmp_63_fu_1268_p1 = p_Val2_31_fu_1262_p2[15:0];

assign tmp_64_fu_1332_p1 = $signed(p_Val2_28_fu_1272_p3);

assign tmp_65_fu_1336_p1 = $signed(measured_V_q0);

assign tmp_66_fu_1402_p1 = p_Val2_40_reg_2960;

assign tmp_67_fu_1405_p2 = ($signed(tmp_66_fu_1402_p1) + $signed(integral_rate_V_1));

assign tmp_68_cast_fu_1480_p1 = p_Val2_40_reg_2960;

assign tmp_68_fu_1411_p2 = (($signed(tmp_67_fu_1405_p2) < $signed(32'd4294148096)) ? 1'b1 : 1'b0);

assign tmp_69_fu_1417_p2 = (($signed(tmp_67_fu_1405_p2) > $signed(32'd819200)) ? 1'b1 : 1'b0);

assign tmp_6_fu_796_p2 = ($signed(tmp_fu_792_p1) + $signed(integral_pos_V_0));

assign tmp_70_fu_1431_p2 = (tmp_69_fu_1417_p2 | tmp_68_fu_1411_p2);

assign tmp_71_fu_1437_p3 = ((tmp_70_fu_1431_p2[0:0] === 1'b1) ? p_tmp_4_cast_fu_1423_p3 : tmp_67_fu_1405_p2);

assign tmp_72_fu_1491_p2 = ($signed(tmp_68_cast_fu_1480_p1) - $signed(tmp_73_cast_fu_1487_p1));

assign tmp_73_cast_fu_1487_p0 = last_error_rate_V_1;

assign tmp_73_cast_fu_1487_p1 = tmp_73_cast_fu_1487_p0;

assign tmp_73_fu_1612_p1 = $unsigned(p_Val2_43_cast_fu_1609_p1);

assign tmp_74_fu_1616_p1 = p_Val2_44_reg_3027;

assign tmp_75_fu_1671_p1 = p_Val2_45_reg_3042;

assign tmp_76_fu_1674_p1 = $unsigned(p_Val2_46_cast_fu_1668_p1);

assign tmp_77_fu_1684_p4 = {{p_Val2_47_fu_1678_p2[44:13]}};

assign tmp_78_fu_1694_p2 = (($signed(tmp_77_fu_1684_p4) < $signed(32'd4294959104)) ? 1'b1 : 1'b0);

assign tmp_79_fu_1700_p2 = (($signed(tmp_77_fu_1684_p4) > $signed(32'd8183)) ? 1'b1 : 1'b0);

assign tmp_7_fu_744_p2 = ((p_1_fu_736_p3 != 3'd0) ? 1'b1 : 1'b0);

assign tmp_80_fu_1706_p4 = {{p_Val2_47_fu_1678_p2[29:13]}};

assign tmp_81_fu_1736_p2 = (tmp_78_fu_1694_p2 | sel_tmp8_fu_1730_p2);

assign tmp_82_fu_1346_p1 = p_Val2_40_fu_1340_p2[15:0];

assign tmp_83_fu_1638_p1 = $signed(p_Val2_27_fu_1528_p3);

assign tmp_84_fu_1642_p1 = $signed(measured_V_q0);

assign tmp_86_cast_fu_1652_p3 = ((tmp_59_fu_1561_p2[0:0] === 1'b1) ? 19'd491520 : 19'd32732);

assign tmp_86_fu_1660_p3 = ((tmp_62_fu_1603_p2[0:0] === 1'b1) ? tmp_86_cast_fu_1652_p3 : phitmp1_fu_1583_p3);

assign tmp_87_fu_1773_p3 = ((tmp_81_fu_1736_p2[0:0] === 1'b1) ? tmp_88_cast_fu_1765_p3 : phitmp2_fu_1716_p3);

assign tmp_88_cast_fu_1765_p3 = ((tmp_78_fu_1694_p2[0:0] === 1'b1) ? 19'd491520 : 19'd32732);

assign tmp_88_fu_2013_p3 = {{reg_652}, {30'd0}};

assign tmp_89_fu_1915_p1 = p_Val2_53_fu_1909_p2[46:0];

assign tmp_8_fu_774_p1 = $signed(reg_652);

assign tmp_90_fu_2037_p1 = tmp_88_fu_2013_p3;

assign tmp_91_cast1_fu_2033_p1 = $unsigned(p_Val2_53_cast_fu_2010_p1);

assign tmp_91_cast_fu_1830_p1 = $signed(addconv_fu_1803_p2);

assign tmp_91_fu_2052_p4 = {{p_Val2_55_cast_fu_2047_p2[46:28]}};

assign tmp_92_cast_fu_1834_p1 = $signed(p_Val2_52_fu_1824_p2);

assign tmp_92_fu_2062_p3 = p_Val2_55_cast_fu_2047_p2[32'd46];

assign tmp_93_fu_2070_p2 = (($signed(tmp_91_fu_2052_p4) > $signed(19'd32735)) ? 1'b1 : 1'b0);

assign tmp_94_cast_cast1_fu_2021_p1 = tmp_88_fu_2013_p3;

assign tmp_94_cast_cast2_fu_2025_p1 = tmp_88_fu_2013_p3;

assign tmp_94_cast_cast_fu_2029_p1 = tmp_88_fu_2013_p3;

assign tmp_94_fu_2106_p2 = (tmp_92_fu_2062_p3 | sel_tmp2_fu_2092_p2);

assign tmp_95_fu_2706_p1 = p_Val2_55_reg_3192;

assign tmp_96_fu_1928_p1 = p_Val2_81_1_fu_1922_p2[46:0];

assign tmp_97_fu_2148_p3 = p_Val2_82_1_cast_fu_2133_p2[32'd46];

assign tmp_98_fu_2192_p2 = (tmp_97_fu_2148_p3 | sel_tmp4_fu_2178_p2);

assign tmp_99_fu_1941_p1 = p_Val2_81_2_fu_1935_p2[46:0];

assign tmp_9_fu_778_p1 = $signed(reg_656);

assign tmp_cast_fu_840_p1 = p_Val2_4_reg_2789;

assign tmp_fu_792_p1 = p_Val2_4_fu_782_p2;

assign tmp_s_fu_802_p2 = (($signed(tmp_6_fu_796_p2) < $signed(32'd4294148096)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_2_reg_2766[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_86_reg_3057[1:0] <= 2'b00;
    tmp_87_reg_3067[1:0] <= 2'b00;
    r_V_2_reg_3072[14:0] <= 15'b000000000000000;
    r_V_2_1_reg_3077[14:0] <= 15'b000000000000000;
    addconv2_reg_3082[14:0] <= 15'b000000000000000;
    r_V_2_3_reg_3087[14:0] <= 15'b000000000000000;
    r_V_2_4_reg_3092[14:0] <= 15'b000000000000000;
    r_V_2_5_reg_3097[14:0] <= 15'b000000000000000;
    addconv4_reg_3102[14:0] <= 15'b000000000000000;
    r_V_2_7_reg_3107[14:0] <= 15'b000000000000000;
    p_Val2_53_reg_3112[14:0] <= 15'b000000000000000;
    tmp_89_reg_3117[14:0] <= 15'b000000000000000;
    p_Val2_81_1_reg_3122[14:0] <= 15'b000000000000000;
    tmp_96_reg_3127[14:0] <= 15'b000000000000000;
    p_Val2_81_2_reg_3132[14:0] <= 15'b000000000000000;
    tmp_99_reg_3137[14:0] <= 15'b000000000000000;
    p_Val2_81_3_reg_3142[14:0] <= 15'b000000000000000;
    tmp_102_reg_3147[14:0] <= 15'b000000000000000;
    p_Val2_81_4_reg_3152[14:0] <= 15'b000000000000000;
    tmp_105_reg_3157[14:0] <= 15'b000000000000000;
    p_Val2_81_5_reg_3162[14:0] <= 15'b000000000000000;
    tmp_109_reg_3167[14:0] <= 15'b000000000000000;
    p_Val2_81_6_reg_3172[14:0] <= 15'b000000000000000;
    tmp_113_reg_3177[14:0] <= 15'b000000000000000;
    p_Val2_81_7_reg_3182[14:0] <= 15'b000000000000000;
    tmp_115_reg_3187[14:0] <= 15'b000000000000000;
end

endmodule //pid
