-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pid is
generic (
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_AWVALID : IN STD_LOGIC;
    s_axi_TEST_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_WVALID : IN STD_LOGIC;
    s_axi_TEST_WREADY : OUT STD_LOGIC;
    s_axi_TEST_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_ARVALID : IN STD_LOGIC;
    s_axi_TEST_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_RVALID : OUT STD_LOGIC;
    s_axi_TEST_RREADY : IN STD_LOGIC;
    s_axi_TEST_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_BVALID : OUT STD_LOGIC;
    s_axi_TEST_BREADY : IN STD_LOGIC;
    s_axi_TEST_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of pid is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pid,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=40,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=74,HLS_SYN_FF=3713,HLS_SYN_LUT=5780,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_FFF38000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111100111000000000000000";
    constant ap_const_lv32_C8000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011001000000000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_FFFFE000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110000000000000";
    constant ap_const_lv32_1FF7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111111110111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv16_E000 : STD_LOGIC_VECTOR (15 downto 0) := "1110000000000000";
    constant ap_const_lv16_1FF7 : STD_LOGIC_VECTOR (15 downto 0) := "0001111111110111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv19_78000 : STD_LOGIC_VECTOR (18 downto 0) := "1111000000000000000";
    constant ap_const_lv19_7FDC : STD_LOGIC_VECTOR (18 downto 0) := "0000111111111011100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv49_2A3D : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010101000111101";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv19_7FDF : STD_LOGIC_VECTOR (18 downto 0) := "0000111111111011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal cmdIn_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmdIn_V_ce0 : STD_LOGIC;
    signal cmdIn_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal measured_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal measured_V_ce0 : STD_LOGIC;
    signal measured_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal kp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal kp_V_ce0 : STD_LOGIC;
    signal kp_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kd_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal kd_V_ce0 : STD_LOGIC;
    signal kd_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ki_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ki_V_ce0 : STD_LOGIC;
    signal ki_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal test_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal test_V_ce0 : STD_LOGIC;
    signal test_V_we0 : STD_LOGIC;
    signal test_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal buffer_V_ce0 : STD_LOGIC;
    signal buffer_V_we0 : STD_LOGIC;
    signal buffer_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal integral_pos_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_error_pos_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal integral_pos_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_error_pos_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal integral_rate_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_error_rate_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal integral_rate_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_error_rate_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_2777 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_1_fu_678_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_2761 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_2766 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_4_fu_782_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_4_reg_2789 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_2795 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_reg_2801 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_856_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_reg_2816 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_869_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_8_reg_2821 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_7_fu_882_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_7_reg_2826 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_14_fu_901_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_14_reg_2831 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_27_fu_947_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_2837 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_955_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_reg_2848 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_10_fu_969_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_10_reg_2853 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_9_fu_982_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_9_reg_2858 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_28_fu_1004_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_28_reg_2863 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_18_fu_1017_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_18_reg_2868 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_17_fu_1030_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_17_reg_2873 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_20_fu_1089_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_20_reg_2888 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_19_fu_1102_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_19_reg_2893 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_1116_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_reg_2898 : STD_LOGIC_VECTOR (16 downto 0);
    signal phitmp5_fu_1146_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp5_reg_2903 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp_reg_2908 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phitmp6_fu_1239_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp6_reg_2913 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_31_fu_1262_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_31_reg_2923 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_63_fu_1268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_reg_2940 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_1318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_2950 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_40_fu_1340_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_40_reg_2960 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_82_fu_1346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_reg_2977 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_1361_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_53_reg_2982 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_34_fu_1374_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_34_reg_2987 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_35_fu_1387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_35_reg_2992 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_1437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_reg_2997 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_36_fu_1461_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_36_reg_3007 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_37_fu_1474_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_37_reg_3012 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_72_fu_1491_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_72_reg_3017 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_43_fu_1504_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_43_reg_3022 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_44_fu_1517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_44_reg_3027 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_45_fu_1619_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_45_reg_3042 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_46_fu_1632_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_46_reg_3047 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_1_fu_1646_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_reg_3052 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_86_fu_1660_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_86_reg_3057 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_85_reg_3062 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_87_fu_1773_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_87_reg_3067 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_2_fu_1838_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_reg_3072 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r_V_2_1_fu_1854_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_1_reg_3077 : STD_LOGIC_VECTOR (33 downto 0);
    signal addconv2_fu_1860_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal addconv2_reg_3082 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_3_fu_1876_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_3_reg_3087 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_4_fu_1882_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_4_reg_3092 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_5_fu_1888_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_5_reg_3097 : STD_LOGIC_VECTOR (33 downto 0);
    signal addconv4_fu_1894_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal addconv4_reg_3102 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_7_fu_1900_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_7_reg_3107 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_53_fu_1909_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_53_reg_3112 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_89_fu_1915_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_89_reg_3117 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_1_fu_1922_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_1_reg_3122 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_96_fu_1928_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_96_reg_3127 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_2_fu_1935_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_2_reg_3132 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_99_fu_1941_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_99_reg_3137 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_3_fu_1948_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_3_reg_3142 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_102_fu_1954_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_102_reg_3147 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_4_fu_1961_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_4_reg_3152 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_105_fu_1967_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_105_reg_3157 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_5_fu_1974_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_5_reg_3162 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_109_fu_1980_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_109_reg_3167 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_6_fu_1987_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_6_reg_3172 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_113_fu_1993_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_113_reg_3177 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_81_7_fu_2000_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_81_7_reg_3182 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_115_fu_2006_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_115_reg_3187 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_55_fu_2112_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_55_reg_3192 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_OUT_r_AWREADY : STD_LOGIC;
    signal p_Val2_83_1_fu_2198_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_1_reg_3198 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_2_fu_2280_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_2_reg_3204 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_3_fu_2366_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_3_reg_3210 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_4_fu_2448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_4_reg_3216 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_5_fu_2534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_5_reg_3222 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_6_fu_2616_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_6_reg_3228 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_7_fu_2698_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_7_reg_3234 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_608 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_26_reg_619 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_25_reg_630 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_16_reg_641 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ioackin_OUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUT_r_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_OUT_r_WREADY : STD_LOGIC;
    signal tmp_3_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_fu_2706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_1_fu_2710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_2_fu_2714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_3_fu_2718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_4_fu_2722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_5_fu_2726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_6_fu_2730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_7_fu_2734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_689_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_712_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_fu_694_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_722_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_728_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_1_fu_736_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_774_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_778_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_6_cast_fu_814_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_852_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_840_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_cast_fu_852_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_869_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_8_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_882_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_893_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_897_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_1_cast_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_cast_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_962_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_13_fu_966_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_9_fu_982_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_982_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_cast_fu_1000_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_cast_fu_988_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_cast_fu_1000_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_18_fu_1017_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_18_fu_1017_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_fu_1030_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_17_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_cast_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1047_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_14_fu_1044_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Val2_11_fu_1051_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_16_fu_1057_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_cast_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1082_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_30_fu_1086_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_19_fu_1102_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_1102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_1108_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_38_fu_1112_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_17_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_cast_fu_1132_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_1122_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_19_cast_fu_1154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1160_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_31_fu_1157_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Val2_21_fu_1164_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_33_fu_1170_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_24_fu_1199_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_24_fu_1199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_24_fu_1199_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_34_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_cast_fu_1225_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_1215_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_29_fu_1247_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_1254_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_46_fu_1258_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_fu_1283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_3_cast_fu_1304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_fu_1272_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_fu_1332_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_65_fu_1336_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_53_cast_fu_1357_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_cast_fu_1350_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_53_cast_fu_1357_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_34_fu_1374_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_34_fu_1374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_35_fu_1387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_35_fu_1387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_1402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_1405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_1417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_1431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_4_cast_fu_1423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_34_cast_fu_1451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1454_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_55_fu_1458_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_37_fu_1474_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_37_fu_1474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_cast_fu_1487_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_cast_fu_1480_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_73_cast_fu_1487_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_43_fu_1504_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_43_fu_1504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_44_fu_1517_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_44_fu_1517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_37_cast_fu_1535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1541_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_56_fu_1538_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Val2_38_fu_1545_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_58_fu_1551_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1573_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_59_fu_1561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_1597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_43_cast_fu_1609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_1612_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_74_fu_1616_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_46_fu_1632_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_46_fu_1632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_27_fu_1528_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_fu_1638_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_84_fu_1642_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_62_fu_1603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_cast_fu_1652_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal phitmp1_fu_1583_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_46_cast_fu_1668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_1674_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_75_fu_1671_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Val2_47_fu_1678_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_77_fu_1684_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_1706_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_78_fu_1694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_1724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_49_fu_1749_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_49_fu_1749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_49_fu_1749_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_81_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_cast_fu_1765_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal phitmp2_fu_1716_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl1_fu_1781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_51_fu_1792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_51_cast_fu_1799_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl1_cast_fu_1788_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_fu_1809_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_cast_fu_1820_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal addconv_fu_1803_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_52_fu_1824_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_91_cast_fu_1830_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl_cast1_fu_1816_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sum_fu_1844_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_cast_fu_1850_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal addconv3_fu_1866_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_102_3_cast_fu_1872_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_92_cast_fu_1834_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_53_fu_1909_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_1_fu_1922_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_2_fu_1935_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_3_fu_1948_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_4_fu_1961_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_5_fu_1974_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_6_fu_1987_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_81_7_fu_2000_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_88_fu_2013_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_53_cast_fu_2010_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_91_cast1_fu_2033_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_94_cast_cast_fu_2029_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_90_fu_2037_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Val2_55_cast_fu_2047_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_91_fu_2052_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_54_fu_2041_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_92_fu_2062_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_2070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_2086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_2092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_2106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_cast_fu_2098_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp4_fu_2076_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_81_1_cast_fu_2120_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_10646_1_cast_fu_2123_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_94_cast_cast2_fu_2025_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Val2_82_1_cast_fu_2133_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_1_fu_2138_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_1_fu_2127_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_97_fu_2148_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_1_fu_2156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_2172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_2178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_2192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_cast_fu_2184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_1_fu_2162_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10646_2_cast_fu_2206_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_94_cast_cast1_fu_2021_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_82_2_cast_fu_2215_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_2_fu_2220_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_2_fu_2209_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_100_fu_2230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_2_fu_2238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_2254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_2260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_2274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_cast_fu_2266_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_2_fu_2244_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_81_3_cast_fu_2288_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_10646_3_cast_fu_2291_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_82_3_cast_fu_2301_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_3_fu_2306_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_3_fu_2295_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_103_fu_2316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_3_fu_2324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_2340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_2346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_2360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_cast_fu_2352_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_3_fu_2330_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10646_4_cast_fu_2374_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_82_4_cast_fu_2383_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_4_fu_2388_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_4_fu_2377_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_107_fu_2398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_4_fu_2406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_2422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_2428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_2442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp18_cast_fu_2434_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_4_fu_2412_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_81_5_cast_fu_2456_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_10646_5_cast_fu_2459_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Val2_82_5_cast_fu_2469_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_5_fu_2474_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_5_fu_2463_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_111_fu_2484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_5_fu_2492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_2508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_2514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_2528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_cast_fu_2520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_5_fu_2498_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10646_6_cast_fu_2542_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_82_6_cast_fu_2551_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_6_fu_2556_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_6_fu_2545_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_114_fu_2566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_6_fu_2574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_2590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_2596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_2610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_cast_fu_2602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_6_fu_2580_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10646_7_cast_fu_2624_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_82_7_cast_fu_2633_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_108_7_fu_2638_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_82_7_fu_2627_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_116_fu_2648_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_7_fu_2656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp18_fu_2672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_2678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_2692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp27_cast_fu_2684_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp49_7_fu_2662_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component pid_buffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pid_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        cmdIn_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        cmdIn_V_ce0 : IN STD_LOGIC;
        cmdIn_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        measured_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        measured_V_ce0 : IN STD_LOGIC;
        measured_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        kp_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        kp_V_ce0 : IN STD_LOGIC;
        kp_V_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kd_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        kd_V_ce0 : IN STD_LOGIC;
        kd_V_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ki_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ki_V_ce0 : IN STD_LOGIC;
        ki_V_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pid_TEST_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        test_V_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        test_V_ce0 : IN STD_LOGIC;
        test_V_we0 : IN STD_LOGIC;
        test_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pid_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    buffer_V_U : component pid_buffer_V
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_V_address0,
        ce0 => buffer_V_ce0,
        we0 => buffer_V_we0,
        d0 => cmdIn_V_q0,
        q0 => buffer_V_q0);

    pid_CTRL_s_axi_U : component pid_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        cmdIn_V_address0 => cmdIn_V_address0,
        cmdIn_V_ce0 => cmdIn_V_ce0,
        cmdIn_V_q0 => cmdIn_V_q0,
        measured_V_address0 => measured_V_address0,
        measured_V_ce0 => measured_V_ce0,
        measured_V_q0 => measured_V_q0,
        kp_V_address0 => kp_V_address0,
        kp_V_ce0 => kp_V_ce0,
        kp_V_q0 => kp_V_q0,
        kd_V_address0 => kd_V_address0,
        kd_V_ce0 => kd_V_ce0,
        kd_V_q0 => kd_V_q0,
        ki_V_address0 => ki_V_address0,
        ki_V_ce0 => ki_V_ce0,
        ki_V_q0 => ki_V_q0);

    pid_TEST_s_axi_U : component pid_TEST_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_AWVALID,
        AWREADY => s_axi_TEST_AWREADY,
        AWADDR => s_axi_TEST_AWADDR,
        WVALID => s_axi_TEST_WVALID,
        WREADY => s_axi_TEST_WREADY,
        WDATA => s_axi_TEST_WDATA,
        WSTRB => s_axi_TEST_WSTRB,
        ARVALID => s_axi_TEST_ARVALID,
        ARREADY => s_axi_TEST_ARREADY,
        ARADDR => s_axi_TEST_ARADDR,
        RVALID => s_axi_TEST_RVALID,
        RREADY => s_axi_TEST_RREADY,
        RDATA => s_axi_TEST_RDATA,
        RRESP => s_axi_TEST_RRESP,
        BVALID => s_axi_TEST_BVALID,
        BREADY => s_axi_TEST_BREADY,
        BRESP => s_axi_TEST_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        test_V_address0 => test_V_address0,
        test_V_ce0 => test_V_ce0,
        test_V_we0 => test_V_we0,
        test_V_d0 => test_V_d0);

    pid_OUT_r_m_axi_U : component pid_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_8,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => OUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    if ((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = OUT_r_AWREADY)) then 
                        ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_608 <= i_1_reg_2761;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_608 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    integral_pos_V_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                integral_pos_V_0 <= tmp_4_reg_2795;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                integral_pos_V_0 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    integral_pos_V_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                integral_pos_V_1 <= tmp_27_reg_2837;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                integral_pos_V_1 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    last_error_pos_V_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                last_error_pos_V_0 <= tmp_40_reg_2801;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                last_error_pos_V_0 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    last_error_pos_V_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                last_error_pos_V_1 <= tmp_43_reg_2848;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                last_error_pos_V_1 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_Val2_25_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_Val2_25_reg_630 <= phitmp6_reg_2913;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_25_reg_630 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_Val2_26_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_Val2_26_reg_619 <= phitmp5_reg_2903;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_26_reg_619 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_Val2_s_16_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_Val2_s_16_reg_641 <= phitmp_reg_2908;
            elsif (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_16_reg_641 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    addconv2_reg_3082(33 downto 15) <= addconv2_fu_1860_p2(33 downto 15);
                    addconv4_reg_3102(33 downto 15) <= addconv4_fu_1894_p2(33 downto 15);
                    r_V_2_1_reg_3077(33 downto 15) <= r_V_2_1_fu_1854_p2(33 downto 15);
                    r_V_2_3_reg_3087(33 downto 15) <= r_V_2_3_fu_1876_p2(33 downto 15);
                    r_V_2_4_reg_3092(33 downto 15) <= r_V_2_4_fu_1882_p2(33 downto 15);
                    r_V_2_5_reg_3097(33 downto 15) <= r_V_2_5_fu_1888_p2(33 downto 15);
                    r_V_2_7_reg_3107(33 downto 15) <= r_V_2_7_fu_1900_p2(33 downto 15);
                    r_V_2_reg_3072(33 downto 15) <= r_V_2_fu_1838_p2(33 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_2761 <= i_1_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                integral_rate_V_0 <= tmp_52_fu_1318_p3;
                p_Val2_40_reg_2960 <= p_Val2_40_fu_1340_p2;
                tmp_52_reg_2950 <= tmp_52_fu_1318_p3;
                tmp_82_reg_2977 <= tmp_82_fu_1346_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                integral_rate_V_1 <= tmp_71_fu_1437_p3;
                last_error_rate_V_0 <= tmp_63_reg_2940;
                p_Val2_34_reg_2987 <= p_Val2_34_fu_1374_p2;
                p_Val2_35_reg_2992 <= p_Val2_35_fu_1387_p2;
                tmp_53_reg_2982 <= tmp_53_fu_1361_p2;
                tmp_71_reg_2997 <= tmp_71_fu_1437_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                last_error_rate_V_1 <= tmp_82_reg_2977;
                p_Val2_36_reg_3007 <= p_Val2_36_fu_1461_p2;
                p_Val2_37_reg_3012 <= p_Val2_37_fu_1474_p2;
                p_Val2_43_reg_3022 <= p_Val2_43_fu_1504_p2;
                p_Val2_44_reg_3027 <= p_Val2_44_fu_1517_p2;
                tmp_72_reg_3017 <= tmp_72_fu_1491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                p_Val2_10_reg_2853 <= p_Val2_10_fu_969_p2;
                p_Val2_17_reg_2873 <= p_Val2_17_fu_1030_p2;
                p_Val2_18_reg_2868 <= p_Val2_18_fu_1017_p2;
                p_Val2_9_reg_2858 <= p_Val2_9_fu_982_p2;
                tmp_28_reg_2863 <= tmp_28_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_14_reg_2831 <= p_Val2_14_fu_901_p2;
                tmp_27_reg_2837 <= tmp_27_fu_947_p3;
                tmp_43_reg_2848 <= tmp_43_fu_955_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                p_Val2_19_reg_2893 <= p_Val2_19_fu_1102_p2;
                p_Val2_20_reg_2888 <= p_Val2_20_fu_1089_p2;
                phitmp5_reg_2903 <= phitmp5_fu_1146_p3;
                r_V_reg_2898 <= r_V_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Val2_31_reg_2923 <= p_Val2_31_fu_1262_p2;
                tmp_63_reg_2940 <= tmp_63_fu_1268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_Val2_45_reg_3042 <= p_Val2_45_fu_1619_p2;
                p_Val2_46_reg_3047 <= p_Val2_46_fu_1632_p2;
                r_V_1_reg_3052 <= r_V_1_fu_1646_p2;
                    tmp_86_reg_3057(18 downto 2) <= tmp_86_fu_1660_p3(18 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_4_reg_2789 <= p_Val2_4_fu_782_p2;
                tmp_40_reg_2801 <= tmp_40_fu_836_p1;
                tmp_4_reg_2795 <= tmp_4_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    p_Val2_53_reg_3112(48 downto 15) <= p_Val2_53_fu_1909_p2(48 downto 15);
                    p_Val2_81_1_reg_3122(48 downto 15) <= p_Val2_81_1_fu_1922_p2(48 downto 15);
                    p_Val2_81_2_reg_3132(48 downto 15) <= p_Val2_81_2_fu_1935_p2(48 downto 15);
                    p_Val2_81_3_reg_3142(48 downto 15) <= p_Val2_81_3_fu_1948_p2(48 downto 15);
                    p_Val2_81_4_reg_3152(48 downto 15) <= p_Val2_81_4_fu_1961_p2(48 downto 15);
                    p_Val2_81_5_reg_3162(48 downto 15) <= p_Val2_81_5_fu_1974_p2(48 downto 15);
                    p_Val2_81_6_reg_3172(48 downto 15) <= p_Val2_81_6_fu_1987_p2(48 downto 15);
                    p_Val2_81_7_reg_3182(48 downto 15) <= p_Val2_81_7_fu_2000_p2(48 downto 15);
                    tmp_102_reg_3147(46 downto 15) <= tmp_102_fu_1954_p1(46 downto 15);
                    tmp_105_reg_3157(46 downto 15) <= tmp_105_fu_1967_p1(46 downto 15);
                    tmp_109_reg_3167(46 downto 15) <= tmp_109_fu_1980_p1(46 downto 15);
                    tmp_113_reg_3177(46 downto 15) <= tmp_113_fu_1993_p1(46 downto 15);
                    tmp_115_reg_3187(46 downto 15) <= tmp_115_fu_2006_p1(46 downto 15);
                    tmp_89_reg_3117(46 downto 15) <= tmp_89_fu_1915_p1(46 downto 15);
                    tmp_96_reg_3127(46 downto 15) <= tmp_96_fu_1928_p1(46 downto 15);
                    tmp_99_reg_3137(46 downto 15) <= tmp_99_fu_1941_p1(46 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                p_Val2_55_reg_3192 <= p_Val2_55_fu_2112_p3;
                p_Val2_83_1_reg_3198 <= p_Val2_83_1_fu_2198_p3;
                p_Val2_83_2_reg_3204 <= p_Val2_83_2_fu_2280_p3;
                p_Val2_83_3_reg_3210 <= p_Val2_83_3_fu_2366_p3;
                p_Val2_83_4_reg_3216 <= p_Val2_83_4_fu_2448_p3;
                p_Val2_83_5_reg_3222 <= p_Val2_83_5_fu_2534_p3;
                p_Val2_83_6_reg_3228 <= p_Val2_83_6_fu_2616_p3;
                p_Val2_83_7_reg_3234 <= p_Val2_83_7_fu_2698_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                p_Val2_7_reg_2826 <= p_Val2_7_fu_882_p2;
                p_Val2_8_reg_2821 <= p_Val2_8_fu_869_p2;
                tmp_11_reg_2816 <= tmp_11_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                phitmp6_reg_2913 <= phitmp6_fu_1239_p3;
                phitmp_reg_2908 <= p_Val2_24_fu_1199_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_652 <= buffer_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_656 <= measured_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                reg_660 <= kp_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                reg_664 <= ki_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((tmp_7_reg_2777 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_668 <= kd_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_672_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_2_reg_2766(2 downto 0) <= tmp_2_fu_684_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_7_reg_2777 <= tmp_7_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_85_reg_3062 <= p_Val2_49_fu_1749_p2(29 downto 13);
                    tmp_87_reg_3067(18 downto 2) <= tmp_87_fu_1773_p3(18 downto 2);
            end if;
        end if;
    end process;
    tmp_2_reg_2766(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_86_reg_3057(1 downto 0) <= "00";
    tmp_87_reg_3067(1 downto 0) <= "00";
    r_V_2_reg_3072(14 downto 0) <= "000000000000000";
    r_V_2_1_reg_3077(14 downto 0) <= "000000000000000";
    addconv2_reg_3082(14 downto 0) <= "000000000000000";
    r_V_2_3_reg_3087(14 downto 0) <= "000000000000000";
    r_V_2_4_reg_3092(14 downto 0) <= "000000000000000";
    r_V_2_5_reg_3097(14 downto 0) <= "000000000000000";
    addconv4_reg_3102(14 downto 0) <= "000000000000000";
    r_V_2_7_reg_3107(14 downto 0) <= "000000000000000";
    p_Val2_53_reg_3112(14 downto 0) <= "000000000000000";
    tmp_89_reg_3117(14 downto 0) <= "000000000000000";
    p_Val2_81_1_reg_3122(14 downto 0) <= "000000000000000";
    tmp_96_reg_3127(14 downto 0) <= "000000000000000";
    p_Val2_81_2_reg_3132(14 downto 0) <= "000000000000000";
    tmp_99_reg_3137(14 downto 0) <= "000000000000000";
    p_Val2_81_3_reg_3142(14 downto 0) <= "000000000000000";
    tmp_102_reg_3147(14 downto 0) <= "000000000000000";
    p_Val2_81_4_reg_3152(14 downto 0) <= "000000000000000";
    tmp_105_reg_3157(14 downto 0) <= "000000000000000";
    p_Val2_81_5_reg_3162(14 downto 0) <= "000000000000000";
    tmp_109_reg_3167(14 downto 0) <= "000000000000000";
    p_Val2_81_6_reg_3172(14 downto 0) <= "000000000000000";
    tmp_113_reg_3177(14 downto 0) <= "000000000000000";
    p_Val2_81_7_reg_3182(14 downto 0) <= "000000000000000";
    tmp_115_reg_3187(14 downto 0) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, OUT_r_BVALID, ap_CS_fsm_state2, exitcond1_fu_672_p2, tmp_7_fu_744_p2, ap_CS_fsm_state4, ap_sig_ioackin_OUT_r_AWREADY, ap_sig_ioackin_OUT_r_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_7_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    OUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state20, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if (((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_CS_fsm_state33, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WDATA_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, p_Val2_55_reg_3192, p_Val2_83_1_reg_3198, p_Val2_83_2_reg_3204, p_Val2_83_3_reg_3210, p_Val2_83_4_reg_3216, p_Val2_83_5_reg_3222, p_Val2_83_6_reg_3228, p_Val2_83_7_reg_3234, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                OUT_r_WDATA <= p_Val2_83_7_reg_3234;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                OUT_r_WDATA <= p_Val2_83_6_reg_3228;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                OUT_r_WDATA <= p_Val2_83_5_reg_3222;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                OUT_r_WDATA <= p_Val2_83_4_reg_3216;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                OUT_r_WDATA <= p_Val2_83_3_reg_3210;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                OUT_r_WDATA <= p_Val2_83_2_reg_3204;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                OUT_r_WDATA <= p_Val2_83_1_reg_3198;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                OUT_r_WDATA <= p_Val2_55_reg_3192;
            else 
                OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    addconv2_fu_1860_p2 <= std_logic_vector(signed(p_shl_cast1_fu_1816_p1) + signed(sum_cast_fu_1850_p1));
    addconv3_fu_1866_p2 <= std_logic_vector(signed(p_shl1_cast_fu_1788_p1) - signed(p_Val2_51_cast_fu_1799_p1));
    addconv4_fu_1894_p2 <= std_logic_vector(signed(sum_cast_fu_1850_p1) - signed(p_shl_cast1_fu_1816_p1));
    addconv_fu_1803_p2 <= std_logic_vector(signed(p_Val2_51_cast_fu_1799_p1) - signed(p_shl1_cast_fu_1788_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state33, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_OUT_r_AWREADY_assign_proc : process(OUT_r_AWREADY, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_AWREADY <= OUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUT_r_WREADY_assign_proc : process(OUT_r_WREADY, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_WREADY <= OUT_r_WREADY;
        else 
            ap_sig_ioackin_OUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    buffer_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state2, tmp_2_reg_2766, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_V_address0 <= ap_const_lv3_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            buffer_V_address0 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_V_address0 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buffer_V_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_V_address0 <= tmp_2_reg_2766(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_V_address0 <= ap_const_lv3_5;
        else 
            buffer_V_address0 <= "XXX";
        end if; 
    end process;


    buffer_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_V_ce0 <= ap_const_logic_1;
        else 
            buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_V_we0 <= ap_const_logic_1;
        else 
            buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmdIn_V_address0 <= tmp_2_fu_684_p1(3 - 1 downto 0);

    cmdIn_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cmdIn_V_ce0 <= ap_const_logic_1;
        else 
            cmdIn_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_672_p2 <= "1" when (i_reg_608 = ap_const_lv3_6) else "0";
    i_1_fu_678_p2 <= std_logic_vector(unsigned(i_reg_608) + unsigned(ap_const_lv3_1));

    kd_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            kd_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            kd_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kd_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kd_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            kd_V_address0 <= "XX";
        end if; 
    end process;


    kd_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            kd_V_ce0 <= ap_const_logic_1;
        else 
            kd_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ki_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ki_V_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ki_V_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ki_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ki_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            ki_V_address0 <= "XX";
        end if; 
    end process;


    ki_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ki_V_ce0 <= ap_const_logic_1;
        else 
            ki_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kp_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            kp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            kp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            kp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kp_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            kp_V_address0 <= "XXX";
        end if; 
    end process;


    kp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            kp_V_ce0 <= ap_const_logic_1;
        else 
            kp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    measured_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            measured_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            measured_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            measured_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            measured_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            measured_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            measured_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            measured_V_address0 <= "XXX";
        end if; 
    end process;


    measured_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            measured_V_ce0 <= ap_const_logic_1;
        else 
            measured_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_736_p3 <= 
        p_s_fu_728_p3 when (tmp_19_fu_704_p3(0) = '1') else 
        ret_V_fu_694_p4;
    p_Val2_10_fu_969_p2 <= std_logic_vector(unsigned(tmp_12_fu_962_p1) + unsigned(tmp_13_fu_966_p1));
    p_Val2_11_fu_1051_p2 <= std_logic_vector(unsigned(tmp_15_fu_1047_p1) + unsigned(tmp_14_fu_1044_p1));
    p_Val2_14_fu_901_p2 <= std_logic_vector(signed(tmp_20_fu_893_p1) - signed(tmp_21_fu_897_p1));
    p_Val2_17_fu_1030_p0 <= tmp_27_reg_2837;
    p_Val2_17_fu_1030_p1 <= reg_664;
    p_Val2_17_fu_1030_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_17_fu_1030_p0) * signed(p_Val2_17_fu_1030_p1))), 64));
        p_Val2_18_cast_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_reg_2868),64));

    p_Val2_18_fu_1017_p0 <= p_Val2_14_reg_2831;
    p_Val2_18_fu_1017_p1 <= reg_660;
    p_Val2_18_fu_1017_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_18_fu_1017_p0) * signed(p_Val2_18_fu_1017_p1))), 49));
        p_Val2_19_cast_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_19_reg_2893),64));

    p_Val2_19_fu_1102_p0 <= tmp_28_reg_2863;
    p_Val2_19_fu_1102_p1 <= reg_668;
    p_Val2_19_fu_1102_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_19_fu_1102_p0) * signed(p_Val2_19_fu_1102_p1))), 50));
    p_Val2_20_fu_1089_p2 <= std_logic_vector(unsigned(tmp_29_fu_1082_p1) + unsigned(tmp_30_fu_1086_p1));
    p_Val2_21_fu_1164_p2 <= std_logic_vector(unsigned(tmp_32_fu_1160_p1) + unsigned(tmp_31_fu_1157_p1));
    p_Val2_24_fu_1199_p0 <= r_V_reg_2898;
    p_Val2_24_fu_1199_p1 <= reg_660;
    p_Val2_24_fu_1199_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_24_fu_1199_p0) * signed(p_Val2_24_fu_1199_p1))), 49));
    p_Val2_27_fu_1528_p3 <= 
        p_Val2_s_16_reg_641 when (tmp_7_reg_2777(0) = '1') else 
        buffer_V_q0;
    p_Val2_28_fu_1272_p3 <= 
        p_Val2_25_reg_630 when (tmp_7_reg_2777(0) = '1') else 
        buffer_V_q0;
    p_Val2_29_fu_1247_p3 <= 
        p_Val2_26_reg_619 when (tmp_7_reg_2777(0) = '1') else 
        buffer_V_q0;
    p_Val2_31_fu_1262_p2 <= std_logic_vector(signed(tmp_45_fu_1254_p1) - signed(tmp_46_fu_1258_p1));
        p_Val2_34_cast_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_34_reg_2987),64));

    p_Val2_34_fu_1374_p0 <= p_Val2_31_reg_2923;
    p_Val2_34_fu_1374_p1 <= reg_660;
    p_Val2_34_fu_1374_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_34_fu_1374_p0) * signed(p_Val2_34_fu_1374_p1))), 49));
    p_Val2_35_fu_1387_p0 <= tmp_52_reg_2950;
    p_Val2_35_fu_1387_p1 <= reg_664;
    p_Val2_35_fu_1387_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_35_fu_1387_p0) * signed(p_Val2_35_fu_1387_p1))), 64));
    p_Val2_36_fu_1461_p2 <= std_logic_vector(unsigned(tmp_54_fu_1454_p1) + unsigned(tmp_55_fu_1458_p1));
        p_Val2_37_cast_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_37_reg_3012),64));

    p_Val2_37_fu_1474_p0 <= tmp_53_reg_2982;
    p_Val2_37_fu_1474_p1 <= reg_668;
    p_Val2_37_fu_1474_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_37_fu_1474_p0) * signed(p_Val2_37_fu_1474_p1))), 50));
    p_Val2_38_fu_1545_p2 <= std_logic_vector(unsigned(tmp_57_fu_1541_p1) + unsigned(tmp_56_fu_1538_p1));
    p_Val2_40_fu_1340_p2 <= std_logic_vector(signed(tmp_64_fu_1332_p1) - signed(tmp_65_fu_1336_p1));
        p_Val2_43_cast_fu_1609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_43_reg_3022),64));

    p_Val2_43_fu_1504_p0 <= p_Val2_40_reg_2960;
    p_Val2_43_fu_1504_p1 <= reg_660;
    p_Val2_43_fu_1504_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_43_fu_1504_p0) * signed(p_Val2_43_fu_1504_p1))), 49));
    p_Val2_44_fu_1517_p0 <= tmp_71_reg_2997;
    p_Val2_44_fu_1517_p1 <= reg_664;
    p_Val2_44_fu_1517_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_44_fu_1517_p0) * signed(p_Val2_44_fu_1517_p1))), 64));
    p_Val2_45_fu_1619_p2 <= std_logic_vector(unsigned(tmp_73_fu_1612_p1) + unsigned(tmp_74_fu_1616_p1));
        p_Val2_46_cast_fu_1668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_46_reg_3047),64));

    p_Val2_46_fu_1632_p0 <= tmp_72_reg_3017;
    p_Val2_46_fu_1632_p1 <= reg_668;
    p_Val2_46_fu_1632_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_46_fu_1632_p0) * signed(p_Val2_46_fu_1632_p1))), 50));
    p_Val2_47_fu_1678_p2 <= std_logic_vector(unsigned(tmp_76_fu_1674_p1) + unsigned(tmp_75_fu_1671_p1));
    p_Val2_49_fu_1749_p0 <= r_V_1_reg_3052;
    p_Val2_49_fu_1749_p1 <= reg_660;
    p_Val2_49_fu_1749_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_49_fu_1749_p0) * signed(p_Val2_49_fu_1749_p1))), 49));
    p_Val2_4_fu_782_p2 <= std_logic_vector(signed(tmp_8_fu_774_p1) - signed(tmp_9_fu_778_p1));
        p_Val2_51_cast_fu_1799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_51_fu_1792_p3),33));

    p_Val2_51_fu_1792_p3 <= (tmp_87_reg_3067 & ap_const_lv13_0);
    p_Val2_52_fu_1824_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(p_shl_cast_fu_1820_p1));
        p_Val2_53_cast_fu_2010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_53_reg_3112),50));

    p_Val2_53_fu_1909_p1 <= r_V_2_reg_3072;
    p_Val2_53_fu_1909_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_53_fu_1909_p1))), 49));
    p_Val2_54_fu_2041_p2 <= std_logic_vector(unsigned(tmp_91_cast1_fu_2033_p1) + unsigned(tmp_94_cast_cast_fu_2029_p1));
    p_Val2_55_cast_fu_2047_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_89_reg_3117));
    p_Val2_55_fu_2112_p3 <= 
        sel_tmp5_cast_fu_2098_p3 when (tmp_94_fu_2106_p2(0) = '1') else 
        phitmp4_fu_2076_p4;
    p_Val2_7_fu_882_p0 <= tmp_4_reg_2795;
    p_Val2_7_fu_882_p1 <= reg_664;
    p_Val2_7_fu_882_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_7_fu_882_p0) * signed(p_Val2_7_fu_882_p1))), 64));
        p_Val2_81_1_cast_fu_2120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_81_1_reg_3122),51));

    p_Val2_81_1_fu_1922_p1 <= r_V_2_1_reg_3077;
    p_Val2_81_1_fu_1922_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_1_fu_1922_p1))), 49));
    p_Val2_81_2_fu_1935_p1 <= addconv2_reg_3082;
    p_Val2_81_2_fu_1935_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_2_fu_1935_p1))), 49));
        p_Val2_81_3_cast_fu_2288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_81_3_reg_3142),50));

    p_Val2_81_3_fu_1948_p1 <= r_V_2_3_reg_3087;
    p_Val2_81_3_fu_1948_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_3_fu_1948_p1))), 49));
    p_Val2_81_4_fu_1961_p1 <= r_V_2_4_reg_3092;
    p_Val2_81_4_fu_1961_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_4_fu_1961_p1))), 49));
        p_Val2_81_5_cast_fu_2456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_81_5_reg_3162),51));

    p_Val2_81_5_fu_1974_p1 <= r_V_2_5_reg_3097;
    p_Val2_81_5_fu_1974_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_5_fu_1974_p1))), 49));
    p_Val2_81_6_fu_1987_p1 <= addconv4_reg_3102;
    p_Val2_81_6_fu_1987_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_6_fu_1987_p1))), 49));
    p_Val2_81_7_fu_2000_p1 <= r_V_2_7_reg_3107;
    p_Val2_81_7_fu_2000_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv49_2A3D) * signed(p_Val2_81_7_fu_2000_p1))), 49));
    p_Val2_82_1_cast_fu_2133_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_96_reg_3127));
    p_Val2_82_1_fu_2127_p2 <= std_logic_vector(unsigned(tmp_10646_1_cast_fu_2123_p1) + unsigned(tmp_94_cast_cast2_fu_2025_p1));
    p_Val2_82_2_cast_fu_2215_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_99_reg_3137));
    p_Val2_82_2_fu_2209_p2 <= std_logic_vector(unsigned(tmp_10646_2_cast_fu_2206_p1) + unsigned(tmp_94_cast_cast1_fu_2021_p1));
    p_Val2_82_3_cast_fu_2301_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_102_reg_3147));
    p_Val2_82_3_fu_2295_p2 <= std_logic_vector(unsigned(tmp_10646_3_cast_fu_2291_p1) + unsigned(tmp_94_cast_cast_fu_2029_p1));
    p_Val2_82_4_cast_fu_2383_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_105_reg_3157));
    p_Val2_82_4_fu_2377_p2 <= std_logic_vector(unsigned(tmp_10646_4_cast_fu_2374_p1) + unsigned(tmp_94_cast_cast1_fu_2021_p1));
    p_Val2_82_5_cast_fu_2469_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_109_reg_3167));
    p_Val2_82_5_fu_2463_p2 <= std_logic_vector(unsigned(tmp_10646_5_cast_fu_2459_p1) + unsigned(tmp_94_cast_cast2_fu_2025_p1));
    p_Val2_82_6_cast_fu_2551_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_113_reg_3177));
    p_Val2_82_6_fu_2545_p2 <= std_logic_vector(unsigned(tmp_10646_6_cast_fu_2542_p1) + unsigned(tmp_94_cast_cast1_fu_2021_p1));
    p_Val2_82_7_cast_fu_2633_p2 <= std_logic_vector(signed(tmp_90_fu_2037_p1) + signed(tmp_115_reg_3187));
    p_Val2_82_7_fu_2627_p2 <= std_logic_vector(unsigned(tmp_10646_7_cast_fu_2624_p1) + unsigned(tmp_94_cast_cast1_fu_2021_p1));
    p_Val2_83_1_fu_2198_p3 <= 
        sel_tmp9_cast_fu_2184_p3 when (tmp_98_fu_2192_p2(0) = '1') else 
        phitmp49_1_fu_2162_p4;
    p_Val2_83_2_fu_2280_p3 <= 
        sel_tmp12_cast_fu_2266_p3 when (tmp_101_fu_2274_p2(0) = '1') else 
        phitmp49_2_fu_2244_p4;
    p_Val2_83_3_fu_2366_p3 <= 
        sel_tmp15_cast_fu_2352_p3 when (tmp_104_fu_2360_p2(0) = '1') else 
        phitmp49_3_fu_2330_p4;
    p_Val2_83_4_fu_2448_p3 <= 
        sel_tmp18_cast_fu_2434_p3 when (tmp_106_fu_2442_p2(0) = '1') else 
        phitmp49_4_fu_2412_p4;
    p_Val2_83_5_fu_2534_p3 <= 
        sel_tmp21_cast_fu_2520_p3 when (tmp_108_fu_2528_p2(0) = '1') else 
        phitmp49_5_fu_2498_p4;
    p_Val2_83_6_fu_2616_p3 <= 
        sel_tmp24_cast_fu_2602_p3 when (tmp_110_fu_2610_p2(0) = '1') else 
        phitmp49_6_fu_2580_p4;
    p_Val2_83_7_fu_2698_p3 <= 
        sel_tmp27_cast_fu_2684_p3 when (tmp_112_fu_2692_p2(0) = '1') else 
        phitmp49_7_fu_2662_p4;
        p_Val2_8_cast_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_reg_2821),64));

    p_Val2_8_fu_869_p0 <= p_Val2_4_reg_2789;
    p_Val2_8_fu_869_p1 <= reg_660;
    p_Val2_8_fu_869_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_8_fu_869_p0) * signed(p_Val2_8_fu_869_p1))), 49));
        p_Val2_9_cast_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_reg_2858),64));

    p_Val2_9_fu_982_p0 <= tmp_11_reg_2816;
    p_Val2_9_fu_982_p1 <= reg_668;
    p_Val2_9_fu_982_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_9_fu_982_p0) * signed(p_Val2_9_fu_982_p1))), 50));
    p_s_fu_728_p3 <= 
        ret_V_fu_694_p4 when (tmp_5_fu_716_p2(0) = '1') else 
        ret_V_1_fu_722_p2;
        p_shl1_cast_fu_1788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_1781_p3),33));

    p_shl1_fu_1781_p3 <= (tmp_86_reg_3057 & ap_const_lv13_0);
        p_shl_cast1_fu_1816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_1809_p3),34));

        p_shl_cast_fu_1820_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_1809_p3),33));

    p_shl_fu_1809_p3 <= (tmp_85_reg_3062 & ap_const_lv15_0);
    p_tmp_1_cast_fu_933_p3 <= 
        ap_const_lv32_FFF38000 when (tmp_24_fu_921_p2(0) = '1') else 
        ap_const_lv32_C8000;
    p_tmp_3_cast_fu_1304_p3 <= 
        ap_const_lv32_FFF38000 when (tmp_49_fu_1292_p2(0) = '1') else 
        ap_const_lv32_C8000;
    p_tmp_4_cast_fu_1423_p3 <= 
        ap_const_lv32_FFF38000 when (tmp_68_fu_1411_p2(0) = '1') else 
        ap_const_lv32_C8000;
    p_tmp_6_cast_fu_814_p3 <= 
        ap_const_lv32_FFF38000 when (tmp_s_fu_802_p2(0) = '1') else 
        ap_const_lv32_C8000;
    phitmp1_fu_1583_p3 <= (tmp_61_fu_1573_p4 & ap_const_lv2_0);
    phitmp2_fu_1716_p3 <= (tmp_80_fu_1706_p4 & ap_const_lv2_0);
    phitmp49_1_fu_2162_p4 <= p_Val2_82_1_fu_2127_p2(45 downto 30);
    phitmp49_2_fu_2244_p4 <= p_Val2_82_2_fu_2209_p2(45 downto 30);
    phitmp49_3_fu_2330_p4 <= p_Val2_82_3_fu_2295_p2(45 downto 30);
    phitmp49_4_fu_2412_p4 <= p_Val2_82_4_fu_2377_p2(45 downto 30);
    phitmp49_5_fu_2498_p4 <= p_Val2_82_5_fu_2463_p2(45 downto 30);
    phitmp49_6_fu_2580_p4 <= p_Val2_82_6_fu_2545_p2(45 downto 30);
    phitmp49_7_fu_2662_p4 <= p_Val2_82_7_fu_2627_p2(45 downto 30);
    phitmp4_fu_2076_p4 <= p_Val2_54_fu_2041_p2(45 downto 30);
    phitmp5_fu_1146_p3 <= 
        tmp_40_cast_fu_1132_p3 when (tmp_41_fu_1140_p2(0) = '1') else 
        tmp_39_fu_1122_p4;
    phitmp6_fu_1239_p3 <= 
        tmp_43_cast_fu_1225_p3 when (tmp_44_fu_1233_p2(0) = '1') else 
        tmp_42_fu_1215_p4;
    r_V_1_fu_1646_p2 <= std_logic_vector(signed(tmp_83_fu_1638_p1) - signed(tmp_84_fu_1642_p1));
    r_V_2_1_fu_1854_p2 <= std_logic_vector(signed(p_shl_cast1_fu_1816_p1) - signed(sum_cast_fu_1850_p1));
    r_V_2_3_fu_1876_p2 <= std_logic_vector(signed(tmp_102_3_cast_fu_1872_p1) - signed(p_shl_cast1_fu_1816_p1));
    r_V_2_4_fu_1882_p2 <= std_logic_vector(signed(p_shl_cast1_fu_1816_p1) + signed(tmp_91_cast_fu_1830_p1));
    r_V_2_5_fu_1888_p2 <= std_logic_vector(signed(tmp_92_cast_fu_1834_p1) - signed(sum_cast_fu_1850_p1));
    r_V_2_7_fu_1900_p2 <= std_logic_vector(signed(p_shl_cast1_fu_1816_p1) + signed(tmp_102_3_cast_fu_1872_p1));
    r_V_2_fu_1838_p2 <= std_logic_vector(signed(tmp_91_cast_fu_1830_p1) - signed(p_shl_cast1_fu_1816_p1));
    r_V_fu_1116_p2 <= std_logic_vector(signed(tmp_37_fu_1108_p1) - signed(tmp_38_fu_1112_p1));
    ret_V_1_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ret_V_fu_694_p4));
    ret_V_fu_694_p4 <= buffer_V_q0(15 downto 13);
    sel_tmp10_fu_2340_p2 <= (tmp_103_fu_2316_p3 xor ap_const_lv1_1);
    sel_tmp11_fu_2346_p2 <= (tmp_110_3_fu_2324_p2 and sel_tmp10_fu_2340_p2);
    sel_tmp12_cast_fu_2266_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp9_fu_2260_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp12_fu_2422_p2 <= (tmp_107_fu_2398_p3 xor ap_const_lv1_1);
    sel_tmp13_fu_2428_p2 <= (tmp_110_4_fu_2406_p2 and sel_tmp12_fu_2422_p2);
    sel_tmp14_fu_2508_p2 <= (tmp_111_fu_2484_p3 xor ap_const_lv1_1);
    sel_tmp15_cast_fu_2352_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp11_fu_2346_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp15_fu_2514_p2 <= (tmp_110_5_fu_2492_p2 and sel_tmp14_fu_2508_p2);
    sel_tmp16_fu_2590_p2 <= (tmp_114_fu_2566_p3 xor ap_const_lv1_1);
    sel_tmp17_fu_2596_p2 <= (tmp_110_6_fu_2574_p2 and sel_tmp16_fu_2590_p2);
    sel_tmp18_cast_fu_2434_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp13_fu_2428_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp18_fu_2672_p2 <= (tmp_116_fu_2648_p3 xor ap_const_lv1_1);
    sel_tmp19_fu_2678_p2 <= (tmp_110_7_fu_2656_p2 and sel_tmp18_fu_2672_p2);
    sel_tmp1_fu_2086_p2 <= (tmp_92_fu_2062_p3 xor ap_const_lv1_1);
    sel_tmp21_cast_fu_2520_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp15_fu_2514_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp24_cast_fu_2602_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp17_fu_2596_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp27_cast_fu_2684_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp19_fu_2678_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp2_fu_2092_p2 <= (tmp_93_fu_2070_p2 and sel_tmp1_fu_2086_p2);
    sel_tmp3_fu_1597_p2 <= (tmp_60_fu_1567_p2 and sel_tmp_fu_1591_p2);
    sel_tmp4_fu_2178_p2 <= (tmp_110_1_fu_2156_p2 and sel_tmp6_fu_2172_p2);
    sel_tmp5_cast_fu_2098_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp2_fu_2092_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp5_fu_2254_p2 <= (tmp_100_fu_2230_p3 xor ap_const_lv1_1);
    sel_tmp6_fu_2172_p2 <= (tmp_97_fu_2148_p3 xor ap_const_lv1_1);
    sel_tmp7_fu_1724_p2 <= (tmp_78_fu_1694_p2 xor ap_const_lv1_1);
    sel_tmp8_fu_1730_p2 <= (tmp_79_fu_1700_p2 and sel_tmp7_fu_1724_p2);
    sel_tmp9_cast_fu_2184_p3 <= 
        ap_const_lv16_1FF7 when (sel_tmp4_fu_2178_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp9_fu_2260_p2 <= (tmp_110_2_fu_2238_p2 and sel_tmp5_fu_2254_p2);
    sel_tmp_fu_1591_p2 <= (tmp_59_fu_1561_p2 xor ap_const_lv1_1);
        sum_cast_fu_1850_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_1844_p2),34));

    sum_fu_1844_p2 <= std_logic_vector(signed(p_shl1_cast_fu_1788_p1) + signed(p_Val2_51_cast_fu_1799_p1));

    test_V_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, tmp_2_reg_2766, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            test_V_address0 <= ap_const_lv64_D(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            test_V_address0 <= ap_const_lv64_C(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            test_V_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            test_V_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            test_V_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            test_V_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            test_V_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            test_V_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_V_address0 <= tmp_2_reg_2766(12 - 1 downto 0);
        else 
            test_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    test_V_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_sig_ioackin_OUT_r_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            test_V_ce0 <= ap_const_logic_1;
        else 
            test_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_V_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state3, tmp_3_fu_689_p1, tmp_95_fu_2706_p1, tmp_114_1_fu_2710_p1, tmp_114_2_fu_2714_p1, tmp_114_3_fu_2718_p1, tmp_114_4_fu_2722_p1, tmp_114_5_fu_2726_p1, tmp_114_6_fu_2730_p1, tmp_114_7_fu_2734_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            test_V_d0 <= tmp_114_7_fu_2734_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            test_V_d0 <= tmp_114_6_fu_2730_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            test_V_d0 <= tmp_114_5_fu_2726_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            test_V_d0 <= tmp_114_4_fu_2722_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            test_V_d0 <= tmp_114_3_fu_2718_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            test_V_d0 <= tmp_114_2_fu_2714_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            test_V_d0 <= tmp_114_1_fu_2710_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            test_V_d0 <= tmp_95_fu_2706_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_V_d0 <= tmp_3_fu_689_p1;
        else 
            test_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_V_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state3, ap_sig_ioackin_OUT_r_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            test_V_we0 <= ap_const_logic_1;
        else 
            test_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_2230_p3 <= p_Val2_82_2_cast_fu_2215_p2(46 downto 46);
    tmp_101_fu_2274_p2 <= (tmp_100_fu_2230_p3 or sel_tmp9_fu_2260_p2);
        tmp_102_3_cast_fu_1872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addconv3_fu_1866_p2),34));

    tmp_102_fu_1954_p1 <= p_Val2_81_3_fu_1948_p2(47 - 1 downto 0);
    tmp_103_fu_2316_p3 <= p_Val2_82_3_cast_fu_2301_p2(46 downto 46);
    tmp_104_fu_2360_p2 <= (tmp_103_fu_2316_p3 or sel_tmp11_fu_2346_p2);
    tmp_105_fu_1967_p1 <= p_Val2_81_4_fu_1961_p2(47 - 1 downto 0);
    tmp_10646_1_cast_fu_2123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_1_cast_fu_2120_p1),53));
    tmp_10646_2_cast_fu_2206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_2_reg_3132),51));
    tmp_10646_3_cast_fu_2291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_3_cast_fu_2288_p1),52));
    tmp_10646_4_cast_fu_2374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_4_reg_3152),51));
    tmp_10646_5_cast_fu_2459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_5_cast_fu_2456_p1),53));
    tmp_10646_6_cast_fu_2542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_6_reg_3172),51));
    tmp_10646_7_cast_fu_2624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_81_7_reg_3182),51));
    tmp_106_fu_2442_p2 <= (tmp_107_fu_2398_p3 or sel_tmp13_fu_2428_p2);
    tmp_107_fu_2398_p3 <= p_Val2_82_4_cast_fu_2383_p2(46 downto 46);
    tmp_108_1_fu_2138_p4 <= p_Val2_82_1_cast_fu_2133_p2(46 downto 28);
    tmp_108_2_fu_2220_p4 <= p_Val2_82_2_cast_fu_2215_p2(46 downto 28);
    tmp_108_3_fu_2306_p4 <= p_Val2_82_3_cast_fu_2301_p2(46 downto 28);
    tmp_108_4_fu_2388_p4 <= p_Val2_82_4_cast_fu_2383_p2(46 downto 28);
    tmp_108_5_fu_2474_p4 <= p_Val2_82_5_cast_fu_2469_p2(46 downto 28);
    tmp_108_6_fu_2556_p4 <= p_Val2_82_6_cast_fu_2551_p2(46 downto 28);
    tmp_108_7_fu_2638_p4 <= p_Val2_82_7_cast_fu_2633_p2(46 downto 28);
    tmp_108_fu_2528_p2 <= (tmp_111_fu_2484_p3 or sel_tmp15_fu_2514_p2);
    tmp_109_fu_1980_p1 <= p_Val2_81_5_fu_1974_p2(47 - 1 downto 0);
    tmp_10_cast_fu_852_p0 <= last_error_pos_V_0;
        tmp_10_cast_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_cast_fu_852_p0),18));

    tmp_10_fu_822_p2 <= (tmp_s_fu_802_p2 or tmp_1_fu_808_p2);
    tmp_110_1_fu_2156_p2 <= "1" when (signed(tmp_108_1_fu_2138_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_2_fu_2238_p2 <= "1" when (signed(tmp_108_2_fu_2220_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_3_fu_2324_p2 <= "1" when (signed(tmp_108_3_fu_2306_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_4_fu_2406_p2 <= "1" when (signed(tmp_108_4_fu_2388_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_5_fu_2492_p2 <= "1" when (signed(tmp_108_5_fu_2474_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_6_fu_2574_p2 <= "1" when (signed(tmp_108_6_fu_2556_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_7_fu_2656_p2 <= "1" when (signed(tmp_108_7_fu_2638_p4) > signed(ap_const_lv19_7FDF)) else "0";
    tmp_110_fu_2610_p2 <= (tmp_114_fu_2566_p3 or sel_tmp17_fu_2596_p2);
    tmp_111_fu_2484_p3 <= p_Val2_82_5_cast_fu_2469_p2(46 downto 46);
    tmp_112_fu_2692_p2 <= (tmp_116_fu_2648_p3 or sel_tmp19_fu_2678_p2);
    tmp_113_fu_1993_p1 <= p_Val2_81_6_fu_1987_p2(47 - 1 downto 0);
        tmp_114_1_fu_2710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_1_reg_3198),32));

        tmp_114_2_fu_2714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_2_reg_3204),32));

        tmp_114_3_fu_2718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_3_reg_3210),32));

        tmp_114_4_fu_2722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_4_reg_3216),32));

        tmp_114_5_fu_2726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_5_reg_3222),32));

        tmp_114_6_fu_2730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_6_reg_3228),32));

        tmp_114_7_fu_2734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_83_7_reg_3234),32));

    tmp_114_fu_2566_p3 <= p_Val2_82_6_cast_fu_2551_p2(46 downto 46);
    tmp_115_fu_2006_p1 <= p_Val2_81_7_fu_2000_p2(47 - 1 downto 0);
    tmp_116_fu_2648_p3 <= p_Val2_82_7_cast_fu_2633_p2(46 downto 46);
    tmp_11_fu_856_p2 <= std_logic_vector(signed(tmp_cast_fu_840_p1) - signed(tmp_10_cast_fu_852_p1));
    tmp_12_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_cast_fu_959_p1),65));
    tmp_13_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_reg_2826),65));
    tmp_14_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_10_reg_2853),66));
    tmp_15_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_9_cast_fu_1041_p1),66));
    tmp_16_fu_1057_p4 <= p_Val2_11_fu_1051_p2(44 downto 13);
    tmp_17_fu_1067_p2 <= "1" when (signed(tmp_16_fu_1057_p4) < signed(ap_const_lv32_FFFFE000)) else "0";
    tmp_18_fu_1073_p2 <= "1" when (signed(tmp_16_fu_1057_p4) > signed(ap_const_lv32_1FF7)) else "0";
    tmp_19_fu_704_p3 <= buffer_V_q0(15 downto 15);
    tmp_1_fu_808_p2 <= "1" when (signed(tmp_6_fu_796_p2) > signed(ap_const_lv32_C8000)) else "0";
        tmp_20_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_652),17));

        tmp_21_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_656),17));

        tmp_22_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_fu_901_p2),32));

    tmp_23_fu_915_p2 <= std_logic_vector(signed(tmp_22_fu_911_p1) + signed(integral_pos_V_1));
        tmp_24_cast_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_reg_2831),18));

    tmp_24_fu_921_p2 <= "1" when (signed(tmp_23_fu_915_p2) < signed(ap_const_lv32_FFF38000)) else "0";
    tmp_25_fu_927_p2 <= "1" when (signed(tmp_23_fu_915_p2) > signed(ap_const_lv32_C8000)) else "0";
    tmp_26_fu_941_p2 <= (tmp_25_fu_927_p2 or tmp_24_fu_921_p2);
    tmp_27_fu_947_p3 <= 
        p_tmp_1_cast_fu_933_p3 when (tmp_26_fu_941_p2(0) = '1') else 
        tmp_23_fu_915_p2;
    tmp_28_fu_1004_p2 <= std_logic_vector(signed(tmp_24_cast_fu_988_p1) - signed(tmp_29_cast_fu_1000_p1));
    tmp_29_cast_fu_1000_p0 <= last_error_pos_V_1;
        tmp_29_cast_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_cast_fu_1000_p0),18));

    tmp_29_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_18_cast_fu_1079_p1),65));
    tmp_2_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_608),64));
    tmp_30_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_17_reg_2873),65));
    tmp_31_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_20_reg_2888),66));
    tmp_32_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_19_cast_fu_1154_p1),66));
    tmp_33_fu_1170_p4 <= p_Val2_21_fu_1164_p2(44 downto 13);
    tmp_34_fu_1180_p2 <= "1" when (signed(tmp_33_fu_1170_p4) < signed(ap_const_lv32_FFFFE000)) else "0";
    tmp_35_fu_1186_p2 <= "1" when (signed(tmp_33_fu_1170_p4) > signed(ap_const_lv32_1FF7)) else "0";
    tmp_36_fu_712_p1 <= buffer_V_q0(13 - 1 downto 0);
        tmp_37_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(buffer_V_q0),17));

        tmp_38_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(measured_V_q0),17));

    tmp_39_fu_1122_p4 <= p_Val2_11_fu_1051_p2(28 downto 13);
    tmp_3_fu_689_p0 <= cmdIn_V_q0;
        tmp_3_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_689_p0),32));

    tmp_40_cast_fu_1132_p3 <= 
        ap_const_lv16_E000 when (tmp_17_fu_1067_p2(0) = '1') else 
        ap_const_lv16_1FF7;
    tmp_40_fu_836_p1 <= p_Val2_4_fu_782_p2(16 - 1 downto 0);
    tmp_41_fu_1140_p2 <= (tmp_18_fu_1073_p2 or tmp_17_fu_1067_p2);
    tmp_42_fu_1215_p4 <= p_Val2_21_fu_1164_p2(28 downto 13);
    tmp_43_cast_fu_1225_p3 <= 
        ap_const_lv16_E000 when (tmp_34_fu_1180_p2(0) = '1') else 
        ap_const_lv16_1FF7;
    tmp_43_fu_955_p1 <= p_Val2_14_fu_901_p2(16 - 1 downto 0);
    tmp_44_fu_1233_p2 <= (tmp_35_fu_1186_p2 or tmp_34_fu_1180_p2);
        tmp_45_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_29_fu_1247_p3),17));

        tmp_46_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(measured_V_q0),17));

        tmp_47_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_31_reg_2923),32));

        tmp_48_cast_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_31_reg_2923),18));

    tmp_48_fu_1286_p2 <= std_logic_vector(signed(tmp_47_fu_1283_p1) + signed(integral_rate_V_0));
    tmp_49_fu_1292_p2 <= "1" when (signed(tmp_48_fu_1286_p2) < signed(ap_const_lv32_FFF38000)) else "0";
    tmp_4_fu_828_p3 <= 
        p_tmp_6_cast_fu_814_p3 when (tmp_10_fu_822_p2(0) = '1') else 
        tmp_6_fu_796_p2;
    tmp_50_fu_1298_p2 <= "1" when (signed(tmp_48_fu_1286_p2) > signed(ap_const_lv32_C8000)) else "0";
    tmp_51_fu_1312_p2 <= (tmp_50_fu_1298_p2 or tmp_49_fu_1292_p2);
    tmp_52_fu_1318_p3 <= 
        p_tmp_3_cast_fu_1304_p3 when (tmp_51_fu_1312_p2(0) = '1') else 
        tmp_48_fu_1286_p2;
    tmp_53_cast_fu_1357_p0 <= last_error_rate_V_0;
        tmp_53_cast_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_53_cast_fu_1357_p0),18));

    tmp_53_fu_1361_p2 <= std_logic_vector(signed(tmp_48_cast_fu_1350_p1) - signed(tmp_53_cast_fu_1357_p1));
    tmp_54_fu_1454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_34_cast_fu_1451_p1),65));
    tmp_55_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_35_reg_2992),65));
    tmp_56_fu_1538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_36_reg_3007),66));
    tmp_57_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_37_cast_fu_1535_p1),66));
    tmp_58_fu_1551_p4 <= p_Val2_38_fu_1545_p2(44 downto 13);
    tmp_59_fu_1561_p2 <= "1" when (signed(tmp_58_fu_1551_p4) < signed(ap_const_lv32_FFFFE000)) else "0";
    tmp_5_fu_716_p2 <= "1" when (tmp_36_fu_712_p1 = ap_const_lv13_0) else "0";
    tmp_60_fu_1567_p2 <= "1" when (signed(tmp_58_fu_1551_p4) > signed(ap_const_lv32_1FF7)) else "0";
    tmp_61_fu_1573_p4 <= p_Val2_38_fu_1545_p2(29 downto 13);
    tmp_62_fu_1603_p2 <= (tmp_59_fu_1561_p2 or sel_tmp3_fu_1597_p2);
    tmp_63_fu_1268_p1 <= p_Val2_31_fu_1262_p2(16 - 1 downto 0);
        tmp_64_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_28_fu_1272_p3),17));

        tmp_65_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(measured_V_q0),17));

        tmp_66_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_40_reg_2960),32));

    tmp_67_fu_1405_p2 <= std_logic_vector(signed(tmp_66_fu_1402_p1) + signed(integral_rate_V_1));
        tmp_68_cast_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_40_reg_2960),18));

    tmp_68_fu_1411_p2 <= "1" when (signed(tmp_67_fu_1405_p2) < signed(ap_const_lv32_FFF38000)) else "0";
    tmp_69_fu_1417_p2 <= "1" when (signed(tmp_67_fu_1405_p2) > signed(ap_const_lv32_C8000)) else "0";
    tmp_6_fu_796_p2 <= std_logic_vector(signed(tmp_fu_792_p1) + signed(integral_pos_V_0));
    tmp_70_fu_1431_p2 <= (tmp_69_fu_1417_p2 or tmp_68_fu_1411_p2);
    tmp_71_fu_1437_p3 <= 
        p_tmp_4_cast_fu_1423_p3 when (tmp_70_fu_1431_p2(0) = '1') else 
        tmp_67_fu_1405_p2;
    tmp_72_fu_1491_p2 <= std_logic_vector(signed(tmp_68_cast_fu_1480_p1) - signed(tmp_73_cast_fu_1487_p1));
    tmp_73_cast_fu_1487_p0 <= last_error_rate_V_1;
        tmp_73_cast_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_73_cast_fu_1487_p0),18));

    tmp_73_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_43_cast_fu_1609_p1),65));
    tmp_74_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_44_reg_3027),65));
    tmp_75_fu_1671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_45_reg_3042),66));
    tmp_76_fu_1674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_46_cast_fu_1668_p1),66));
    tmp_77_fu_1684_p4 <= p_Val2_47_fu_1678_p2(44 downto 13);
    tmp_78_fu_1694_p2 <= "1" when (signed(tmp_77_fu_1684_p4) < signed(ap_const_lv32_FFFFE000)) else "0";
    tmp_79_fu_1700_p2 <= "1" when (signed(tmp_77_fu_1684_p4) > signed(ap_const_lv32_1FF7)) else "0";
    tmp_7_fu_744_p2 <= "0" when (p_1_fu_736_p3 = ap_const_lv3_0) else "1";
    tmp_80_fu_1706_p4 <= p_Val2_47_fu_1678_p2(29 downto 13);
    tmp_81_fu_1736_p2 <= (tmp_78_fu_1694_p2 or sel_tmp8_fu_1730_p2);
    tmp_82_fu_1346_p1 <= p_Val2_40_fu_1340_p2(16 - 1 downto 0);
        tmp_83_fu_1638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_27_fu_1528_p3),17));

        tmp_84_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(measured_V_q0),17));

    tmp_86_cast_fu_1652_p3 <= 
        ap_const_lv19_78000 when (tmp_59_fu_1561_p2(0) = '1') else 
        ap_const_lv19_7FDC;
    tmp_86_fu_1660_p3 <= 
        tmp_86_cast_fu_1652_p3 when (tmp_62_fu_1603_p2(0) = '1') else 
        phitmp1_fu_1583_p3;
    tmp_87_fu_1773_p3 <= 
        tmp_88_cast_fu_1765_p3 when (tmp_81_fu_1736_p2(0) = '1') else 
        phitmp2_fu_1716_p3;
    tmp_88_cast_fu_1765_p3 <= 
        ap_const_lv19_78000 when (tmp_78_fu_1694_p2(0) = '1') else 
        ap_const_lv19_7FDC;
    tmp_88_fu_2013_p3 <= (reg_652 & ap_const_lv30_0);
    tmp_89_fu_1915_p1 <= p_Val2_53_fu_1909_p2(47 - 1 downto 0);
        tmp_8_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_652),17));

        tmp_90_fu_2037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_2013_p3),47));

    tmp_91_cast1_fu_2033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_53_cast_fu_2010_p1),52));
        tmp_91_cast_fu_1830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(addconv_fu_1803_p2),34));

    tmp_91_fu_2052_p4 <= p_Val2_55_cast_fu_2047_p2(46 downto 28);
        tmp_92_cast_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_52_fu_1824_p2),34));

    tmp_92_fu_2062_p3 <= p_Val2_55_cast_fu_2047_p2(46 downto 46);
    tmp_93_fu_2070_p2 <= "1" when (signed(tmp_91_fu_2052_p4) > signed(ap_const_lv19_7FDF)) else "0";
        tmp_94_cast_cast1_fu_2021_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_2013_p3),51));

        tmp_94_cast_cast2_fu_2025_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_2013_p3),53));

        tmp_94_cast_cast_fu_2029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_2013_p3),52));

    tmp_94_fu_2106_p2 <= (tmp_92_fu_2062_p3 or sel_tmp2_fu_2092_p2);
        tmp_95_fu_2706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_55_reg_3192),32));

    tmp_96_fu_1928_p1 <= p_Val2_81_1_fu_1922_p2(47 - 1 downto 0);
    tmp_97_fu_2148_p3 <= p_Val2_82_1_cast_fu_2133_p2(46 downto 46);
    tmp_98_fu_2192_p2 <= (tmp_97_fu_2148_p3 or sel_tmp4_fu_2178_p2);
    tmp_99_fu_1941_p1 <= p_Val2_81_2_fu_1935_p2(47 - 1 downto 0);
        tmp_9_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_656),17));

        tmp_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_2789),18));

        tmp_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_fu_782_p2),32));

    tmp_s_fu_802_p2 <= "1" when (signed(tmp_6_fu_796_p2) < signed(ap_const_lv32_FFF38000)) else "0";
end behav;
