-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rcReceiver is
generic (
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_AWVALID : IN STD_LOGIC;
    s_axi_TEST_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_WVALID : IN STD_LOGIC;
    s_axi_TEST_WREADY : OUT STD_LOGIC;
    s_axi_TEST_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_ARVALID : IN STD_LOGIC;
    s_axi_TEST_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_RVALID : OUT STD_LOGIC;
    s_axi_TEST_RREADY : IN STD_LOGIC;
    s_axi_TEST_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_BVALID : OUT STD_LOGIC;
    s_axi_TEST_BREADY : IN STD_LOGIC;
    s_axi_TEST_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of rcReceiver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rcReceiver,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=28,HLS_SYN_TPT=23,HLS_SYN_MEM=12,HLS_SYN_DSP=51,HLS_SYN_FF=2525,HLS_SYN_LUT=3374,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_iter0_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_iter0_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_iter0_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_iter0_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_iter0_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_iter0_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_iter0_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_iter0_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_iter0_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_iter0_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_iter0_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_iter0_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_iter0_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_iter0_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_iter0_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_iter0_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_iter0_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_iter0_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_iter0_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_iter0_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_iter0_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_iter0_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_ST_iter1_fsm_state24 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_iter1_fsm_state25 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_iter1_fsm_state26 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_iter1_fsm_state27 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_iter1_fsm_state28 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_iter1_fsm_state29 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_C8 : STD_LOGIC_VECTOR (10 downto 0) := "00011001000";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv25_1E70000 : STD_LOGIC_VECTOR (24 downto 0) := "1111001110000000000000000";
    constant ap_const_lv45_1FF7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001111111110111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv45_3FF7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000011111111110111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv79_A3D70A3D71 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000001010001111010111000010100011110101110001";
    constant ap_const_lv77_51EB851EB9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000101000111101011100001010001111010111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv77_0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv79_0 : STD_LOGIC_VECTOR (78 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_E000 : STD_LOGIC_VECTOR (15 downto 0) := "1110000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv15_1800 : STD_LOGIC_VECTOR (14 downto 0) := "001100000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_iter0_fsm_state23 : STD_LOGIC;
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state24_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_OUT_r_WREADY : STD_LOGIC;
    signal ap_CS_iter1_fsm_state24 : STD_LOGIC;
    signal ap_block_state25_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state26_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state28_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state29_pp0_stage5_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state29 : STD_LOGIC;
    signal SBUS_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal SBUS_data_ce0 : STD_LOGIC;
    signal SBUS_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal test_V_ce0 : STD_LOGIC;
    signal test_V_we0 : STD_LOGIC;
    signal test_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channels_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal lost : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal errors : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_iter0_fsm_state17 : STD_LOGIC;
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_iter0_fsm_state18 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state19 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state20 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state21 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state22 : STD_LOGIC;
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal p_Val2_17_reg_537 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_18_reg_547 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_19_reg_557 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_20_reg_567 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal SBUS_data_load_3_reg_1934 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state2 : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal SBUS_data_load_4_reg_1945 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state3 : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal SBUS_data_load_7_reg_1955 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state4 : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_iter0_fsm_state5 : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal SBUS_data_load_8_reg_1971 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state6 : STD_LOGIC;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal tmp_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1981 : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_load_1_reg_1986 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state7 : STD_LOGIC;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal SBUS_data_load_2_reg_1996 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state8 : STD_LOGIC;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal SBUS_data_load_5_reg_2007 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state9 : STD_LOGIC;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal SBUS_data_load_6_reg_2018 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state10 : STD_LOGIC;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal SBUS_data_load_9_reg_2029 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state11 : STD_LOGIC;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_CS_iter0_fsm_state12 : STD_LOGIC;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal or_cond_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2074_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_648_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_699_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_725_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_751_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_800_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_860_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_reg_2103 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_46_cast_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_2113 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_iter0_fsm_state13 : STD_LOGIC;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal tmp_27_reg_2113_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_2117 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_34_reg_2122 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_964_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_1_reg_2128 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_48_cast_fu_978_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_2143 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_iter0_fsm_state14 : STD_LOGIC;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal tmp_44_reg_2148 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_1060_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_2_reg_2154 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_50_cast_fu_1074_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_iter0_fsm_state15 : STD_LOGIC;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal tmp_62_reg_2174 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_63_reg_2179 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_cast_fu_1135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_fu_1151_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal mul1_reg_2195 : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_CS_iter0_fsm_state16 : STD_LOGIC;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal tmp_36_reg_2200 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1090_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal mul2_reg_2205 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_59_reg_2210 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_1240_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_3_reg_2221 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_54_cast_fu_1254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_21_fu_1294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_21_reg_2236 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_sig_ioackin_OUT_r_AWREADY : STD_LOGIC;
    signal p_Val2_8_fu_1334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_2242 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1188_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal mul4_reg_2248 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_65_reg_2253 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_reg_2259 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_69_reg_2264 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_1427_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_4_reg_2270 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_56_cast_fu_1441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_22_fu_1479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_22_reg_2285 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal tmp_74_reg_2296 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_75_reg_2301 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1579_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_5_reg_2307 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_53_fu_1585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1496_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal mul5_reg_2322 : STD_LOGIC_VECTOR (78 downto 0);
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal tmp_71_reg_2327 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_79_reg_2333 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_80_reg_2338 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_1667_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_reg_2354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal mul3_fu_1684_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal mul3_reg_2360 : STD_LOGIC_VECTOR (76 downto 0);
    signal tmp_55_fu_1690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_1742_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal mul_reg_2377 : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal tmp_82_reg_2382 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_2388 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_1790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_1821_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_83_reg_2403 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal icmp1_fu_1849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_2408 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_1855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_1880_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_12_reg_2423 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_58_fu_1888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_Val2_23_phi_fu_522_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_622_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_23_reg_519 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_16_reg_528 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_17_reg_537 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_18_reg_547 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_19_reg_557 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_20_reg_567 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ioackin_OUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUT_r_WREADY : STD_LOGIC := '0';
    signal p_Val2_36_cast_fu_1834_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_cast_fu_1893_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_1917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1901_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_619_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_645_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_636_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_662_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_685_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_675_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_682_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_693_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_722_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_713_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_748_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_739_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_772_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_786_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_776_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_783_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_794_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_832_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_840_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_s_fu_848_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i_cast_fu_856_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_46_fu_866_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_cast_fu_887_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_1_fu_894_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_1_fu_894_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_135_1_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_1_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_cast_fu_936_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_944_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_2_fu_952_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i1_cast_fu_960_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_48_fu_970_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_1_cast_fu_983_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_3_fu_990_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_3_fu_990_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_135_2_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_2_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_cast_fu_1032_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_1040_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_4_fu_1048_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i2_cast_fu_1056_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_49_fu_1066_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i1_fu_1079_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1090_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_2_cast_fu_1096_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_5_fu_1103_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_5_fu_1103_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_50_fu_1127_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_fu_1140_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul1_fu_1151_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_2_i2_fu_1177_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1188_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_135_3_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_3_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_cast_fu_1212_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_1220_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_6_fu_1228_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i3_cast_fu_1236_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_51_fu_1246_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal neg_mul1_fu_1259_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal tmp_35_fu_1264_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_v_v_fu_1274_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc1_fu_1280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti1_fu_1284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_1290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_mul2_fu_1301_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_47_fu_1306_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_v1_v_fu_1316_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti2_fu_1322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_1328_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_cast_fu_1350_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_7_fu_1357_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_7_fu_1357_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_137_4_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_4_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_cast_fu_1399_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_73_fu_1407_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_10_fu_1415_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i4_cast_fu_1423_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_52_fu_1433_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal neg_mul3_fu_1446_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_64_fu_1451_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_v2_v_fu_1461_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti3_fu_1467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_1473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_i3_fu_1485_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_1496_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_4_cast_fu_1502_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_11_fu_1509_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_11_fu_1509_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_137_5_fu_1533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_5_fu_1539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_cast_fu_1551_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_78_fu_1559_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_13_fu_1567_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i5_cast_fu_1575_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_5_cast_fu_1599_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_14_fu_1606_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_14_fu_1606_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal neg_mul5_fu_1634_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_70_fu_1639_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_v3_v_fu_1649_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti4_fu_1655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_72_fu_1661_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_i4_fu_1673_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul3_fu_1684_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal neg_mul4_fu_1694_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal tmp_76_fu_1699_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_77_fu_1709_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_v4_v_fu_1718_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_i5_fu_1731_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_fu_1742_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal neg_ti9_fu_1725_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_84_fu_1758_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_fu_1768_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_86_fu_1777_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal neg_mul_fu_1794_p2 : STD_LOGIC_VECTOR (76 downto 0);
    signal tmp_81_fu_1799_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_v5_v_fu_1809_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal neg_ti_fu_1815_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_15_fu_1827_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_87_fu_1839_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i6_fu_1860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_cast_fu_1865_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_88_fu_1872_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1090_ce : STD_LOGIC;
    signal grp_fu_1188_ce : STD_LOGIC;
    signal grp_fu_1496_ce : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_11_fu_1509_p00 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_14_fu_1606_p00 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_1_fu_894_p00 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_3_fu_990_p00 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_5_fu_1103_p00 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_7_fu_1357_p00 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_condition_752 : BOOLEAN;
    signal ap_condition_758 : BOOLEAN;
    signal ap_condition_764 : BOOLEAN;
    signal ap_condition_770 : BOOLEAN;
    signal ap_condition_776 : BOOLEAN;
    signal ap_condition_483 : BOOLEAN;
    signal ap_condition_1660 : BOOLEAN;
    signal ap_condition_609 : BOOLEAN;

    component rcReceiver_mul_39bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (38 downto 0);
        din1 : IN STD_LOGIC_VECTOR (40 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (78 downto 0) );
    end component;


    component rcReceiver_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SBUS_data_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        SBUS_data_ce0 : IN STD_LOGIC;
        SBUS_data_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rcReceiver_TEST_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        test_V_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        test_V_ce0 : IN STD_LOGIC;
        test_V_we0 : IN STD_LOGIC;
        test_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rcReceiver_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    rcReceiver_CTRL_s_axi_U : component rcReceiver_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SBUS_data_address0 => SBUS_data_address0,
        SBUS_data_ce0 => SBUS_data_ce0,
        SBUS_data_q0 => SBUS_data_q0);

    rcReceiver_TEST_s_axi_U : component rcReceiver_TEST_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_AWVALID,
        AWREADY => s_axi_TEST_AWREADY,
        AWADDR => s_axi_TEST_AWADDR,
        WVALID => s_axi_TEST_WVALID,
        WREADY => s_axi_TEST_WREADY,
        WDATA => s_axi_TEST_WDATA,
        WSTRB => s_axi_TEST_WSTRB,
        ARVALID => s_axi_TEST_ARVALID,
        ARREADY => s_axi_TEST_ARREADY,
        ARADDR => s_axi_TEST_ARADDR,
        RVALID => s_axi_TEST_RVALID,
        RREADY => s_axi_TEST_RREADY,
        RDATA => s_axi_TEST_RDATA,
        RRESP => s_axi_TEST_RRESP,
        BVALID => s_axi_TEST_BVALID,
        BREADY => s_axi_TEST_BREADY,
        BRESP => s_axi_TEST_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        test_V_address0 => test_V_address0,
        test_V_ce0 => test_V_ce0,
        test_V_we0 => test_V_we0,
        test_V_d0 => test_V_d0);

    rcReceiver_OUT_r_m_axi_U : component rcReceiver_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_6,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => OUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    rcReceiver_mul_39bkb_U1 : component rcReceiver_mul_39bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 39,
        din1_WIDTH => 41,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_i1_fu_1079_p3,
        din1 => grp_fu_1090_p1,
        ce => grp_fu_1090_ce,
        dout => grp_fu_1090_p2);

    rcReceiver_mul_39bkb_U2 : component rcReceiver_mul_39bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 39,
        din1_WIDTH => 41,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_i2_fu_1177_p3,
        din1 => grp_fu_1188_p1,
        ce => grp_fu_1188_ce,
        dout => grp_fu_1188_p2);

    rcReceiver_mul_39bkb_U3 : component rcReceiver_mul_39bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 39,
        din1_WIDTH => 41,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_i3_fu_1485_p3,
        din1 => grp_fu_1496_p1,
        ce => grp_fu_1496_ce,
        dout => grp_fu_1496_p2);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then
                    if ((ap_const_boolean_1 = ap_condition_609)) then 
                        ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_condition_1660)) then 
                        ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state24) and (ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
                elsif (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_p_Val2_16_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_483)) then
                if ((or_cond_fu_614_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_16_reg_528 <= channels_1;
                elsif ((or_cond_fu_614_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_16_reg_528 <= tmp_6_fu_648_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_17_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_483)) then
                if ((or_cond_fu_614_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_17_reg_537 <= channels_2;
                elsif ((or_cond_fu_614_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_17_reg_537 <= tmp_13_fu_699_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_18_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_483)) then
                if ((or_cond_fu_614_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_18_reg_547 <= channels_3;
                elsif ((or_cond_fu_614_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_18_reg_547 <= tmp_16_fu_725_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_19_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_483)) then
                if ((or_cond_fu_614_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_19_reg_557 <= channels_4;
                elsif ((or_cond_fu_614_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_19_reg_557 <= tmp_19_fu_751_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_20_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_483)) then
                if ((or_cond_fu_614_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_20_reg_567 <= channels_5;
                elsif ((or_cond_fu_614_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_20_reg_567 <= tmp_26_fu_800_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state7))) then
                SBUS_data_load_1_reg_1986 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state8))) then
                SBUS_data_load_2_reg_1996 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2))) then
                SBUS_data_load_3_reg_1934 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3))) then
                SBUS_data_load_4_reg_1945 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state9))) then
                SBUS_data_load_5_reg_2007 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state10))) then
                SBUS_data_load_6_reg_2018 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                SBUS_data_load_7_reg_1955 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state5))) then
                SBUS_data_load_8_reg_1971 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state11))) then
                SBUS_data_load_9_reg_2029 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (or_cond_fu_614_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12))) then
                channels_0 <= tmp_2_fu_622_p3;
                channels_1 <= tmp_6_fu_648_p3;
                channels_2 <= tmp_13_fu_699_p3;
                channels_3 <= tmp_16_fu_725_p3;
                channels_4 <= tmp_19_fu_751_p3;
                channels_5 <= tmp_26_fu_800_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2074_pp0_iter0_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID))) then
                errors <= tmp_s_fu_1901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22))) then
                icmp1_reg_2408 <= icmp1_fu_1849_p2;
                tmp_83_reg_2403 <= tmp_83_fu_1821_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21))) then
                icmp_reg_2388 <= icmp_fu_1784_p2;
                    mul_reg_2377(76 downto 13) <= mul_fu_1742_p2(76 downto 13);
                tmp_82_reg_2382 <= mul_fu_1742_p2(76 downto 62);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_reg_2113_pp0_iter0_reg = ap_const_lv1_1) and (or_cond_reg_2074_pp0_iter0_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID))) then
                lost <= tmp_28_fu_1917_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16))) then
                    mul1_reg_2195(76 downto 13) <= mul1_fu_1151_p2(76 downto 13);
                mul2_reg_2205 <= grp_fu_1090_p2;
                    r_V_3_reg_2221(24 downto 13) <= r_V_3_fu_1240_p2(24 downto 13);
                tmp_59_reg_2210 <= grp_fu_1090_p2(78 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20))) then
                    mul3_reg_2360(76 downto 13) <= mul3_fu_1684_p2(76 downto 13);
                p_Val2_9_reg_2354 <= p_Val2_9_fu_1667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17))) then
                mul4_reg_2248 <= grp_fu_1188_p2;
                p_Val2_21_reg_2236 <= p_Val2_21_fu_1294_p3;
                p_Val2_8_reg_2242 <= p_Val2_8_fu_1334_p2;
                    r_V_4_reg_2270(24 downto 13) <= r_V_4_fu_1427_p2(24 downto 13);
                tmp_65_reg_2253 <= grp_fu_1188_p2(78 downto 63);
                tmp_68_reg_2259 <= p_Val2_7_fu_1357_p2(38 downto 13);
                tmp_69_reg_2264 <= p_Val2_7_fu_1357_p2(38 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19))) then
                mul5_reg_2322 <= grp_fu_1496_p2;
                tmp_71_reg_2327 <= grp_fu_1496_p2(78 downto 63);
                tmp_79_reg_2333 <= p_Val2_14_fu_1606_p2(37 downto 13);
                tmp_80_reg_2338 <= p_Val2_14_fu_1606_p2(37 downto 37);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12))) then
                or_cond_reg_2074 <= or_cond_fu_614_p2;
                    r_V_reg_2103(24 downto 13) <= r_V_fu_860_p2(24 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))) then
                or_cond_reg_2074_pp0_iter0_reg <= or_cond_reg_2074;
                    p_Val2_12_reg_2423(14 downto 13) <= p_Val2_12_fu_1880_p3(14 downto 13);
                tmp_27_reg_2113_pp0_iter0_reg <= tmp_27_reg_2113;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13))) then
                p_Val2_17_reg_537 <= ap_phi_reg_pp0_iter0_p_Val2_17_reg_537;
                p_Val2_18_reg_547 <= ap_phi_reg_pp0_iter0_p_Val2_18_reg_547;
                p_Val2_19_reg_557 <= ap_phi_reg_pp0_iter0_p_Val2_19_reg_557;
                p_Val2_20_reg_567 <= ap_phi_reg_pp0_iter0_p_Val2_20_reg_567;
                    r_V_1_reg_2128(24 downto 13) <= r_V_1_fu_964_p2(24 downto 13);
                tmp_33_reg_2117 <= p_Val2_1_fu_894_p2(37 downto 13);
                tmp_34_reg_2122 <= p_Val2_1_fu_894_p2(37 downto 37);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18))) then
                p_Val2_22_reg_2285 <= p_Val2_22_fu_1479_p2;
                    r_V_5_reg_2307(24 downto 13) <= r_V_5_fu_1579_p2(24 downto 13);
                tmp_74_reg_2296 <= p_Val2_11_fu_1509_p2(37 downto 13);
                tmp_75_reg_2301 <= p_Val2_11_fu_1509_p2(37 downto 37);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14))) then
                    r_V_2_reg_2154(24 downto 13) <= r_V_2_fu_1060_p2(24 downto 13);
                tmp_42_reg_2143 <= p_Val2_3_fu_990_p2(38 downto 13);
                tmp_44_reg_2148 <= p_Val2_3_fu_990_p2(38 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (or_cond_reg_2074 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13))) then
                tmp_27_reg_2113 <= SBUS_data_q0(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (tmp_34_reg_2122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16))) then
                tmp_36_reg_2200 <= mul1_fu_1151_p2(76 downto 62);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15))) then
                tmp_62_reg_2174 <= p_Val2_5_fu_1103_p2(38 downto 13);
                tmp_63_reg_2179 <= p_Val2_5_fu_1103_p2(38 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state6))) then
                tmp_reg_1981 <= tmp_fu_577_p2;
            end if;
        end if;
    end process;
    r_V_reg_2103(12 downto 0) <= "0000000000000";
    r_V_1_reg_2128(12 downto 0) <= "0000000000000";
    r_V_2_reg_2154(12 downto 0) <= "0000000000000";
    mul1_reg_2195(12 downto 0) <= "0000000000000";
    r_V_3_reg_2221(12 downto 0) <= "0000000000000";
    r_V_4_reg_2270(12 downto 0) <= "0000000000000";
    r_V_5_reg_2307(12 downto 0) <= "0000000000000";
    mul3_reg_2360(12 downto 0) <= "0000000000000";
    mul_reg_2377(12 downto 0) <= "0000000000000";
    p_Val2_12_reg_2423(12 downto 0) <= "0000000000000";

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, ap_CS_iter0_fsm_state1, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state5, ap_CS_iter0_fsm_state6, ap_CS_iter0_fsm_state7, ap_CS_iter0_fsm_state8, ap_CS_iter0_fsm_state9, ap_CS_iter0_fsm_state10, ap_CS_iter0_fsm_state11, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state2;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
                end if;
            when ap_ST_iter0_fsm_state2 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state3;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state2;
                end if;
            when ap_ST_iter0_fsm_state3 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state4;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state3;
                end if;
            when ap_ST_iter0_fsm_state4 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state5;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state4;
                end if;
            when ap_ST_iter0_fsm_state5 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state5))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state6;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state5;
                end if;
            when ap_ST_iter0_fsm_state6 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state6))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state7;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state6;
                end if;
            when ap_ST_iter0_fsm_state7 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state7))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state8;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state7;
                end if;
            when ap_ST_iter0_fsm_state8 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state8))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state9;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state8;
                end if;
            when ap_ST_iter0_fsm_state9 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state9))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state10;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state9;
                end if;
            when ap_ST_iter0_fsm_state10 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state10))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state11;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state10;
                end if;
            when ap_ST_iter0_fsm_state11 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state11))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state12;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state11;
                end if;
            when ap_ST_iter0_fsm_state12 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state13;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state12;
                end if;
            when ap_ST_iter0_fsm_state13 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state14;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state13;
                end if;
            when ap_ST_iter0_fsm_state14 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state15;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state14;
                end if;
            when ap_ST_iter0_fsm_state15 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state16;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state15;
                end if;
            when ap_ST_iter0_fsm_state16 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state17;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state16;
                end if;
            when ap_ST_iter0_fsm_state17 => 
                if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state18;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state17;
                end if;
            when ap_ST_iter0_fsm_state18 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state19;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state18;
                end if;
            when ap_ST_iter0_fsm_state19 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state20;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state19;
                end if;
            when ap_ST_iter0_fsm_state20 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state21;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state20;
                end if;
            when ap_ST_iter0_fsm_state21 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state22;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state21;
                end if;
            when ap_ST_iter0_fsm_state22 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state23;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state22;
                end if;
            when ap_ST_iter0_fsm_state23 => 
                if (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24))))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state23;
                end if;
            when others =>  
                ap_NS_iter0_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_CS_iter1_fsm, ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_iter1_fsm_state24) and (ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state25;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state24;
                end if;
            when ap_ST_iter1_fsm_state25 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state26;
            when ap_ST_iter1_fsm_state26 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state27;
            when ap_ST_iter1_fsm_state27 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state28;
            when ap_ST_iter1_fsm_state28 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state29;
            when ap_ST_iter1_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_iter0_fsm_state23) and (ap_const_logic_1 = OUT_r_BVALID))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state24;
                elsif (((ap_const_logic_0 = ap_CS_iter0_fsm_state23) and (ap_const_logic_1 = OUT_r_BVALID))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state29;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state24;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XXXXXXX";
        end case;
    end process;

    OUT_r_AWVALID_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state17, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((not((((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)))) and (ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WDATA_assign_proc : process(ap_CS_iter1_fsm_state24, p_Val2_21_reg_2236, p_Val2_8_reg_2242, p_Val2_22_reg_2285, p_Val2_9_reg_2354, ap_reg_ioackin_OUT_r_WREADY, p_Val2_36_cast_fu_1834_p1, p_Val2_12_cast_fu_1893_p1, ap_condition_752, ap_condition_758, ap_condition_764, ap_condition_770, ap_condition_776)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_iter1_fsm_state24)) then 
                OUT_r_WDATA <= p_Val2_12_cast_fu_1893_p1;
            elsif ((ap_const_boolean_1 = ap_condition_776)) then 
                OUT_r_WDATA <= p_Val2_36_cast_fu_1834_p1;
            elsif ((ap_const_boolean_1 = ap_condition_770)) then 
                OUT_r_WDATA <= p_Val2_9_reg_2354;
            elsif ((ap_const_boolean_1 = ap_condition_764)) then 
                OUT_r_WDATA <= p_Val2_22_reg_2285;
            elsif ((ap_const_boolean_1 = ap_condition_758)) then 
                OUT_r_WDATA <= p_Val2_8_reg_2242;
            elsif ((ap_const_boolean_1 = ap_condition_752)) then 
                OUT_r_WDATA <= p_Val2_21_reg_2236;
            else 
                OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)) or ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_iter0_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(ap_CS_iter1_fsm_state29, m_axi_OUT_r_BVALID)
    begin
        if ((ap_const_logic_1 = ap_CS_iter1_fsm_state29)) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(ap_CS_iter1_fsm_state24, m_axi_OUT_r_WREADY, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state22) or (ap_const_logic_1 = ap_CS_iter0_fsm_state21) or (ap_const_logic_1 = ap_CS_iter0_fsm_state20) or (ap_const_logic_1 = ap_CS_iter0_fsm_state19) or (ap_const_logic_1 = ap_CS_iter0_fsm_state18) or (ap_const_logic_1 = ap_CS_iter1_fsm_state24))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    SBUS_data_address0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state5, ap_CS_iter0_fsm_state6, ap_CS_iter0_fsm_state7, ap_CS_iter0_fsm_state8, ap_CS_iter0_fsm_state9, ap_CS_iter0_fsm_state10, ap_CS_iter0_fsm_state11, ap_CS_iter0_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then 
            SBUS_data_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state11)) then 
            SBUS_data_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state10)) then 
            SBUS_data_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state9)) then 
            SBUS_data_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state8)) then 
            SBUS_data_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state7)) then 
            SBUS_data_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state6)) then 
            SBUS_data_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state5)) then 
            SBUS_data_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state4)) then 
            SBUS_data_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state3)) then 
            SBUS_data_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state2)) then 
            SBUS_data_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            SBUS_data_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        else 
            SBUS_data_address0 <= "XXXXX";
        end if; 
    end process;


    SBUS_data_ce0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state5, ap_CS_iter0_fsm_state6, ap_CS_iter0_fsm_state7, ap_CS_iter0_fsm_state8, ap_CS_iter0_fsm_state9, ap_CS_iter0_fsm_state10, ap_CS_iter0_fsm_state11, ap_CS_iter0_fsm_state12)
    begin
        if (((not(((ap_start = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state11)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state10)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state9)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state8)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state7)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state6)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state5)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2)))) then 
            SBUS_data_ce0 <= ap_const_logic_1;
        else 
            SBUS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter0_fsm_state10 <= ap_CS_iter0_fsm(9);
    ap_CS_iter0_fsm_state11 <= ap_CS_iter0_fsm(10);
    ap_CS_iter0_fsm_state12 <= ap_CS_iter0_fsm(11);
    ap_CS_iter0_fsm_state13 <= ap_CS_iter0_fsm(12);
    ap_CS_iter0_fsm_state14 <= ap_CS_iter0_fsm(13);
    ap_CS_iter0_fsm_state15 <= ap_CS_iter0_fsm(14);
    ap_CS_iter0_fsm_state16 <= ap_CS_iter0_fsm(15);
    ap_CS_iter0_fsm_state17 <= ap_CS_iter0_fsm(16);
    ap_CS_iter0_fsm_state18 <= ap_CS_iter0_fsm(17);
    ap_CS_iter0_fsm_state19 <= ap_CS_iter0_fsm(18);
    ap_CS_iter0_fsm_state2 <= ap_CS_iter0_fsm(1);
    ap_CS_iter0_fsm_state20 <= ap_CS_iter0_fsm(19);
    ap_CS_iter0_fsm_state21 <= ap_CS_iter0_fsm(20);
    ap_CS_iter0_fsm_state22 <= ap_CS_iter0_fsm(21);
    ap_CS_iter0_fsm_state23 <= ap_CS_iter0_fsm(22);
    ap_CS_iter0_fsm_state3 <= ap_CS_iter0_fsm(2);
    ap_CS_iter0_fsm_state4 <= ap_CS_iter0_fsm(3);
    ap_CS_iter0_fsm_state5 <= ap_CS_iter0_fsm(4);
    ap_CS_iter0_fsm_state6 <= ap_CS_iter0_fsm(5);
    ap_CS_iter0_fsm_state7 <= ap_CS_iter0_fsm(6);
    ap_CS_iter0_fsm_state8 <= ap_CS_iter0_fsm(7);
    ap_CS_iter0_fsm_state9 <= ap_CS_iter0_fsm(8);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state24 <= ap_CS_iter1_fsm(1);
    ap_CS_iter1_fsm_state29 <= ap_CS_iter1_fsm(6);
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage16_iter0_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29)
    begin
                ap_block_state17_pp0_stage16_iter0 <= ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID));
    end process;

        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp0_stage5_iter1_assign_proc : process(OUT_r_BVALID)
    begin
                ap_block_state29_pp0_stage5_iter1 <= (ap_const_logic_0 = OUT_r_BVALID);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1660_assign_proc : process(OUT_r_AWREADY, OUT_r_BVALID, ap_CS_iter1_fsm_state29)
    begin
                ap_condition_1660 <= (not((((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)))) and (ap_const_logic_1 = OUT_r_AWREADY));
    end process;


    ap_condition_483_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state12)
    begin
                ap_condition_483 <= (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12));
    end process;


    ap_condition_609_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_sig_ioackin_OUT_r_AWREADY)
    begin
                ap_condition_609 <= not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24))));
    end process;


    ap_condition_752_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state18)
    begin
                ap_condition_752 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18));
    end process;


    ap_condition_758_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state19)
    begin
                ap_condition_758 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19));
    end process;


    ap_condition_764_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state20)
    begin
                ap_condition_764 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20));
    end process;


    ap_condition_770_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state21)
    begin
                ap_condition_770 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21));
    end process;


    ap_condition_776_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state22)
    begin
                ap_condition_776 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22));
    end process;


    ap_done_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_23_phi_fu_522_p4_assign_proc : process(channels_0, ap_CS_iter0_fsm_state12, or_cond_fu_614_p2, tmp_2_fu_622_p3, ap_phi_reg_pp0_iter0_p_Val2_23_reg_519)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then
            if ((or_cond_fu_614_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_23_phi_fu_522_p4 <= channels_0;
            elsif ((or_cond_fu_614_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_23_phi_fu_522_p4 <= tmp_2_fu_622_p3;
            else 
                ap_phi_mux_p_Val2_23_phi_fu_522_p4 <= ap_phi_reg_pp0_iter0_p_Val2_23_reg_519;
            end if;
        else 
            ap_phi_mux_p_Val2_23_phi_fu_522_p4 <= ap_phi_reg_pp0_iter0_p_Val2_23_reg_519;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_23_reg_519 <= "XXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29)
    begin
        if ((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_OUT_r_AWREADY_assign_proc : process(OUT_r_AWREADY, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_AWREADY <= OUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUT_r_WREADY_assign_proc : process(OUT_r_WREADY, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_WREADY <= OUT_r_WREADY;
        else 
            ap_sig_ioackin_OUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1090_ce_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16)
    begin
        if (((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)))) then 
            grp_fu_1090_ce <= ap_const_logic_1;
        else 
            grp_fu_1090_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1090_p1 <= ap_const_lv79_A3D70A3D71(41 - 1 downto 0);

    grp_fu_1188_ce_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)))) then 
            grp_fu_1188_ce <= ap_const_logic_1;
        else 
            grp_fu_1188_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1188_p1 <= ap_const_lv79_A3D70A3D71(41 - 1 downto 0);

    grp_fu_1496_ce_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
            grp_fu_1496_ce <= ap_const_logic_1;
        else 
            grp_fu_1496_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1496_p1 <= ap_const_lv79_A3D70A3D71(41 - 1 downto 0);
    icmp1_fu_1849_p2 <= "1" when (signed(tmp_87_fu_1839_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_fu_1784_p2 <= "1" when (signed(tmp_86_fu_1777_p3) > signed(ap_const_lv3_0)) else "0";
    mul1_fu_1151_p0 <= tmp_2_i_fu_1140_p3;
    mul1_fu_1151_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul1_fu_1151_p0) * signed('0' &ap_const_lv77_51EB851EB9))), 77));
    mul3_fu_1684_p0 <= tmp_2_i4_fu_1673_p3;
    mul3_fu_1684_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul3_fu_1684_p0) * signed('0' &ap_const_lv77_51EB851EB9))), 77));
    mul_fu_1742_p0 <= tmp_2_i5_fu_1731_p3;
    mul_fu_1742_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_fu_1742_p0) * signed('0' &ap_const_lv77_51EB851EB9))), 77));
    neg_mul1_fu_1259_p2 <= std_logic_vector(unsigned(ap_const_lv77_0) - unsigned(mul1_reg_2195));
    neg_mul2_fu_1301_p2 <= std_logic_vector(unsigned(ap_const_lv79_0) - unsigned(mul2_reg_2205));
    neg_mul3_fu_1446_p2 <= std_logic_vector(unsigned(ap_const_lv79_0) - unsigned(mul4_reg_2248));
    neg_mul4_fu_1694_p2 <= std_logic_vector(unsigned(ap_const_lv77_0) - unsigned(mul3_reg_2360));
    neg_mul5_fu_1634_p2 <= std_logic_vector(unsigned(ap_const_lv79_0) - unsigned(mul5_reg_2322));
    neg_mul_fu_1794_p2 <= std_logic_vector(unsigned(ap_const_lv77_0) - unsigned(mul_reg_2377));
    neg_ti1_fu_1284_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc1_fu_1280_p1));
    neg_ti2_fu_1322_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_v1_v_fu_1316_p3));
    neg_ti3_fu_1467_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_v2_v_fu_1461_p3));
    neg_ti4_fu_1655_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_v3_v_fu_1649_p3));
    neg_ti9_fu_1725_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(p_v4_v_fu_1718_p3));
    neg_ti_fu_1815_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(p_v5_v_fu_1809_p3));
    or_cond_fu_614_p2 <= (tmp_reg_1981 and tmp_9_fu_608_p2);
    p_Val2_10_fu_1415_p3 <= (tmp_73_fu_1407_p3 & ap_const_lv13_0);
    p_Val2_11_fu_1509_p0 <= p_Val2_11_fu_1509_p00(33 - 1 downto 0);
    p_Val2_11_fu_1509_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_cast_fu_1502_p1),45));
    p_Val2_11_fu_1509_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_11_fu_1509_p0) * unsigned(ap_const_lv45_1FF7), 45));
    p_Val2_12_cast_fu_1893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_12_reg_2423),16));
    p_Val2_12_fu_1880_p3 <= (tmp_88_fu_1872_p3 & ap_const_lv13_0);
    p_Val2_13_fu_1567_p3 <= (tmp_78_fu_1559_p3 & ap_const_lv13_0);
    p_Val2_14_fu_1606_p0 <= p_Val2_14_fu_1606_p00(33 - 1 downto 0);
    p_Val2_14_fu_1606_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_cast_fu_1599_p1),45));
    p_Val2_14_fu_1606_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_14_fu_1606_p0) * unsigned(ap_const_lv45_1FF7), 45));
    p_Val2_15_fu_1827_p3 <= (icmp_reg_2388 & ap_const_lv13_0);
    p_Val2_1_fu_894_p0 <= p_Val2_1_fu_894_p00(33 - 1 downto 0);
    p_Val2_1_fu_894_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_cast_fu_887_p1),45));
    p_Val2_1_fu_894_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_1_fu_894_p0) * unsigned(ap_const_lv45_1FF7), 45));
    p_Val2_21_fu_1294_p3 <= 
        neg_ti1_fu_1284_p2 when (tmp_34_reg_2122(0) = '1') else 
        tmp_38_fu_1290_p1;
    p_Val2_22_fu_1479_p2 <= std_logic_vector(unsigned(tmp_66_fu_1473_p3) + unsigned(ap_const_lv16_E000));
    p_Val2_2_fu_952_p3 <= (tmp_40_fu_944_p3 & ap_const_lv13_0);
    p_Val2_36_cast_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_15_fu_1827_p3),16));
    p_Val2_3_fu_990_p0 <= p_Val2_3_fu_990_p00(33 - 1 downto 0);
    p_Val2_3_fu_990_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_cast_fu_983_p1),45));
    p_Val2_3_fu_990_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_fu_990_p0) * unsigned(ap_const_lv45_3FF7), 45));
    p_Val2_4_fu_1048_p3 <= (tmp_61_fu_1040_p3 & ap_const_lv13_0);
    p_Val2_5_fu_1103_p0 <= p_Val2_5_fu_1103_p00(33 - 1 downto 0);
    p_Val2_5_fu_1103_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_fu_1096_p1),45));
    p_Val2_5_fu_1103_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_fu_1103_p0) * unsigned(ap_const_lv45_3FF7), 45));
    p_Val2_6_fu_1228_p3 <= (tmp_67_fu_1220_p3 & ap_const_lv13_0);
    p_Val2_7_fu_1357_p0 <= p_Val2_7_fu_1357_p00(33 - 1 downto 0);
    p_Val2_7_fu_1357_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_cast_fu_1350_p1),45));
    p_Val2_7_fu_1357_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_fu_1357_p0) * unsigned(ap_const_lv45_3FF7), 45));
    p_Val2_8_fu_1334_p2 <= std_logic_vector(unsigned(tmp_60_fu_1328_p3) + unsigned(ap_const_lv16_E000));
    p_Val2_9_fu_1667_p2 <= std_logic_vector(unsigned(tmp_72_fu_1661_p3) + unsigned(ap_const_lv16_E000));
    p_Val2_s_fu_848_p3 <= (tmp_32_fu_840_p3 & ap_const_lv13_0);
    p_v1_v_fu_1316_p3 <= 
        tmp_47_fu_1306_p4 when (tmp_44_reg_2148(0) = '1') else 
        tmp_59_reg_2210;
    p_v2_v_fu_1461_p3 <= 
        tmp_64_fu_1451_p4 when (tmp_63_reg_2179(0) = '1') else 
        tmp_65_reg_2253;
    p_v3_v_fu_1649_p3 <= 
        tmp_70_fu_1639_p4 when (tmp_69_reg_2264(0) = '1') else 
        tmp_71_reg_2327;
    p_v4_v_fu_1718_p3 <= 
        tmp_76_fu_1699_p4 when (tmp_75_reg_2301(0) = '1') else 
        tmp_77_fu_1709_p4;
    p_v5_v_fu_1809_p3 <= 
        tmp_81_fu_1799_p4 when (tmp_80_reg_2338(0) = '1') else 
        tmp_82_reg_2382;
    p_v_v_fu_1274_p3 <= 
        tmp_35_fu_1264_p4 when (tmp_34_reg_2122(0) = '1') else 
        tmp_36_reg_2200;
        r_V_1_cast_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_2128),33));

    r_V_1_fu_964_p2 <= std_logic_vector(unsigned(tmp_9_i1_cast_fu_960_p1) + unsigned(ap_const_lv25_1E70000));
        r_V_2_cast_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_2154),33));

    r_V_2_fu_1060_p2 <= std_logic_vector(unsigned(tmp_9_i2_cast_fu_1056_p1) + unsigned(ap_const_lv25_1E70000));
        r_V_3_cast_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_2221),33));

    r_V_3_fu_1240_p2 <= std_logic_vector(unsigned(tmp_9_i3_cast_fu_1236_p1) + unsigned(ap_const_lv25_1E70000));
        r_V_4_cast_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_reg_2270),33));

    r_V_4_fu_1427_p2 <= std_logic_vector(unsigned(tmp_9_i4_cast_fu_1423_p1) + unsigned(ap_const_lv25_1E70000));
        r_V_5_cast_fu_1599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_reg_2307),33));

    r_V_5_fu_1579_p2 <= std_logic_vector(unsigned(tmp_9_i5_cast_fu_1575_p1) + unsigned(ap_const_lv25_1E70000));
        r_V_cast_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_2103),33));

    r_V_fu_860_p2 <= std_logic_vector(unsigned(tmp_9_i_cast_fu_856_p1) + unsigned(ap_const_lv25_1E70000));

    test_V_address0_assign_proc : process(ap_CS_iter0_fsm_state23, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state23)) then 
            test_V_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state22)) then 
            test_V_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state21)) then 
            test_V_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state20)) then 
            test_V_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state19)) then 
            test_V_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state18)) then 
            test_V_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then 
            test_V_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state16)) then 
            test_V_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state15)) then 
            test_V_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state14)) then 
            test_V_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state13)) then 
            test_V_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then 
            test_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        else 
            test_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    test_V_ce0_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12)) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state24) and (ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1)))) then 
            test_V_ce0 <= ap_const_logic_1;
        else 
            test_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_V_d0_assign_proc : process(ap_CS_iter0_fsm_state23, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, tmp_46_cast_fu_874_p1, ap_CS_iter0_fsm_state13, tmp_48_cast_fu_978_p1, ap_CS_iter0_fsm_state14, tmp_50_cast_fu_1074_p1, ap_CS_iter0_fsm_state15, tmp_52_cast_fu_1135_p1, ap_CS_iter0_fsm_state16, tmp_54_cast_fu_1254_p1, tmp_56_cast_fu_1441_p1, tmp_53_fu_1585_p1, tmp_54_fu_1630_p1, tmp_55_fu_1690_p1, tmp_56_fu_1790_p1, tmp_57_fu_1855_p1, tmp_58_fu_1888_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state23)) then 
            test_V_d0 <= tmp_58_fu_1888_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state22)) then 
            test_V_d0 <= tmp_57_fu_1855_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state21)) then 
            test_V_d0 <= tmp_56_fu_1790_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state20)) then 
            test_V_d0 <= tmp_55_fu_1690_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state19)) then 
            test_V_d0 <= tmp_54_fu_1630_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state18)) then 
            test_V_d0 <= tmp_53_fu_1585_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then 
            test_V_d0 <= tmp_56_cast_fu_1441_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state16)) then 
            test_V_d0 <= tmp_54_cast_fu_1254_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state15)) then 
            test_V_d0 <= tmp_52_cast_fu_1135_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state14)) then 
            test_V_d0 <= tmp_50_cast_fu_1074_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state13)) then 
            test_V_d0 <= tmp_48_cast_fu_978_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then 
            test_V_d0 <= tmp_46_cast_fu_874_p1;
        else 
            test_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_V_we0_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state29, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state29) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13)) or (not((((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state29)) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state24)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12)))) then 
            test_V_we0 <= ap_const_logic_1;
        else 
            test_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_103_cast_fu_1865_p3 <= 
        ap_const_lv2_0 when (icmp1_reg_2408(0) = '1') else 
        ap_const_lv2_1;
    tmp_10_fu_682_p1 <= SBUS_data_load_5_reg_2007(1 - 1 downto 0);
    tmp_11_fu_685_p3 <= (ap_const_lv2_0 & tmp_4_fu_671_p1);
    tmp_12_fu_693_p2 <= (tmp_5_fu_675_p3 or tmp_11_fu_685_p3);
    tmp_135_1_fu_918_p2 <= "1" when (unsigned(ap_phi_reg_pp0_iter0_p_Val2_16_reg_528) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_135_2_fu_1014_p2 <= "1" when (unsigned(p_Val2_17_reg_537) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_135_3_fu_1194_p2 <= "1" when (unsigned(p_Val2_18_reg_547) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_137_4_fu_1381_p2 <= "1" when (unsigned(p_Val2_19_reg_557) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_137_5_fu_1533_p2 <= "1" when (unsigned(p_Val2_20_reg_567) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_138_1_fu_924_p2 <= "1" when (unsigned(ap_phi_reg_pp0_iter0_p_Val2_16_reg_528) > unsigned(ap_const_lv11_708)) else "0";
    tmp_138_2_fu_1020_p2 <= "1" when (unsigned(p_Val2_17_reg_537) > unsigned(ap_const_lv11_708)) else "0";
    tmp_138_3_fu_1200_p2 <= "1" when (unsigned(p_Val2_18_reg_547) > unsigned(ap_const_lv11_708)) else "0";
    tmp_139_4_fu_1387_p2 <= "1" when (unsigned(p_Val2_19_reg_557) > unsigned(ap_const_lv11_708)) else "0";
    tmp_139_5_fu_1539_p2 <= "1" when (unsigned(p_Val2_20_reg_567) > unsigned(ap_const_lv11_708)) else "0";
    tmp_13_fu_699_p3 <= (tmp_10_fu_682_p1 & tmp_12_fu_693_p2);
    tmp_14_fu_713_p4 <= SBUS_data_load_5_reg_2007(7 downto 1);
    tmp_15_fu_722_p1 <= SBUS_data_load_6_reg_2018(4 - 1 downto 0);
    tmp_16_fu_725_p3 <= (tmp_15_fu_722_p1 & tmp_14_fu_713_p4);
    tmp_17_fu_739_p4 <= SBUS_data_load_6_reg_2018(7 downto 4);
    tmp_18_fu_748_p1 <= SBUS_data_load_7_reg_1955(7 - 1 downto 0);
    tmp_19_fu_751_p3 <= (tmp_18_fu_748_p1 & tmp_17_fu_739_p4);
    tmp_1_fu_619_p1 <= SBUS_data_load_2_reg_1996(3 - 1 downto 0);
    tmp_1_i6_fu_1860_p2 <= "1" when (signed(tmp_83_reg_2403) < signed(ap_const_lv15_1800)) else "0";
    tmp_20_fu_765_p3 <= SBUS_data_load_7_reg_1955(7 downto 7);
    tmp_21_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_765_p3),8));
    tmp_22_fu_776_p3 <= (SBUS_data_load_8_reg_1971 & ap_const_lv1_0);
    tmp_23_fu_783_p1 <= SBUS_data_load_9_reg_2029(2 - 1 downto 0);
    tmp_24_fu_786_p3 <= (ap_const_lv1_0 & tmp_21_fu_772_p1);
    tmp_25_fu_794_p2 <= (tmp_24_fu_786_p3 or tmp_22_fu_776_p3);
    tmp_26_fu_800_p3 <= (tmp_23_fu_783_p1 & tmp_25_fu_794_p2);
    tmp_28_fu_1917_p2 <= std_logic_vector(unsigned(lost) + unsigned(ap_const_lv32_1));
    tmp_29_fu_814_p2 <= "1" when (unsigned(ap_phi_mux_p_Val2_23_phi_fu_522_p4) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_2_fu_622_p3 <= (tmp_1_fu_619_p1 & SBUS_data_load_1_reg_1986);
    tmp_2_i1_fu_1079_p3 <= (tmp_42_reg_2143 & ap_const_lv13_0);
    tmp_2_i2_fu_1177_p3 <= (tmp_62_reg_2174 & ap_const_lv13_0);
    tmp_2_i3_fu_1485_p3 <= (tmp_68_reg_2259 & ap_const_lv13_0);
    tmp_2_i4_fu_1673_p3 <= (tmp_74_reg_2296 & ap_const_lv13_0);
    tmp_2_i5_fu_1731_p3 <= (tmp_79_reg_2333 & ap_const_lv13_0);
    tmp_2_i_fu_1140_p3 <= (tmp_33_reg_2117 & ap_const_lv13_0);
    tmp_30_fu_820_p2 <= "1" when (unsigned(ap_phi_mux_p_Val2_23_phi_fu_522_p4) > unsigned(ap_const_lv11_708)) else "0";
    tmp_31_fu_826_p2 <= (tmp_30_fu_820_p2 or tmp_29_fu_814_p2);
    tmp_32_cast_fu_832_p3 <= 
        ap_const_lv11_C8 when (tmp_29_fu_814_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_32_fu_840_p3 <= 
        tmp_32_cast_fu_832_p3 when (tmp_31_fu_826_p2(0) = '1') else 
        ap_phi_mux_p_Val2_23_phi_fu_522_p4;
    tmp_35_fu_1264_p4 <= neg_mul1_fu_1259_p2(76 downto 62);
    tmp_37_fu_930_p2 <= (tmp_138_1_fu_924_p2 or tmp_135_1_fu_918_p2);
        tmp_38_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v_v_fu_1274_p3),16));

    tmp_39_fu_1026_p2 <= (tmp_138_2_fu_1020_p2 or tmp_135_2_fu_1014_p2);
    tmp_3_fu_645_p1 <= SBUS_data_load_3_reg_1934(6 - 1 downto 0);
    tmp_40_fu_944_p3 <= 
        tmp_47_cast_fu_936_p3 when (tmp_37_fu_930_p2(0) = '1') else 
        ap_phi_reg_pp0_iter0_p_Val2_16_reg_528;
    tmp_41_fu_1206_p2 <= (tmp_138_3_fu_1200_p2 or tmp_135_3_fu_1194_p2);
    tmp_43_fu_1393_p2 <= (tmp_139_4_fu_1387_p2 or tmp_137_4_fu_1381_p2);
    tmp_45_fu_1545_p2 <= (tmp_139_5_fu_1539_p2 or tmp_137_5_fu_1533_p2);
    tmp_46_cast_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_866_p3),32));
    tmp_46_fu_866_p3 <= (ap_phi_mux_p_Val2_23_phi_fu_522_p4 & ap_const_lv13_0);
    tmp_47_cast_fu_936_p3 <= 
        ap_const_lv11_C8 when (tmp_135_1_fu_918_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_47_fu_1306_p4 <= neg_mul2_fu_1301_p2(78 downto 63);
    tmp_48_cast_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_970_p3),32));
    tmp_48_fu_970_p3 <= (ap_phi_reg_pp0_iter0_p_Val2_16_reg_528 & ap_const_lv13_0);
    tmp_49_fu_1066_p3 <= (p_Val2_17_reg_537 & ap_const_lv13_0);
    tmp_4_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_662_p4),8));
    tmp_50_cast_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1066_p3),32));
    tmp_50_fu_1127_p3 <= (p_Val2_18_reg_547 & ap_const_lv13_0);
    tmp_51_fu_1246_p3 <= (p_Val2_19_reg_557 & ap_const_lv13_0);
    tmp_52_cast_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_1127_p3),32));
    tmp_52_fu_1433_p3 <= (p_Val2_20_reg_567 & ap_const_lv13_0);
    tmp_53_fu_1585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_21_reg_2236),32));
    tmp_54_cast_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1246_p3),32));
        tmp_54_fu_1630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_reg_2242),32));

        tmp_55_fu_1690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_22_reg_2285),32));

    tmp_56_cast_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_1433_p3),32));
        tmp_56_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_reg_2354),32));

    tmp_57_fu_1855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_15_fu_1827_p3),32));
    tmp_58_fu_1888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_12_fu_1880_p3),32));
    tmp_5_fu_675_p3 <= (SBUS_data_load_4_reg_1945 & ap_const_lv2_0);
    tmp_60_fu_1328_p3 <= 
        neg_ti2_fu_1322_p2 when (tmp_44_reg_2148(0) = '1') else 
        tmp_59_reg_2210;
    tmp_61_fu_1040_p3 <= 
        tmp_67_cast_fu_1032_p3 when (tmp_39_fu_1026_p2(0) = '1') else 
        p_Val2_17_reg_537;
    tmp_64_fu_1451_p4 <= neg_mul3_fu_1446_p2(78 downto 63);
    tmp_66_fu_1473_p3 <= 
        neg_ti3_fu_1467_p2 when (tmp_63_reg_2179(0) = '1') else 
        tmp_65_reg_2253;
    tmp_67_cast_fu_1032_p3 <= 
        ap_const_lv11_C8 when (tmp_135_2_fu_1014_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_67_fu_1220_p3 <= 
        tmp_76_cast_fu_1212_p3 when (tmp_41_fu_1206_p2(0) = '1') else 
        p_Val2_18_reg_547;
    tmp_6_fu_648_p3 <= (tmp_3_fu_645_p1 & tmp_7_fu_636_p4);
    tmp_70_fu_1639_p4 <= neg_mul5_fu_1634_p2(78 downto 63);
    tmp_72_fu_1661_p3 <= 
        neg_ti4_fu_1655_p2 when (tmp_69_reg_2264(0) = '1') else 
        tmp_71_reg_2327;
    tmp_73_fu_1407_p3 <= 
        tmp_85_cast_fu_1399_p3 when (tmp_43_fu_1393_p2(0) = '1') else 
        p_Val2_19_reg_557;
    tmp_76_cast_fu_1212_p3 <= 
        ap_const_lv11_C8 when (tmp_135_3_fu_1194_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_76_fu_1699_p4 <= neg_mul4_fu_1694_p2(76 downto 62);
    tmp_77_fu_1709_p4 <= mul3_reg_2360(76 downto 62);
    tmp_78_fu_1559_p3 <= 
        tmp_94_cast_fu_1551_p3 when (tmp_45_fu_1545_p2(0) = '1') else 
        p_Val2_20_reg_567;
    tmp_7_fu_636_p4 <= SBUS_data_load_2_reg_1996(7 downto 3);
    tmp_81_fu_1799_p4 <= neg_mul_fu_1794_p2(76 downto 62);
    tmp_83_fu_1821_p3 <= 
        neg_ti_fu_1815_p2 when (tmp_80_reg_2338(0) = '1') else 
        tmp_82_reg_2382;
    tmp_84_fu_1758_p4 <= neg_ti9_fu_1725_p2(14 downto 12);
    tmp_85_cast_fu_1399_p3 <= 
        ap_const_lv11_C8 when (tmp_137_4_fu_1381_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_85_fu_1768_p4 <= mul3_reg_2360(76 downto 74);
    tmp_86_fu_1777_p3 <= 
        tmp_84_fu_1758_p4 when (tmp_75_reg_2301(0) = '1') else 
        tmp_85_fu_1768_p4;
    tmp_87_fu_1839_p4 <= tmp_83_fu_1821_p3(14 downto 11);
    tmp_88_fu_1872_p3 <= 
        tmp_103_cast_fu_1865_p3 when (tmp_1_i6_fu_1860_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_8_fu_662_p4 <= SBUS_data_load_3_reg_1934(7 downto 6);
    tmp_94_cast_fu_1551_p3 <= 
        ap_const_lv11_C8 when (tmp_137_5_fu_1533_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_9_fu_608_p2 <= "1" when (SBUS_data_q0 = ap_const_lv8_0) else "0";
    tmp_9_i1_cast_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_fu_952_p3),25));
    tmp_9_i2_cast_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_1048_p3),25));
    tmp_9_i3_cast_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_6_fu_1228_p3),25));
    tmp_9_i4_cast_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_10_fu_1415_p3),25));
    tmp_9_i5_cast_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_13_fu_1567_p3),25));
    tmp_9_i_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_fu_848_p3),25));
    tmp_fu_577_p2 <= "1" when (SBUS_data_q0 = ap_const_lv8_F) else "0";
    tmp_s_fu_1901_p2 <= std_logic_vector(unsigned(errors) + unsigned(ap_const_lv32_1));
        trunc1_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v_v_fu_1274_p3),16));

end behav;
