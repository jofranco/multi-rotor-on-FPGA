-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rcReceiver is
generic (
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_TEST_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_TEST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_TEST_AWVALID : IN STD_LOGIC;
    s_axi_TEST_AWREADY : OUT STD_LOGIC;
    s_axi_TEST_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_WVALID : IN STD_LOGIC;
    s_axi_TEST_WREADY : OUT STD_LOGIC;
    s_axi_TEST_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH/8-1 downto 0);
    s_axi_TEST_ARVALID : IN STD_LOGIC;
    s_axi_TEST_ARREADY : OUT STD_LOGIC;
    s_axi_TEST_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_TEST_ADDR_WIDTH-1 downto 0);
    s_axi_TEST_RVALID : OUT STD_LOGIC;
    s_axi_TEST_RREADY : IN STD_LOGIC;
    s_axi_TEST_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_TEST_DATA_WIDTH-1 downto 0);
    s_axi_TEST_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_TEST_BVALID : OUT STD_LOGIC;
    s_axi_TEST_BREADY : IN STD_LOGIC;
    s_axi_TEST_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of rcReceiver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rcReceiver,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=27,HLS_SYN_TPT=23,HLS_SYN_MEM=12,HLS_SYN_DSP=78,HLS_SYN_FF=3454,HLS_SYN_LUT=3770,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_iter0_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_iter0_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_iter0_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_iter0_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_iter0_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_iter0_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_iter0_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_iter0_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_iter0_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_iter0_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_iter0_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_iter0_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_iter0_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_iter0_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_iter0_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_iter0_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_iter0_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_iter0_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_iter0_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_iter0_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_iter0_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_iter0_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_ST_iter1_fsm_state24 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_iter1_fsm_state25 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_iter1_fsm_state26 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_iter1_fsm_state27 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_iter1_fsm_state28 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_C8 : STD_LOGIC_VECTOR (10 downto 0) := "00011001000";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv28_F380000 : STD_LOGIC_VECTOR (27 downto 0) := "1111001110000000000000000000";
    constant ap_const_lv48_1FFB8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000011111111110111000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv91_28F5C28F5C29 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000001010001111010111000010100011110101110000101001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv91_0 : STD_LOGIC_VECTOR (90 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_70000 : STD_LOGIC_VECTOR (18 downto 0) := "1110000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1800 : STD_LOGIC_VECTOR (15 downto 0) := "0001100000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_iter0_fsm_state23 : STD_LOGIC;
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_sig_ioackin_OUT_r_WREADY : STD_LOGIC;
    signal ap_block_state24_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state24 : STD_LOGIC;
    signal ap_block_state25_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state26_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state28_pp0_stage4_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state28 : STD_LOGIC;
    signal SBUS_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal SBUS_data_ce0 : STD_LOGIC;
    signal SBUS_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal test_V_ce0 : STD_LOGIC;
    signal test_V_we0 : STD_LOGIC;
    signal test_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channels_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal channels_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal lost : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal errors : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_iter0_fsm_state17 : STD_LOGIC;
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_iter0_fsm_state18 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state19 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state20 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state21 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state22 : STD_LOGIC;
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal p_Val2_24_reg_523 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_25_reg_533 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_26_reg_543 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_27_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal SBUS_data_load_3_reg_2014 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state2 : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal SBUS_data_load_4_reg_2025 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state3 : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal SBUS_data_load_7_reg_2035 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state4 : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_iter0_fsm_state5 : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal SBUS_data_load_8_reg_2051 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state6 : STD_LOGIC;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal tmp_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_2061 : STD_LOGIC_VECTOR (0 downto 0);
    signal SBUS_data_load_1_reg_2066 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state7 : STD_LOGIC;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal SBUS_data_load_2_reg_2076 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state8 : STD_LOGIC;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal SBUS_data_load_5_reg_2087 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state9 : STD_LOGIC;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal SBUS_data_load_6_reg_2098 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state10 : STD_LOGIC;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal SBUS_data_load_9_reg_2109 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state11 : STD_LOGIC;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_CS_iter0_fsm_state12 : STD_LOGIC;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal or_cond_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2154 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_2154_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_634_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_685_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_711_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_737_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_786_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_846_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_reg_2183 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_46_cast_fu_860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_iter0_fsm_state13 : STD_LOGIC;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal tmp_27_reg_2193_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_2197 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_34_reg_2202 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_950_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_1_reg_2208 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_48_cast_fu_964_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_iter0_fsm_state14 : STD_LOGIC;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal tmp_42_reg_2228 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_44_reg_2233 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_1063_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_2_reg_2239 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_50_cast_fu_1077_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal mul1_reg_2254 : STD_LOGIC_VECTOR (90 downto 0);
    signal ap_CS_iter0_fsm_state15 : STD_LOGIC;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal tmp_36_reg_2259 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_62_reg_2270 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_63_reg_2275 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1186_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_3_reg_2281 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_52_cast_fu_1200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_reg_2296 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_iter0_fsm_state16 : STD_LOGIC;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal grp_fu_1103_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal mul2_reg_2302 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_59_reg_2307 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_68_reg_2318 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_69_reg_2323 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_1358_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_4_reg_2329 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_54_cast_fu_1372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_2344 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_sig_ioackin_OUT_r_AWREADY : STD_LOGIC;
    signal grp_fu_1275_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal mul4_reg_2350 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_65_reg_2355 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_74_reg_2366 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_75_reg_2371 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1530_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_5_reg_2377 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_56_cast_fu_1544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_reg_2392 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal grp_fu_1447_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal mul5_reg_2398 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_71_reg_2403 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_80_reg_2414 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_81_reg_2419 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_cast_fu_1663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_reg_2435 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal grp_fu_1619_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal mul3_reg_2441 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_77_reg_2446 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_60_cast_fu_1751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1738_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal mul_reg_2467 : STD_LOGIC_VECTOR (90 downto 0);
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal tmp_83_reg_2472 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_85_reg_2478 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_62_cast_fu_1822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i5_reg_2493 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal icmp_fu_1876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_2498 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_2504 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_cast_fu_1898_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_1933_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_87_reg_2519 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal tmp_66_cast_fu_1948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_cast_fu_1972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_Val2_29_phi_fu_508_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_608_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_29_reg_505 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_24_reg_523 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_25_reg_533 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_26_reg_543 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_27_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ioackin_OUT_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_OUT_r_WREADY : STD_LOGIC := '0';
    signal p_Val2_42_cast_fu_1910_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_14_cast_fu_1960_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_1997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1981_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_605_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_622_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_648_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_657_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_671_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_661_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_668_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_679_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_708_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_699_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_734_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_725_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_751_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_772_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_762_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_769_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_780_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_818_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_826_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_s_fu_834_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_i_cast_fu_842_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_46_fu_852_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_cast_fu_873_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_1_fu_880_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_1_fu_880_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_150_1_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_1_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_cast_fu_922_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_930_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_3_fu_938_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_i1_cast_fu_946_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_48_fu_956_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_i_fu_969_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_980_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_1_cast_fu_986_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_4_fu_993_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_4_fu_993_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_150_2_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_2_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_cast_fu_1035_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_1043_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_7_fu_1051_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_i2_cast_fu_1059_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_49_fu_1069_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_i1_fu_1092_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1103_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_2_cast_fu_1109_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_fu_1116_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_8_fu_1116_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_150_3_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_3_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_cast_fu_1158_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_1166_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_11_fu_1174_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_i3_cast_fu_1182_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_50_fu_1192_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_mul1_fu_1205_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_35_fu_1210_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v_v_fu_1220_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_ti1_fu_1226_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_38_fu_1232_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_2_fu_1238_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_i2_fu_1264_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1275_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_3_cast_fu_1281_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_12_fu_1288_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_12_fu_1288_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_146_4_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_4_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_cast_fu_1330_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_73_fu_1338_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_16_fu_1346_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_i4_cast_fu_1354_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_51_fu_1364_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_mul2_fu_1377_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_47_fu_1382_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v1_v_fu_1392_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_ti2_fu_1398_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_60_fu_1404_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_5_fu_1410_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_i3_fu_1436_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1447_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_4_cast_fu_1453_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_17_fu_1460_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_17_fu_1460_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_146_5_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_5_fu_1490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_cast_fu_1502_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_fu_1510_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_19_fu_1518_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_i5_cast_fu_1526_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_52_fu_1536_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_mul3_fu_1549_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_64_fu_1554_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v2_v_fu_1564_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_ti3_fu_1570_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_66_fu_1576_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_9_fu_1582_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_i4_fu_1608_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1619_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_5_cast_fu_1625_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_20_fu_1632_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_20_fu_1632_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_53_fu_1656_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_mul5_fu_1668_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_70_fu_1673_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v3_v_fu_1683_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_ti4_fu_1689_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_72_fu_1695_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_13_fu_1701_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_i5_fu_1727_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_1738_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_54_fu_1744_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_mul4_fu_1756_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_76_fu_1761_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v4_v_fu_1771_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_ti9_fu_1777_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_78_fu_1783_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_18_fu_1789_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_55_fu_1815_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_mul_fu_1827_p2 : STD_LOGIC_VECTOR (90 downto 0);
    signal tmp_82_fu_1832_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v5_v_fu_1842_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal neg_ti_fu_1848_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_84_fu_1854_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_21_fu_1860_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_56_fu_1891_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_22_fu_1903_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp1_fu_1915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i6_fu_1920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_cast_fu_1925_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_57_fu_1941_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_14_fu_1953_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_58_fu_1965_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_980_ce : STD_LOGIC;
    signal grp_fu_1103_ce : STD_LOGIC;
    signal grp_fu_1275_ce : STD_LOGIC;
    signal grp_fu_1447_ce : STD_LOGIC;
    signal grp_fu_1619_ce : STD_LOGIC;
    signal grp_fu_1738_ce : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_12_fu_1288_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_17_fu_1460_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_1_fu_880_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_20_fu_1632_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_4_fu_993_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_8_fu_1116_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_condition_1692 : BOOLEAN;
    signal ap_condition_477 : BOOLEAN;
    signal ap_condition_1697 : BOOLEAN;
    signal ap_condition_610 : BOOLEAN;

    component rcReceiver_mul_45bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (44 downto 0);
        din1 : IN STD_LOGIC_VECTOR (46 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (90 downto 0) );
    end component;


    component rcReceiver_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SBUS_data_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        SBUS_data_ce0 : IN STD_LOGIC;
        SBUS_data_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rcReceiver_TEST_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        test_V_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        test_V_ce0 : IN STD_LOGIC;
        test_V_we0 : IN STD_LOGIC;
        test_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rcReceiver_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    rcReceiver_CTRL_s_axi_U : component rcReceiver_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SBUS_data_address0 => SBUS_data_address0,
        SBUS_data_ce0 => SBUS_data_ce0,
        SBUS_data_q0 => SBUS_data_q0);

    rcReceiver_TEST_s_axi_U : component rcReceiver_TEST_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_TEST_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_TEST_DATA_WIDTH)
    port map (
        AWVALID => s_axi_TEST_AWVALID,
        AWREADY => s_axi_TEST_AWREADY,
        AWADDR => s_axi_TEST_AWADDR,
        WVALID => s_axi_TEST_WVALID,
        WREADY => s_axi_TEST_WREADY,
        WDATA => s_axi_TEST_WDATA,
        WSTRB => s_axi_TEST_WSTRB,
        ARVALID => s_axi_TEST_ARVALID,
        ARREADY => s_axi_TEST_ARREADY,
        ARADDR => s_axi_TEST_ARADDR,
        RVALID => s_axi_TEST_RVALID,
        RREADY => s_axi_TEST_RREADY,
        RDATA => s_axi_TEST_RDATA,
        RRESP => s_axi_TEST_RRESP,
        BVALID => s_axi_TEST_BVALID,
        BREADY => s_axi_TEST_BREADY,
        BRESP => s_axi_TEST_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        test_V_address0 => test_V_address0,
        test_V_ce0 => test_V_ce0,
        test_V_we0 => test_V_we0,
        test_V_d0 => test_V_d0);

    rcReceiver_OUT_r_m_axi_U : component rcReceiver_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_6,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => OUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    rcReceiver_mul_45bkb_U1 : component rcReceiver_mul_45bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 45,
        din1_WIDTH => 47,
        dout_WIDTH => 91)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_i_fu_969_p3,
        din1 => grp_fu_980_p1,
        ce => grp_fu_980_ce,
        dout => grp_fu_980_p2);

    rcReceiver_mul_45bkb_U2 : component rcReceiver_mul_45bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 45,
        din1_WIDTH => 47,
        dout_WIDTH => 91)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_i1_fu_1092_p3,
        din1 => grp_fu_1103_p1,
        ce => grp_fu_1103_ce,
        dout => grp_fu_1103_p2);

    rcReceiver_mul_45bkb_U3 : component rcReceiver_mul_45bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 45,
        din1_WIDTH => 47,
        dout_WIDTH => 91)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_i2_fu_1264_p3,
        din1 => grp_fu_1275_p1,
        ce => grp_fu_1275_ce,
        dout => grp_fu_1275_p2);

    rcReceiver_mul_45bkb_U4 : component rcReceiver_mul_45bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 45,
        din1_WIDTH => 47,
        dout_WIDTH => 91)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_i3_fu_1436_p3,
        din1 => grp_fu_1447_p1,
        ce => grp_fu_1447_ce,
        dout => grp_fu_1447_p2);

    rcReceiver_mul_45bkb_U5 : component rcReceiver_mul_45bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 45,
        din1_WIDTH => 47,
        dout_WIDTH => 91)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_i4_fu_1608_p3,
        din1 => grp_fu_1619_p1,
        ce => grp_fu_1619_ce,
        dout => grp_fu_1619_p2);

    rcReceiver_mul_45bkb_U6 : component rcReceiver_mul_45bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 45,
        din1_WIDTH => 47,
        dout_WIDTH => 91)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_i5_fu_1727_p3,
        din1 => grp_fu_1738_p1,
        ce => grp_fu_1738_ce,
        dout => grp_fu_1738_p2);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then
                    if ((ap_const_boolean_1 = ap_condition_610)) then 
                        ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_boolean_1 = ap_condition_1697)) then 
                        ap_reg_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_OUT_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
            else
                if (((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_0;
                elsif (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
                    ap_reg_ioackin_OUT_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_p_Val2_23_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_477)) then
                if ((or_cond_fu_600_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 <= channels_1;
                elsif ((or_cond_fu_600_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 <= tmp_9_fu_634_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_24_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_477)) then
                if ((or_cond_fu_600_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_24_reg_523 <= channels_2;
                elsif ((or_cond_fu_600_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_24_reg_523 <= tmp_13_fu_685_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_25_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_477)) then
                if ((or_cond_fu_600_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_25_reg_533 <= channels_3;
                elsif ((or_cond_fu_600_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_25_reg_533 <= tmp_16_fu_711_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_26_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_477)) then
                if ((or_cond_fu_600_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_26_reg_543 <= channels_4;
                elsif ((or_cond_fu_600_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_26_reg_543 <= tmp_19_fu_737_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_27_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_477)) then
                if ((or_cond_fu_600_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_27_reg_553 <= channels_5;
                elsif ((or_cond_fu_600_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_p_Val2_27_reg_553 <= tmp_26_fu_786_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state7))) then
                SBUS_data_load_1_reg_2066 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state8))) then
                SBUS_data_load_2_reg_2076 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2))) then
                SBUS_data_load_3_reg_2014 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3))) then
                SBUS_data_load_4_reg_2025 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state9))) then
                SBUS_data_load_5_reg_2087 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state10))) then
                SBUS_data_load_6_reg_2098 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                SBUS_data_load_7_reg_2035 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state5))) then
                SBUS_data_load_8_reg_2051 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state11))) then
                SBUS_data_load_9_reg_2109 <= SBUS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21))) then
                agg_result_i5_reg_2493 <= p_Val2_21_fu_1860_p2(18 downto 3);
                icmp_reg_2498 <= icmp_fu_1876_p2;
                tmp_86_reg_2504 <= p_Val2_21_fu_1860_p2(18 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (or_cond_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12))) then
                channels_0 <= tmp_2_fu_608_p3;
                channels_1 <= tmp_9_fu_634_p3;
                channels_2 <= tmp_13_fu_685_p3;
                channels_3 <= tmp_16_fu_711_p3;
                channels_4 <= tmp_19_fu_737_p3;
                channels_5 <= tmp_26_fu_786_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_2154_pp0_iter0_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID))) then
                errors <= tmp_12_fu_1981_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_reg_2193_pp0_iter0_reg = ap_const_lv1_1) and (or_cond_reg_2154_pp0_iter0_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID))) then
                lost <= tmp_28_fu_1997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15))) then
                mul1_reg_2254 <= grp_fu_980_p2;
                    r_V_3_reg_2281(27 downto 16) <= r_V_3_fu_1186_p2(27 downto 16);
                tmp_36_reg_2259 <= grp_fu_980_p2(90 downto 72);
                tmp_62_reg_2270 <= p_Val2_8_fu_1116_p2(44 downto 16);
                tmp_63_reg_2275 <= p_Val2_8_fu_1116_p2(44 downto 44);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16))) then
                mul2_reg_2302 <= grp_fu_1103_p2;
                p_Val2_28_reg_2296 <= p_Val2_2_fu_1238_p2(18 downto 3);
                    r_V_4_reg_2329(27 downto 16) <= r_V_4_fu_1358_p2(27 downto 16);
                tmp_59_reg_2307 <= grp_fu_1103_p2(90 downto 72);
                tmp_68_reg_2318 <= p_Val2_12_fu_1288_p2(44 downto 16);
                tmp_69_reg_2323 <= p_Val2_12_fu_1288_p2(44 downto 44);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19))) then
                mul3_reg_2441 <= grp_fu_1619_p2;
                p_Val2_15_reg_2435 <= p_Val2_13_fu_1701_p2(18 downto 3);
                tmp_77_reg_2446 <= grp_fu_1619_p2(90 downto 72);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17))) then
                mul4_reg_2350 <= grp_fu_1275_p2;
                p_Val2_6_reg_2344 <= p_Val2_5_fu_1410_p2(18 downto 3);
                    r_V_5_reg_2377(27 downto 16) <= r_V_5_fu_1530_p2(27 downto 16);
                tmp_65_reg_2355 <= grp_fu_1275_p2(90 downto 72);
                tmp_74_reg_2366 <= p_Val2_17_fu_1460_p2(44 downto 16);
                tmp_75_reg_2371 <= p_Val2_17_fu_1460_p2(44 downto 44);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18))) then
                mul5_reg_2398 <= grp_fu_1447_p2;
                p_Val2_10_reg_2392 <= p_Val2_9_fu_1582_p2(18 downto 3);
                tmp_71_reg_2403 <= grp_fu_1447_p2(90 downto 72);
                tmp_80_reg_2414 <= p_Val2_20_fu_1632_p2(44 downto 16);
                tmp_81_reg_2419 <= p_Val2_20_fu_1632_p2(44 downto 44);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20))) then
                mul_reg_2467 <= grp_fu_1738_p2;
                tmp_83_reg_2472 <= grp_fu_1738_p2(90 downto 72);
                tmp_85_reg_2478 <= p_Val2_18_fu_1789_p2(18 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12))) then
                or_cond_reg_2154 <= or_cond_fu_600_p2;
                    r_V_reg_2183(27 downto 16) <= r_V_fu_846_p2(27 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))) then
                or_cond_reg_2154_pp0_iter0_reg <= or_cond_reg_2154;
                tmp_27_reg_2193_pp0_iter0_reg <= tmp_27_reg_2193;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13))) then
                p_Val2_24_reg_523 <= ap_phi_reg_pp0_iter0_p_Val2_24_reg_523;
                p_Val2_25_reg_533 <= ap_phi_reg_pp0_iter0_p_Val2_25_reg_533;
                p_Val2_26_reg_543 <= ap_phi_reg_pp0_iter0_p_Val2_26_reg_543;
                p_Val2_27_reg_553 <= ap_phi_reg_pp0_iter0_p_Val2_27_reg_553;
                    r_V_1_reg_2208(27 downto 16) <= r_V_1_fu_950_p2(27 downto 16);
                tmp_33_reg_2197 <= p_Val2_1_fu_880_p2(44 downto 16);
                tmp_34_reg_2202 <= p_Val2_1_fu_880_p2(44 downto 44);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14))) then
                    r_V_2_reg_2239(27 downto 16) <= r_V_2_fu_1063_p2(27 downto 16);
                tmp_42_reg_2228 <= p_Val2_4_fu_993_p2(44 downto 16);
                tmp_44_reg_2233 <= p_Val2_4_fu_993_p2(44 downto 44);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (or_cond_reg_2154 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13))) then
                tmp_27_reg_2193 <= SBUS_data_q0(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22))) then
                tmp_87_reg_2519 <= tmp_87_fu_1933_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state6))) then
                tmp_reg_2061 <= tmp_fu_563_p2;
            end if;
        end if;
    end process;
    r_V_reg_2183(15 downto 0) <= "0000000000000000";
    r_V_1_reg_2208(15 downto 0) <= "0000000000000000";
    r_V_2_reg_2239(15 downto 0) <= "0000000000000000";
    r_V_3_reg_2281(15 downto 0) <= "0000000000000000";
    r_V_4_reg_2329(15 downto 0) <= "0000000000000000";
    r_V_5_reg_2377(15 downto 0) <= "0000000000000000";

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, ap_CS_iter0_fsm_state1, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state5, ap_CS_iter0_fsm_state6, ap_CS_iter0_fsm_state7, ap_CS_iter0_fsm_state8, ap_CS_iter0_fsm_state9, ap_CS_iter0_fsm_state10, ap_CS_iter0_fsm_state11, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state2;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
                end if;
            when ap_ST_iter0_fsm_state2 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state3;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state2;
                end if;
            when ap_ST_iter0_fsm_state3 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state4;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state3;
                end if;
            when ap_ST_iter0_fsm_state4 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state5;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state4;
                end if;
            when ap_ST_iter0_fsm_state5 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state5))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state6;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state5;
                end if;
            when ap_ST_iter0_fsm_state6 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state6))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state7;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state6;
                end if;
            when ap_ST_iter0_fsm_state7 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state7))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state8;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state7;
                end if;
            when ap_ST_iter0_fsm_state8 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state8))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state9;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state8;
                end if;
            when ap_ST_iter0_fsm_state9 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state9))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state10;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state9;
                end if;
            when ap_ST_iter0_fsm_state10 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state10))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state11;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state10;
                end if;
            when ap_ST_iter0_fsm_state11 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state11))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state12;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state11;
                end if;
            when ap_ST_iter0_fsm_state12 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state13;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state12;
                end if;
            when ap_ST_iter0_fsm_state13 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state14;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state13;
                end if;
            when ap_ST_iter0_fsm_state14 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state15;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state14;
                end if;
            when ap_ST_iter0_fsm_state15 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state16;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state15;
                end if;
            when ap_ST_iter0_fsm_state16 => 
                if ((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state17;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state16;
                end if;
            when ap_ST_iter0_fsm_state17 => 
                if ((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state18;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state17;
                end if;
            when ap_ST_iter0_fsm_state18 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state19;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state18;
                end if;
            when ap_ST_iter0_fsm_state19 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state20;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state19;
                end if;
            when ap_ST_iter0_fsm_state20 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state21;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state20;
                end if;
            when ap_ST_iter0_fsm_state21 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state22;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state21;
                end if;
            when ap_ST_iter0_fsm_state22 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state23;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state22;
                end if;
            when ap_ST_iter0_fsm_state23 => 
                if (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state23;
                end if;
            when others =>  
                ap_NS_iter0_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_CS_iter1_fsm, ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state24 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state25;
            when ap_ST_iter1_fsm_state25 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state26;
            when ap_ST_iter1_fsm_state26 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state27;
            when ap_ST_iter1_fsm_state27 => 
                ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state28;
            when ap_ST_iter1_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_iter0_fsm_state23) and (ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = OUT_r_BVALID))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state24;
                elsif (((ap_const_logic_1 = OUT_r_BVALID) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state23) or ((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state28;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state24;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XXXXXX";
        end case;
    end process;

    OUT_r_AWVALID_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state17, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((not((((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WDATA_assign_proc : process(ap_CS_iter0_fsm_state23, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, p_Val2_28_reg_2296, p_Val2_6_reg_2344, p_Val2_10_reg_2392, p_Val2_15_reg_2435, p_Val2_42_cast_fu_1910_p1, p_Val2_14_cast_fu_1960_p1, ap_condition_1692)
    begin
        if ((ap_const_boolean_1 = ap_condition_1692)) then
            if ((ap_const_logic_1 = ap_CS_iter0_fsm_state23)) then 
                OUT_r_WDATA <= p_Val2_14_cast_fu_1960_p1;
            elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state22)) then 
                OUT_r_WDATA <= p_Val2_42_cast_fu_1910_p1;
            elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state21)) then 
                OUT_r_WDATA <= p_Val2_15_reg_2435;
            elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state20)) then 
                OUT_r_WDATA <= p_Val2_10_reg_2392;
            elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state19)) then 
                OUT_r_WDATA <= p_Val2_6_reg_2344;
            elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state18)) then 
                OUT_r_WDATA <= p_Val2_28_reg_2296;
            else 
                OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_iter0_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(ap_CS_iter1_fsm_state28, m_axi_OUT_r_BVALID)
    begin
        if ((ap_const_logic_1 = ap_CS_iter1_fsm_state28)) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(ap_CS_iter0_fsm_state23, m_axi_OUT_r_WREADY, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state23) or (ap_const_logic_1 = ap_CS_iter0_fsm_state22) or (ap_const_logic_1 = ap_CS_iter0_fsm_state21) or (ap_const_logic_1 = ap_CS_iter0_fsm_state20) or (ap_const_logic_1 = ap_CS_iter0_fsm_state19) or (ap_const_logic_1 = ap_CS_iter0_fsm_state18))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    SBUS_data_address0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state5, ap_CS_iter0_fsm_state6, ap_CS_iter0_fsm_state7, ap_CS_iter0_fsm_state8, ap_CS_iter0_fsm_state9, ap_CS_iter0_fsm_state10, ap_CS_iter0_fsm_state11, ap_CS_iter0_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then 
            SBUS_data_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state11)) then 
            SBUS_data_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state10)) then 
            SBUS_data_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state9)) then 
            SBUS_data_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state8)) then 
            SBUS_data_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state7)) then 
            SBUS_data_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state6)) then 
            SBUS_data_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state5)) then 
            SBUS_data_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state4)) then 
            SBUS_data_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state3)) then 
            SBUS_data_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state2)) then 
            SBUS_data_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            SBUS_data_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        else 
            SBUS_data_address0 <= "XXXXX";
        end if; 
    end process;


    SBUS_data_ce0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state5, ap_CS_iter0_fsm_state6, ap_CS_iter0_fsm_state7, ap_CS_iter0_fsm_state8, ap_CS_iter0_fsm_state9, ap_CS_iter0_fsm_state10, ap_CS_iter0_fsm_state11, ap_CS_iter0_fsm_state12)
    begin
        if (((not(((ap_start = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state11)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state10)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state9)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state8)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state7)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state6)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state5)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2)))) then 
            SBUS_data_ce0 <= ap_const_logic_1;
        else 
            SBUS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter0_fsm_state10 <= ap_CS_iter0_fsm(9);
    ap_CS_iter0_fsm_state11 <= ap_CS_iter0_fsm(10);
    ap_CS_iter0_fsm_state12 <= ap_CS_iter0_fsm(11);
    ap_CS_iter0_fsm_state13 <= ap_CS_iter0_fsm(12);
    ap_CS_iter0_fsm_state14 <= ap_CS_iter0_fsm(13);
    ap_CS_iter0_fsm_state15 <= ap_CS_iter0_fsm(14);
    ap_CS_iter0_fsm_state16 <= ap_CS_iter0_fsm(15);
    ap_CS_iter0_fsm_state17 <= ap_CS_iter0_fsm(16);
    ap_CS_iter0_fsm_state18 <= ap_CS_iter0_fsm(17);
    ap_CS_iter0_fsm_state19 <= ap_CS_iter0_fsm(18);
    ap_CS_iter0_fsm_state2 <= ap_CS_iter0_fsm(1);
    ap_CS_iter0_fsm_state20 <= ap_CS_iter0_fsm(19);
    ap_CS_iter0_fsm_state21 <= ap_CS_iter0_fsm(20);
    ap_CS_iter0_fsm_state22 <= ap_CS_iter0_fsm(21);
    ap_CS_iter0_fsm_state23 <= ap_CS_iter0_fsm(22);
    ap_CS_iter0_fsm_state3 <= ap_CS_iter0_fsm(2);
    ap_CS_iter0_fsm_state4 <= ap_CS_iter0_fsm(3);
    ap_CS_iter0_fsm_state5 <= ap_CS_iter0_fsm(4);
    ap_CS_iter0_fsm_state6 <= ap_CS_iter0_fsm(5);
    ap_CS_iter0_fsm_state7 <= ap_CS_iter0_fsm(6);
    ap_CS_iter0_fsm_state8 <= ap_CS_iter0_fsm(7);
    ap_CS_iter0_fsm_state9 <= ap_CS_iter0_fsm(8);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state24 <= ap_CS_iter1_fsm(1);
    ap_CS_iter1_fsm_state28 <= ap_CS_iter1_fsm(5);
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage16_iter0_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28)
    begin
                ap_block_state17_pp0_stage16_iter0 <= ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID));
    end process;

        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_pp0_stage4_iter1_assign_proc : process(OUT_r_BVALID)
    begin
                ap_block_state28_pp0_stage4_iter1 <= (ap_const_logic_0 = OUT_r_BVALID);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1692_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_reg_ioackin_OUT_r_WREADY)
    begin
                ap_condition_1692 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0));
    end process;


    ap_condition_1697_assign_proc : process(OUT_r_AWREADY, OUT_r_BVALID, ap_CS_iter1_fsm_state28)
    begin
                ap_condition_1697 <= (not((((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = OUT_r_AWREADY));
    end process;


    ap_condition_477_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state12)
    begin
                ap_condition_477 <= (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12));
    end process;


    ap_condition_610_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_sig_ioackin_OUT_r_AWREADY)
    begin
                ap_condition_610 <= not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))));
    end process;


    ap_done_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_29_phi_fu_508_p4_assign_proc : process(channels_0, ap_CS_iter0_fsm_state12, or_cond_fu_600_p2, tmp_2_fu_608_p3, ap_phi_reg_pp0_iter0_p_Val2_29_reg_505)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then
            if ((or_cond_fu_600_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_29_phi_fu_508_p4 <= channels_0;
            elsif ((or_cond_fu_600_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_29_phi_fu_508_p4 <= tmp_2_fu_608_p3;
            else 
                ap_phi_mux_p_Val2_29_phi_fu_508_p4 <= ap_phi_reg_pp0_iter0_p_Val2_29_reg_505;
            end if;
        else 
            ap_phi_mux_p_Val2_29_phi_fu_508_p4 <= ap_phi_reg_pp0_iter0_p_Val2_29_reg_505;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_29_reg_505 <= "XXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28)
    begin
        if ((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_OUT_r_AWREADY_assign_proc : process(OUT_r_AWREADY, ap_reg_ioackin_OUT_r_AWREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_AWREADY <= OUT_r_AWREADY;
        else 
            ap_sig_ioackin_OUT_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_OUT_r_WREADY_assign_proc : process(OUT_r_WREADY, ap_reg_ioackin_OUT_r_WREADY)
    begin
        if ((ap_reg_ioackin_OUT_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_OUT_r_WREADY <= OUT_r_WREADY;
        else 
            ap_sig_ioackin_OUT_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1103_ce_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16)
    begin
        if (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)))) then 
            grp_fu_1103_ce <= ap_const_logic_1;
        else 
            grp_fu_1103_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1103_p1 <= ap_const_lv91_28F5C28F5C29(47 - 1 downto 0);

    grp_fu_1275_ce_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)))) then 
            grp_fu_1275_ce <= ap_const_logic_1;
        else 
            grp_fu_1275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1275_p1 <= ap_const_lv91_28F5C28F5C29(47 - 1 downto 0);

    grp_fu_1447_ce_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
            grp_fu_1447_ce <= ap_const_logic_1;
        else 
            grp_fu_1447_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1447_p1 <= ap_const_lv91_28F5C28F5C29(47 - 1 downto 0);

    grp_fu_1619_ce_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
            grp_fu_1619_ce <= ap_const_logic_1;
        else 
            grp_fu_1619_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1619_p1 <= ap_const_lv91_28F5C28F5C29(47 - 1 downto 0);

    grp_fu_1738_ce_assign_proc : process(OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)))) then 
            grp_fu_1738_ce <= ap_const_logic_1;
        else 
            grp_fu_1738_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1738_p1 <= ap_const_lv91_28F5C28F5C29(47 - 1 downto 0);

    grp_fu_980_ce_assign_proc : process(OUT_r_BVALID, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15)
    begin
        if (((not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14)))) then 
            grp_fu_980_ce <= ap_const_logic_1;
        else 
            grp_fu_980_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_980_p1 <= ap_const_lv91_28F5C28F5C29(47 - 1 downto 0);
    icmp1_fu_1915_p2 <= "1" when (signed(tmp_86_reg_2504) < signed(ap_const_lv5_1)) else "0";
    icmp_fu_1876_p2 <= "1" when (signed(tmp_85_reg_2478) > signed(ap_const_lv4_0)) else "0";
    neg_mul1_fu_1205_p2 <= std_logic_vector(unsigned(ap_const_lv91_0) - unsigned(mul1_reg_2254));
    neg_mul2_fu_1377_p2 <= std_logic_vector(unsigned(ap_const_lv91_0) - unsigned(mul2_reg_2302));
    neg_mul3_fu_1549_p2 <= std_logic_vector(unsigned(ap_const_lv91_0) - unsigned(mul4_reg_2350));
    neg_mul4_fu_1756_p2 <= std_logic_vector(unsigned(ap_const_lv91_0) - unsigned(mul3_reg_2441));
    neg_mul5_fu_1668_p2 <= std_logic_vector(unsigned(ap_const_lv91_0) - unsigned(mul5_reg_2398));
    neg_mul_fu_1827_p2 <= std_logic_vector(unsigned(ap_const_lv91_0) - unsigned(mul_reg_2467));
    neg_ti1_fu_1226_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_v_v_fu_1220_p3));
    neg_ti2_fu_1398_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_v1_v_fu_1392_p3));
    neg_ti3_fu_1570_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_v2_v_fu_1564_p3));
    neg_ti4_fu_1689_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_v3_v_fu_1683_p3));
    neg_ti9_fu_1777_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_v4_v_fu_1771_p3));
    neg_ti_fu_1848_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(p_v5_v_fu_1842_p3));
    or_cond_fu_600_p2 <= (tmp_s_fu_594_p2 and tmp_reg_2061);
    p_Val2_11_fu_1174_p3 <= (tmp_67_fu_1166_p3 & ap_const_lv16_0);
    p_Val2_12_fu_1288_p0 <= p_Val2_12_fu_1288_p00(33 - 1 downto 0);
    p_Val2_12_fu_1288_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_cast_fu_1281_p1),48));
    p_Val2_12_fu_1288_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_12_fu_1288_p0) * unsigned(ap_const_lv48_1FFB8), 48));
    p_Val2_13_fu_1701_p2 <= std_logic_vector(unsigned(tmp_72_fu_1695_p3) + unsigned(ap_const_lv19_70000));
    p_Val2_14_cast_fu_1960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_14_fu_1953_p3),16));
    p_Val2_14_fu_1953_p3 <= (tmp_87_reg_2519 & ap_const_lv13_0);
    p_Val2_16_fu_1346_p3 <= (tmp_73_fu_1338_p3 & ap_const_lv16_0);
    p_Val2_17_fu_1460_p0 <= p_Val2_17_fu_1460_p00(33 - 1 downto 0);
    p_Val2_17_fu_1460_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_cast_fu_1453_p1),48));
    p_Val2_17_fu_1460_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_17_fu_1460_p0) * unsigned(ap_const_lv48_1FFB8), 48));
    p_Val2_18_fu_1789_p2 <= std_logic_vector(unsigned(tmp_78_fu_1783_p3) + unsigned(ap_const_lv19_70000));
    p_Val2_19_fu_1518_p3 <= (tmp_79_fu_1510_p3 & ap_const_lv16_0);
    p_Val2_1_fu_880_p0 <= p_Val2_1_fu_880_p00(33 - 1 downto 0);
    p_Val2_1_fu_880_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_cast_fu_873_p1),48));
    p_Val2_1_fu_880_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_1_fu_880_p0) * unsigned(ap_const_lv48_1FFB8), 48));
    p_Val2_20_fu_1632_p0 <= p_Val2_20_fu_1632_p00(33 - 1 downto 0);
    p_Val2_20_fu_1632_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_cast_fu_1625_p1),48));
    p_Val2_20_fu_1632_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_20_fu_1632_p0) * unsigned(ap_const_lv48_1FFB8), 48));
    p_Val2_21_fu_1860_p2 <= std_logic_vector(unsigned(tmp_84_fu_1854_p3) + unsigned(ap_const_lv19_70000));
    p_Val2_22_fu_1903_p3 <= (icmp_reg_2498 & ap_const_lv13_0);
    p_Val2_2_fu_1238_p2 <= std_logic_vector(unsigned(tmp_38_fu_1232_p3) + unsigned(ap_const_lv19_70000));
    p_Val2_3_fu_938_p3 <= (tmp_40_fu_930_p3 & ap_const_lv16_0);
    p_Val2_42_cast_fu_1910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_22_fu_1903_p3),16));
    p_Val2_4_fu_993_p0 <= p_Val2_4_fu_993_p00(33 - 1 downto 0);
    p_Val2_4_fu_993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_cast_fu_986_p1),48));
    p_Val2_4_fu_993_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_993_p0) * unsigned(ap_const_lv48_1FFB8), 48));
    p_Val2_5_fu_1410_p2 <= std_logic_vector(unsigned(tmp_60_fu_1404_p3) + unsigned(ap_const_lv19_70000));
    p_Val2_7_fu_1051_p3 <= (tmp_61_fu_1043_p3 & ap_const_lv16_0);
    p_Val2_8_fu_1116_p0 <= p_Val2_8_fu_1116_p00(33 - 1 downto 0);
    p_Val2_8_fu_1116_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_cast_fu_1109_p1),48));
    p_Val2_8_fu_1116_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_fu_1116_p0) * unsigned(ap_const_lv48_1FFB8), 48));
    p_Val2_9_fu_1582_p2 <= std_logic_vector(unsigned(tmp_66_fu_1576_p3) + unsigned(ap_const_lv19_70000));
    p_Val2_s_fu_834_p3 <= (tmp_32_fu_826_p3 & ap_const_lv16_0);
    p_v1_v_fu_1392_p3 <= 
        tmp_47_fu_1382_p4 when (tmp_44_reg_2233(0) = '1') else 
        tmp_59_reg_2307;
    p_v2_v_fu_1564_p3 <= 
        tmp_64_fu_1554_p4 when (tmp_63_reg_2275(0) = '1') else 
        tmp_65_reg_2355;
    p_v3_v_fu_1683_p3 <= 
        tmp_70_fu_1673_p4 when (tmp_69_reg_2323(0) = '1') else 
        tmp_71_reg_2403;
    p_v4_v_fu_1771_p3 <= 
        tmp_76_fu_1761_p4 when (tmp_75_reg_2371(0) = '1') else 
        tmp_77_reg_2446;
    p_v5_v_fu_1842_p3 <= 
        tmp_82_fu_1832_p4 when (tmp_81_reg_2419(0) = '1') else 
        tmp_83_reg_2472;
    p_v_v_fu_1220_p3 <= 
        tmp_35_fu_1210_p4 when (tmp_34_reg_2202(0) = '1') else 
        tmp_36_reg_2259;
        r_V_1_cast_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_2208),33));

    r_V_1_fu_950_p2 <= std_logic_vector(unsigned(tmp_1_i1_cast_fu_946_p1) + unsigned(ap_const_lv28_F380000));
        r_V_2_cast_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_2239),33));

    r_V_2_fu_1063_p2 <= std_logic_vector(unsigned(tmp_1_i2_cast_fu_1059_p1) + unsigned(ap_const_lv28_F380000));
        r_V_3_cast_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_reg_2281),33));

    r_V_3_fu_1186_p2 <= std_logic_vector(unsigned(tmp_1_i3_cast_fu_1182_p1) + unsigned(ap_const_lv28_F380000));
        r_V_4_cast_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_reg_2329),33));

    r_V_4_fu_1358_p2 <= std_logic_vector(unsigned(tmp_1_i4_cast_fu_1354_p1) + unsigned(ap_const_lv28_F380000));
        r_V_5_cast_fu_1625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_reg_2377),33));

    r_V_5_fu_1530_p2 <= std_logic_vector(unsigned(tmp_1_i5_cast_fu_1526_p1) + unsigned(ap_const_lv28_F380000));
        r_V_cast_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_2183),33));

    r_V_fu_846_p2 <= std_logic_vector(unsigned(tmp_1_i_cast_fu_842_p1) + unsigned(ap_const_lv28_F380000));

    test_V_address0_assign_proc : process(ap_CS_iter0_fsm_state23, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state23)) then 
            test_V_address0 <= ap_const_lv64_B(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state22)) then 
            test_V_address0 <= ap_const_lv64_A(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state21)) then 
            test_V_address0 <= ap_const_lv64_9(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state20)) then 
            test_V_address0 <= ap_const_lv64_8(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state19)) then 
            test_V_address0 <= ap_const_lv64_7(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state18)) then 
            test_V_address0 <= ap_const_lv64_6(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then 
            test_V_address0 <= ap_const_lv64_5(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state16)) then 
            test_V_address0 <= ap_const_lv64_4(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state15)) then 
            test_V_address0 <= ap_const_lv64_3(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state14)) then 
            test_V_address0 <= ap_const_lv64_2(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state13)) then 
            test_V_address0 <= ap_const_lv64_1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then 
            test_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        else 
            test_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    test_V_ce0_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state24, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state24) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
            test_V_ce0 <= ap_const_logic_1;
        else 
            test_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_V_d0_assign_proc : process(ap_CS_iter0_fsm_state23, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, tmp_46_cast_fu_860_p1, ap_CS_iter0_fsm_state13, tmp_48_cast_fu_964_p1, ap_CS_iter0_fsm_state14, tmp_50_cast_fu_1077_p1, ap_CS_iter0_fsm_state15, tmp_52_cast_fu_1200_p1, ap_CS_iter0_fsm_state16, tmp_54_cast_fu_1372_p1, tmp_56_cast_fu_1544_p1, tmp_58_cast_fu_1663_p1, tmp_60_cast_fu_1751_p1, tmp_62_cast_fu_1822_p1, tmp_64_cast_fu_1898_p1, tmp_66_cast_fu_1948_p1, tmp_68_cast_fu_1972_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state23)) then 
            test_V_d0 <= tmp_68_cast_fu_1972_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state22)) then 
            test_V_d0 <= tmp_66_cast_fu_1948_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state21)) then 
            test_V_d0 <= tmp_64_cast_fu_1898_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state20)) then 
            test_V_d0 <= tmp_62_cast_fu_1822_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state19)) then 
            test_V_d0 <= tmp_60_cast_fu_1751_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state18)) then 
            test_V_d0 <= tmp_58_cast_fu_1663_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state17)) then 
            test_V_d0 <= tmp_56_cast_fu_1544_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state16)) then 
            test_V_d0 <= tmp_54_cast_fu_1372_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state15)) then 
            test_V_d0 <= tmp_52_cast_fu_1200_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state14)) then 
            test_V_d0 <= tmp_50_cast_fu_1077_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state13)) then 
            test_V_d0 <= tmp_48_cast_fu_964_p1;
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state12)) then 
            test_V_d0 <= tmp_46_cast_fu_860_p1;
        else 
            test_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_V_we0_assign_proc : process(ap_CS_iter0_fsm_state23, OUT_r_BVALID, ap_sig_ioackin_OUT_r_WREADY, ap_CS_iter1_fsm_state28, ap_CS_iter0_fsm_state17, ap_CS_iter0_fsm_state18, ap_CS_iter0_fsm_state19, ap_CS_iter0_fsm_state20, ap_CS_iter0_fsm_state21, ap_CS_iter0_fsm_state22, ap_CS_iter0_fsm_state12, ap_CS_iter0_fsm_state13, ap_CS_iter0_fsm_state14, ap_CS_iter0_fsm_state15, ap_CS_iter0_fsm_state16, ap_sig_ioackin_OUT_r_AWREADY)
    begin
        if (((not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state23)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state16)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state15)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state14)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state13)) or (not(((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state12)) or (not(((ap_sig_ioackin_OUT_r_AWREADY = ap_const_logic_0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state28) and (ap_const_logic_1 = OUT_r_BVALID)) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state17)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state22)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state21)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state20)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state19)) or (not(((ap_sig_ioackin_OUT_r_WREADY = ap_const_logic_0) or ((ap_const_logic_0 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_iter1_fsm_state28)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state18)))) then 
            test_V_we0 <= ap_const_logic_1;
        else 
            test_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_103_cast_fu_1925_p3 <= 
        ap_const_lv2_0 when (icmp1_fu_1915_p2(0) = '1') else 
        ap_const_lv2_1;
    tmp_10_fu_671_p3 <= (ap_const_lv2_0 & tmp_4_fu_657_p1);
    tmp_11_fu_679_p2 <= (tmp_8_fu_661_p3 or tmp_10_fu_671_p3);
    tmp_12_fu_1981_p2 <= std_logic_vector(unsigned(errors) + unsigned(ap_const_lv32_1));
    tmp_13_fu_685_p3 <= (tmp_7_fu_668_p1 & tmp_11_fu_679_p2);
    tmp_146_4_fu_1312_p2 <= "1" when (unsigned(p_Val2_26_reg_543) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_146_5_fu_1484_p2 <= "1" when (unsigned(p_Val2_27_reg_553) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_14_fu_699_p4 <= SBUS_data_load_5_reg_2087(7 downto 1);
    tmp_150_1_fu_904_p2 <= "1" when (unsigned(ap_phi_reg_pp0_iter0_p_Val2_23_reg_514) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_150_2_fu_1017_p2 <= "1" when (unsigned(p_Val2_24_reg_523) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_150_3_fu_1140_p2 <= "1" when (unsigned(p_Val2_25_reg_533) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_151_1_fu_910_p2 <= "1" when (unsigned(ap_phi_reg_pp0_iter0_p_Val2_23_reg_514) > unsigned(ap_const_lv11_708)) else "0";
    tmp_151_2_fu_1023_p2 <= "1" when (unsigned(p_Val2_24_reg_523) > unsigned(ap_const_lv11_708)) else "0";
    tmp_151_3_fu_1146_p2 <= "1" when (unsigned(p_Val2_25_reg_533) > unsigned(ap_const_lv11_708)) else "0";
    tmp_151_4_fu_1318_p2 <= "1" when (unsigned(p_Val2_26_reg_543) > unsigned(ap_const_lv11_708)) else "0";
    tmp_151_5_fu_1490_p2 <= "1" when (unsigned(p_Val2_27_reg_553) > unsigned(ap_const_lv11_708)) else "0";
    tmp_15_fu_708_p1 <= SBUS_data_load_6_reg_2098(4 - 1 downto 0);
    tmp_16_fu_711_p3 <= (tmp_15_fu_708_p1 & tmp_14_fu_699_p4);
    tmp_17_fu_725_p4 <= SBUS_data_load_6_reg_2098(7 downto 4);
    tmp_18_fu_734_p1 <= SBUS_data_load_7_reg_2035(7 - 1 downto 0);
    tmp_19_fu_737_p3 <= (tmp_18_fu_734_p1 & tmp_17_fu_725_p4);
    tmp_1_fu_605_p1 <= SBUS_data_load_2_reg_2076(3 - 1 downto 0);
    tmp_1_i1_cast_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_fu_938_p3),28));
    tmp_1_i2_cast_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_fu_1051_p3),28));
    tmp_1_i3_cast_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_11_fu_1174_p3),28));
    tmp_1_i4_cast_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_16_fu_1346_p3),28));
    tmp_1_i5_cast_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_19_fu_1518_p3),28));
    tmp_1_i6_fu_1920_p2 <= "1" when (signed(agg_result_i5_reg_2493) < signed(ap_const_lv16_1800)) else "0";
    tmp_1_i_cast_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_fu_834_p3),28));
    tmp_20_fu_751_p3 <= SBUS_data_load_7_reg_2035(7 downto 7);
    tmp_21_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_751_p3),8));
    tmp_22_fu_762_p3 <= (SBUS_data_load_8_reg_2051 & ap_const_lv1_0);
    tmp_23_fu_769_p1 <= SBUS_data_load_9_reg_2109(2 - 1 downto 0);
    tmp_24_fu_772_p3 <= (ap_const_lv1_0 & tmp_21_fu_758_p1);
    tmp_25_fu_780_p2 <= (tmp_24_fu_772_p3 or tmp_22_fu_762_p3);
    tmp_26_fu_786_p3 <= (tmp_23_fu_769_p1 & tmp_25_fu_780_p2);
    tmp_28_fu_1997_p2 <= std_logic_vector(unsigned(lost) + unsigned(ap_const_lv32_1));
    tmp_29_fu_800_p2 <= "1" when (unsigned(ap_phi_mux_p_Val2_29_phi_fu_508_p4) < unsigned(ap_const_lv11_C8)) else "0";
    tmp_2_fu_608_p3 <= (tmp_1_fu_605_p1 & SBUS_data_load_1_reg_2066);
    tmp_30_fu_806_p2 <= "1" when (unsigned(ap_phi_mux_p_Val2_29_phi_fu_508_p4) > unsigned(ap_const_lv11_708)) else "0";
    tmp_31_fu_812_p2 <= (tmp_30_fu_806_p2 or tmp_29_fu_800_p2);
    tmp_32_cast_fu_818_p3 <= 
        ap_const_lv11_C8 when (tmp_29_fu_800_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_32_fu_826_p3 <= 
        tmp_32_cast_fu_818_p3 when (tmp_31_fu_812_p2(0) = '1') else 
        ap_phi_mux_p_Val2_29_phi_fu_508_p4;
    tmp_35_fu_1210_p4 <= neg_mul1_fu_1205_p2(90 downto 72);
    tmp_37_fu_916_p2 <= (tmp_151_1_fu_910_p2 or tmp_150_1_fu_904_p2);
    tmp_38_fu_1232_p3 <= 
        neg_ti1_fu_1226_p2 when (tmp_34_reg_2202(0) = '1') else 
        tmp_36_reg_2259;
    tmp_39_fu_1029_p2 <= (tmp_151_2_fu_1023_p2 or tmp_150_2_fu_1017_p2);
    tmp_3_fu_631_p1 <= SBUS_data_load_3_reg_2014(6 - 1 downto 0);
    tmp_40_fu_930_p3 <= 
        tmp_47_cast_fu_922_p3 when (tmp_37_fu_916_p2(0) = '1') else 
        ap_phi_reg_pp0_iter0_p_Val2_23_reg_514;
    tmp_41_fu_1152_p2 <= (tmp_151_3_fu_1146_p2 or tmp_150_3_fu_1140_p2);
    tmp_43_fu_1324_p2 <= (tmp_151_4_fu_1318_p2 or tmp_146_4_fu_1312_p2);
    tmp_45_fu_1496_p2 <= (tmp_151_5_fu_1490_p2 or tmp_146_5_fu_1484_p2);
    tmp_46_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_852_p3),32));
    tmp_46_fu_852_p3 <= (ap_phi_mux_p_Val2_29_phi_fu_508_p4 & ap_const_lv16_0);
    tmp_47_cast_fu_922_p3 <= 
        ap_const_lv11_C8 when (tmp_150_1_fu_904_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_47_fu_1382_p4 <= neg_mul2_fu_1377_p2(90 downto 72);
    tmp_48_cast_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_956_p3),32));
    tmp_48_fu_956_p3 <= (ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 & ap_const_lv16_0);
    tmp_49_fu_1069_p3 <= (p_Val2_24_reg_523 & ap_const_lv16_0);
    tmp_4_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_648_p4),8));
    tmp_4_i1_fu_1092_p3 <= (tmp_42_reg_2228 & ap_const_lv16_0);
    tmp_4_i2_fu_1264_p3 <= (tmp_62_reg_2270 & ap_const_lv16_0);
    tmp_4_i3_fu_1436_p3 <= (tmp_68_reg_2318 & ap_const_lv16_0);
    tmp_4_i4_fu_1608_p3 <= (tmp_74_reg_2366 & ap_const_lv16_0);
    tmp_4_i5_fu_1727_p3 <= (tmp_80_reg_2414 & ap_const_lv16_0);
    tmp_4_i_fu_969_p3 <= (tmp_33_reg_2197 & ap_const_lv16_0);
    tmp_50_cast_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1069_p3),32));
    tmp_50_fu_1192_p3 <= (p_Val2_25_reg_533 & ap_const_lv16_0);
    tmp_51_fu_1364_p3 <= (p_Val2_26_reg_543 & ap_const_lv16_0);
    tmp_52_cast_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_1192_p3),32));
    tmp_52_fu_1536_p3 <= (p_Val2_27_reg_553 & ap_const_lv16_0);
    tmp_53_fu_1656_p3 <= (p_Val2_28_reg_2296 & ap_const_lv3_0);
    tmp_54_cast_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1364_p3),32));
    tmp_54_fu_1744_p3 <= (p_Val2_6_reg_2344 & ap_const_lv3_0);
    tmp_55_fu_1815_p3 <= (p_Val2_10_reg_2392 & ap_const_lv3_0);
    tmp_56_cast_fu_1544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_1536_p3),32));
    tmp_56_fu_1891_p3 <= (p_Val2_15_reg_2435 & ap_const_lv3_0);
    tmp_57_fu_1941_p3 <= (icmp_reg_2498 & ap_const_lv16_0);
        tmp_58_cast_fu_1663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_53_fu_1656_p3),32));

    tmp_58_fu_1965_p3 <= (tmp_87_reg_2519 & ap_const_lv16_0);
    tmp_5_fu_622_p4 <= SBUS_data_load_2_reg_2076(7 downto 3);
        tmp_60_cast_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_fu_1744_p3),32));

    tmp_60_fu_1404_p3 <= 
        neg_ti2_fu_1398_p2 when (tmp_44_reg_2233(0) = '1') else 
        tmp_59_reg_2307;
    tmp_61_fu_1043_p3 <= 
        tmp_67_cast_fu_1035_p3 when (tmp_39_fu_1029_p2(0) = '1') else 
        p_Val2_24_reg_523;
        tmp_62_cast_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_55_fu_1815_p3),32));

        tmp_64_cast_fu_1898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_1891_p3),32));

    tmp_64_fu_1554_p4 <= neg_mul3_fu_1549_p2(90 downto 72);
    tmp_66_cast_fu_1948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1941_p3),32));
    tmp_66_fu_1576_p3 <= 
        neg_ti3_fu_1570_p2 when (tmp_63_reg_2275(0) = '1') else 
        tmp_65_reg_2355;
    tmp_67_cast_fu_1035_p3 <= 
        ap_const_lv11_C8 when (tmp_150_2_fu_1017_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_67_fu_1166_p3 <= 
        tmp_76_cast_fu_1158_p3 when (tmp_41_fu_1152_p2(0) = '1') else 
        p_Val2_25_reg_533;
    tmp_68_cast_fu_1972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_1965_p3),32));
    tmp_6_fu_648_p4 <= SBUS_data_load_3_reg_2014(7 downto 6);
    tmp_70_fu_1673_p4 <= neg_mul5_fu_1668_p2(90 downto 72);
    tmp_72_fu_1695_p3 <= 
        neg_ti4_fu_1689_p2 when (tmp_69_reg_2323(0) = '1') else 
        tmp_71_reg_2403;
    tmp_73_fu_1338_p3 <= 
        tmp_85_cast_fu_1330_p3 when (tmp_43_fu_1324_p2(0) = '1') else 
        p_Val2_26_reg_543;
    tmp_76_cast_fu_1158_p3 <= 
        ap_const_lv11_C8 when (tmp_150_3_fu_1140_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_76_fu_1761_p4 <= neg_mul4_fu_1756_p2(90 downto 72);
    tmp_78_fu_1783_p3 <= 
        neg_ti9_fu_1777_p2 when (tmp_75_reg_2371(0) = '1') else 
        tmp_77_reg_2446;
    tmp_79_fu_1510_p3 <= 
        tmp_94_cast_fu_1502_p3 when (tmp_45_fu_1496_p2(0) = '1') else 
        p_Val2_27_reg_553;
    tmp_7_fu_668_p1 <= SBUS_data_load_5_reg_2087(1 - 1 downto 0);
    tmp_82_fu_1832_p4 <= neg_mul_fu_1827_p2(90 downto 72);
    tmp_84_fu_1854_p3 <= 
        neg_ti_fu_1848_p2 when (tmp_81_reg_2419(0) = '1') else 
        tmp_83_reg_2472;
    tmp_85_cast_fu_1330_p3 <= 
        ap_const_lv11_C8 when (tmp_146_4_fu_1312_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_87_fu_1933_p3 <= 
        tmp_103_cast_fu_1925_p3 when (tmp_1_i6_fu_1920_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_8_fu_661_p3 <= (SBUS_data_load_4_reg_2025 & ap_const_lv2_0);
    tmp_94_cast_fu_1502_p3 <= 
        ap_const_lv11_C8 when (tmp_146_5_fu_1484_p2(0) = '1') else 
        ap_const_lv11_708;
    tmp_9_fu_634_p3 <= (tmp_3_fu_631_p1 & tmp_5_fu_622_p4);
    tmp_fu_563_p2 <= "1" when (SBUS_data_q0 = ap_const_lv8_F) else "0";
    tmp_s_fu_594_p2 <= "1" when (SBUS_data_q0 = ap_const_lv8_0) else "0";
end behav;
