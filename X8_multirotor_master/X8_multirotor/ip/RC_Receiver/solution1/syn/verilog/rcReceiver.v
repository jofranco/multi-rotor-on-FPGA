// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rcReceiver,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=27,HLS_SYN_TPT=23,HLS_SYN_MEM=12,HLS_SYN_DSP=78,HLS_SYN_FF=3454,HLS_SYN_LUT=3770,HLS_VERSION=2018_2}" *)

module rcReceiver (
        ap_clk,
        ap_rst_n,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_TEST_AWVALID,
        s_axi_TEST_AWREADY,
        s_axi_TEST_AWADDR,
        s_axi_TEST_WVALID,
        s_axi_TEST_WREADY,
        s_axi_TEST_WDATA,
        s_axi_TEST_WSTRB,
        s_axi_TEST_ARVALID,
        s_axi_TEST_ARREADY,
        s_axi_TEST_ARADDR,
        s_axi_TEST_RVALID,
        s_axi_TEST_RREADY,
        s_axi_TEST_RDATA,
        s_axi_TEST_RRESP,
        s_axi_TEST_BVALID,
        s_axi_TEST_BREADY,
        s_axi_TEST_BRESP
);

parameter    ap_ST_iter0_fsm_state1 = 23'd1;
parameter    ap_ST_iter0_fsm_state2 = 23'd2;
parameter    ap_ST_iter0_fsm_state3 = 23'd4;
parameter    ap_ST_iter0_fsm_state4 = 23'd8;
parameter    ap_ST_iter0_fsm_state5 = 23'd16;
parameter    ap_ST_iter0_fsm_state6 = 23'd32;
parameter    ap_ST_iter0_fsm_state7 = 23'd64;
parameter    ap_ST_iter0_fsm_state8 = 23'd128;
parameter    ap_ST_iter0_fsm_state9 = 23'd256;
parameter    ap_ST_iter0_fsm_state10 = 23'd512;
parameter    ap_ST_iter0_fsm_state11 = 23'd1024;
parameter    ap_ST_iter0_fsm_state12 = 23'd2048;
parameter    ap_ST_iter0_fsm_state13 = 23'd4096;
parameter    ap_ST_iter0_fsm_state14 = 23'd8192;
parameter    ap_ST_iter0_fsm_state15 = 23'd16384;
parameter    ap_ST_iter0_fsm_state16 = 23'd32768;
parameter    ap_ST_iter0_fsm_state17 = 23'd65536;
parameter    ap_ST_iter0_fsm_state18 = 23'd131072;
parameter    ap_ST_iter0_fsm_state19 = 23'd262144;
parameter    ap_ST_iter0_fsm_state20 = 23'd524288;
parameter    ap_ST_iter0_fsm_state21 = 23'd1048576;
parameter    ap_ST_iter0_fsm_state22 = 23'd2097152;
parameter    ap_ST_iter0_fsm_state23 = 23'd4194304;
parameter    ap_ST_iter1_fsm_state24 = 6'd2;
parameter    ap_ST_iter1_fsm_state25 = 6'd4;
parameter    ap_ST_iter1_fsm_state26 = 6'd8;
parameter    ap_ST_iter1_fsm_state27 = 6'd16;
parameter    ap_ST_iter1_fsm_state28 = 6'd32;
parameter    ap_ST_iter1_fsm_state0 = 6'd1;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_DATA_WIDTH = 32;
parameter    C_S_AXI_TEST_ADDR_WIDTH = 15;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_TARGET_ADDR = 0;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_TEST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_TEST_AWVALID;
output   s_axi_TEST_AWREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_AWADDR;
input   s_axi_TEST_WVALID;
output   s_axi_TEST_WREADY;
input  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_WDATA;
input  [C_S_AXI_TEST_WSTRB_WIDTH - 1:0] s_axi_TEST_WSTRB;
input   s_axi_TEST_ARVALID;
output   s_axi_TEST_ARREADY;
input  [C_S_AXI_TEST_ADDR_WIDTH - 1:0] s_axi_TEST_ARADDR;
output   s_axi_TEST_RVALID;
input   s_axi_TEST_RREADY;
output  [C_S_AXI_TEST_DATA_WIDTH - 1:0] s_axi_TEST_RDATA;
output  [1:0] s_axi_TEST_RRESP;
output   s_axi_TEST_BVALID;
input   s_axi_TEST_BREADY;
output  [1:0] s_axi_TEST_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [22:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [5:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_ready;
wire    ap_CS_iter0_fsm_state23;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
reg   [15:0] OUT_r_WDATA;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [15:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
wire    ap_block_state23_pp0_stage22_iter0;
reg    ap_sig_ioackin_OUT_r_WREADY;
wire    ap_block_state24_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state24;
wire    ap_block_state25_pp0_stage1_iter1;
wire    ap_block_state26_pp0_stage2_iter1;
wire    ap_block_state27_pp0_stage3_iter1;
reg    ap_block_state28_pp0_stage4_iter1;
wire    ap_CS_iter1_fsm_state28;
reg   [4:0] SBUS_data_address0;
reg    SBUS_data_ce0;
wire   [7:0] SBUS_data_q0;
reg   [11:0] test_V_address0;
reg    test_V_ce0;
reg    test_V_we0;
reg   [31:0] test_V_d0;
reg   [10:0] channels_0;
reg   [10:0] channels_1;
reg   [10:0] channels_2;
reg   [10:0] channels_3;
reg   [10:0] channels_4;
reg   [10:0] channels_5;
reg   [31:0] lost;
reg   [31:0] errors;
reg    OUT_r_blk_n_AW;
wire    ap_CS_iter0_fsm_state17;
reg    OUT_r_blk_n_W;
wire    ap_CS_iter0_fsm_state18;
wire    ap_CS_iter0_fsm_state19;
wire    ap_CS_iter0_fsm_state20;
wire    ap_CS_iter0_fsm_state21;
wire    ap_CS_iter0_fsm_state22;
reg    OUT_r_blk_n_B;
reg   [10:0] p_Val2_24_reg_523;
reg   [10:0] p_Val2_25_reg_533;
reg   [10:0] p_Val2_26_reg_543;
reg   [10:0] p_Val2_27_reg_553;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [7:0] SBUS_data_load_3_reg_2014;
wire    ap_CS_iter0_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [7:0] SBUS_data_load_4_reg_2025;
wire    ap_CS_iter0_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [7:0] SBUS_data_load_7_reg_2035;
wire    ap_CS_iter0_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_iter0_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [7:0] SBUS_data_load_8_reg_2051;
wire    ap_CS_iter0_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire   [0:0] tmp_fu_563_p2;
reg   [0:0] tmp_reg_2061;
reg   [7:0] SBUS_data_load_1_reg_2066;
wire    ap_CS_iter0_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [7:0] SBUS_data_load_2_reg_2076;
wire    ap_CS_iter0_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [7:0] SBUS_data_load_5_reg_2087;
wire    ap_CS_iter0_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
reg   [7:0] SBUS_data_load_6_reg_2098;
wire    ap_CS_iter0_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
reg   [7:0] SBUS_data_load_9_reg_2109;
wire    ap_CS_iter0_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_CS_iter0_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [0:0] or_cond_fu_600_p2;
reg   [0:0] or_cond_reg_2154;
reg   [0:0] or_cond_reg_2154_pp0_iter0_reg;
wire   [10:0] tmp_9_fu_634_p3;
wire   [10:0] tmp_13_fu_685_p3;
wire   [10:0] tmp_16_fu_711_p3;
wire   [10:0] tmp_19_fu_737_p3;
wire   [10:0] tmp_26_fu_786_p3;
wire   [27:0] r_V_fu_846_p2;
reg   [27:0] r_V_reg_2183;
wire   [31:0] tmp_46_cast_fu_860_p1;
reg   [0:0] tmp_27_reg_2193;
wire    ap_CS_iter0_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
reg   [0:0] tmp_27_reg_2193_pp0_iter0_reg;
reg   [28:0] tmp_33_reg_2197;
reg   [0:0] tmp_34_reg_2202;
wire   [27:0] r_V_1_fu_950_p2;
reg   [27:0] r_V_1_reg_2208;
wire   [31:0] tmp_48_cast_fu_964_p1;
wire    ap_CS_iter0_fsm_state14;
wire    ap_block_state14_pp0_stage13_iter0;
reg   [28:0] tmp_42_reg_2228;
reg   [0:0] tmp_44_reg_2233;
wire   [27:0] r_V_2_fu_1063_p2;
reg   [27:0] r_V_2_reg_2239;
wire   [31:0] tmp_50_cast_fu_1077_p1;
wire   [90:0] grp_fu_980_p2;
reg   [90:0] mul1_reg_2254;
wire    ap_CS_iter0_fsm_state15;
wire    ap_block_state15_pp0_stage14_iter0;
reg   [18:0] tmp_36_reg_2259;
reg   [28:0] tmp_62_reg_2270;
reg   [0:0] tmp_63_reg_2275;
wire   [27:0] r_V_3_fu_1186_p2;
reg   [27:0] r_V_3_reg_2281;
wire   [31:0] tmp_52_cast_fu_1200_p1;
reg   [15:0] p_Val2_28_reg_2296;
wire    ap_CS_iter0_fsm_state16;
wire    ap_block_state16_pp0_stage15_iter0;
wire   [90:0] grp_fu_1103_p2;
reg   [90:0] mul2_reg_2302;
reg   [18:0] tmp_59_reg_2307;
reg   [28:0] tmp_68_reg_2318;
reg   [0:0] tmp_69_reg_2323;
wire   [27:0] r_V_4_fu_1358_p2;
reg   [27:0] r_V_4_reg_2329;
wire   [31:0] tmp_54_cast_fu_1372_p1;
reg   [15:0] p_Val2_6_reg_2344;
reg    ap_block_state17_pp0_stage16_iter0;
reg    ap_sig_ioackin_OUT_r_AWREADY;
wire   [90:0] grp_fu_1275_p2;
reg   [90:0] mul4_reg_2350;
reg   [18:0] tmp_65_reg_2355;
reg   [28:0] tmp_74_reg_2366;
reg   [0:0] tmp_75_reg_2371;
wire   [27:0] r_V_5_fu_1530_p2;
reg   [27:0] r_V_5_reg_2377;
wire   [31:0] tmp_56_cast_fu_1544_p1;
reg   [15:0] p_Val2_10_reg_2392;
wire    ap_block_state18_pp0_stage17_iter0;
wire   [90:0] grp_fu_1447_p2;
reg   [90:0] mul5_reg_2398;
reg   [18:0] tmp_71_reg_2403;
reg   [28:0] tmp_80_reg_2414;
reg   [0:0] tmp_81_reg_2419;
wire  signed [31:0] tmp_58_cast_fu_1663_p1;
reg   [15:0] p_Val2_15_reg_2435;
wire    ap_block_state19_pp0_stage18_iter0;
wire   [90:0] grp_fu_1619_p2;
reg   [90:0] mul3_reg_2441;
reg   [18:0] tmp_77_reg_2446;
wire  signed [31:0] tmp_60_cast_fu_1751_p1;
wire   [90:0] grp_fu_1738_p2;
reg   [90:0] mul_reg_2467;
wire    ap_block_state20_pp0_stage19_iter0;
reg   [18:0] tmp_83_reg_2472;
reg   [3:0] tmp_85_reg_2478;
wire  signed [31:0] tmp_62_cast_fu_1822_p1;
reg   [15:0] agg_result_i5_reg_2493;
wire    ap_block_state21_pp0_stage20_iter0;
wire   [0:0] icmp_fu_1876_p2;
reg   [0:0] icmp_reg_2498;
reg   [4:0] tmp_86_reg_2504;
wire  signed [31:0] tmp_64_cast_fu_1898_p1;
wire   [1:0] tmp_87_fu_1933_p3;
reg   [1:0] tmp_87_reg_2519;
wire    ap_block_state22_pp0_stage21_iter0;
wire   [31:0] tmp_66_cast_fu_1948_p1;
wire   [31:0] tmp_68_cast_fu_1972_p1;
reg   [10:0] ap_phi_mux_p_Val2_29_phi_fu_508_p4;
wire   [10:0] tmp_2_fu_608_p3;
wire   [10:0] ap_phi_reg_pp0_iter0_p_Val2_29_reg_505;
reg   [10:0] ap_phi_reg_pp0_iter0_p_Val2_23_reg_514;
reg   [10:0] ap_phi_reg_pp0_iter0_p_Val2_24_reg_523;
reg   [10:0] ap_phi_reg_pp0_iter0_p_Val2_25_reg_533;
reg   [10:0] ap_phi_reg_pp0_iter0_p_Val2_26_reg_543;
reg   [10:0] ap_phi_reg_pp0_iter0_p_Val2_27_reg_553;
reg    ap_reg_ioackin_OUT_r_AWREADY;
reg    ap_reg_ioackin_OUT_r_WREADY;
wire   [15:0] p_Val2_42_cast_fu_1910_p1;
wire   [15:0] p_Val2_14_cast_fu_1960_p1;
wire   [31:0] tmp_28_fu_1997_p2;
wire   [31:0] tmp_12_fu_1981_p2;
wire   [0:0] tmp_s_fu_594_p2;
wire   [2:0] tmp_1_fu_605_p1;
wire   [5:0] tmp_3_fu_631_p1;
wire   [4:0] tmp_5_fu_622_p4;
wire   [1:0] tmp_6_fu_648_p4;
wire   [7:0] tmp_4_fu_657_p1;
wire   [9:0] tmp_10_fu_671_p3;
wire   [9:0] tmp_8_fu_661_p3;
wire   [0:0] tmp_7_fu_668_p1;
wire   [9:0] tmp_11_fu_679_p2;
wire   [3:0] tmp_15_fu_708_p1;
wire   [6:0] tmp_14_fu_699_p4;
wire   [6:0] tmp_18_fu_734_p1;
wire   [3:0] tmp_17_fu_725_p4;
wire   [0:0] tmp_20_fu_751_p3;
wire   [7:0] tmp_21_fu_758_p1;
wire   [8:0] tmp_24_fu_772_p3;
wire   [8:0] tmp_22_fu_762_p3;
wire   [1:0] tmp_23_fu_769_p1;
wire   [8:0] tmp_25_fu_780_p2;
wire   [0:0] tmp_29_fu_800_p2;
wire   [0:0] tmp_30_fu_806_p2;
wire   [0:0] tmp_31_fu_812_p2;
wire   [10:0] tmp_32_cast_fu_818_p3;
wire   [10:0] tmp_32_fu_826_p3;
wire   [26:0] p_Val2_s_fu_834_p3;
wire   [27:0] tmp_1_i_cast_fu_842_p1;
wire   [26:0] tmp_46_fu_852_p3;
wire  signed [32:0] r_V_cast_fu_873_p1;
wire   [32:0] p_Val2_1_fu_880_p0;
wire   [47:0] p_Val2_1_fu_880_p2;
wire   [0:0] tmp_150_1_fu_904_p2;
wire   [0:0] tmp_151_1_fu_910_p2;
wire   [0:0] tmp_37_fu_916_p2;
wire   [10:0] tmp_47_cast_fu_922_p3;
wire   [10:0] tmp_40_fu_930_p3;
wire   [26:0] p_Val2_3_fu_938_p3;
wire   [27:0] tmp_1_i1_cast_fu_946_p1;
wire   [26:0] tmp_48_fu_956_p3;
wire  signed [44:0] tmp_4_i_fu_969_p3;
wire   [46:0] grp_fu_980_p1;
wire  signed [32:0] r_V_1_cast_fu_986_p1;
wire   [32:0] p_Val2_4_fu_993_p0;
wire   [47:0] p_Val2_4_fu_993_p2;
wire   [0:0] tmp_150_2_fu_1017_p2;
wire   [0:0] tmp_151_2_fu_1023_p2;
wire   [0:0] tmp_39_fu_1029_p2;
wire   [10:0] tmp_67_cast_fu_1035_p3;
wire   [10:0] tmp_61_fu_1043_p3;
wire   [26:0] p_Val2_7_fu_1051_p3;
wire   [27:0] tmp_1_i2_cast_fu_1059_p1;
wire   [26:0] tmp_49_fu_1069_p3;
wire  signed [44:0] tmp_4_i1_fu_1092_p3;
wire   [46:0] grp_fu_1103_p1;
wire  signed [32:0] r_V_2_cast_fu_1109_p1;
wire   [32:0] p_Val2_8_fu_1116_p0;
wire   [47:0] p_Val2_8_fu_1116_p2;
wire   [0:0] tmp_150_3_fu_1140_p2;
wire   [0:0] tmp_151_3_fu_1146_p2;
wire   [0:0] tmp_41_fu_1152_p2;
wire   [10:0] tmp_76_cast_fu_1158_p3;
wire   [10:0] tmp_67_fu_1166_p3;
wire   [26:0] p_Val2_11_fu_1174_p3;
wire   [27:0] tmp_1_i3_cast_fu_1182_p1;
wire   [26:0] tmp_50_fu_1192_p3;
wire   [90:0] neg_mul1_fu_1205_p2;
wire   [18:0] tmp_35_fu_1210_p4;
wire   [18:0] p_v_v_fu_1220_p3;
wire   [18:0] neg_ti1_fu_1226_p2;
wire   [18:0] tmp_38_fu_1232_p3;
wire   [18:0] p_Val2_2_fu_1238_p2;
wire  signed [44:0] tmp_4_i2_fu_1264_p3;
wire   [46:0] grp_fu_1275_p1;
wire  signed [32:0] r_V_3_cast_fu_1281_p1;
wire   [32:0] p_Val2_12_fu_1288_p0;
wire   [47:0] p_Val2_12_fu_1288_p2;
wire   [0:0] tmp_146_4_fu_1312_p2;
wire   [0:0] tmp_151_4_fu_1318_p2;
wire   [0:0] tmp_43_fu_1324_p2;
wire   [10:0] tmp_85_cast_fu_1330_p3;
wire   [10:0] tmp_73_fu_1338_p3;
wire   [26:0] p_Val2_16_fu_1346_p3;
wire   [27:0] tmp_1_i4_cast_fu_1354_p1;
wire   [26:0] tmp_51_fu_1364_p3;
wire   [90:0] neg_mul2_fu_1377_p2;
wire   [18:0] tmp_47_fu_1382_p4;
wire   [18:0] p_v1_v_fu_1392_p3;
wire   [18:0] neg_ti2_fu_1398_p2;
wire   [18:0] tmp_60_fu_1404_p3;
wire   [18:0] p_Val2_5_fu_1410_p2;
wire  signed [44:0] tmp_4_i3_fu_1436_p3;
wire   [46:0] grp_fu_1447_p1;
wire  signed [32:0] r_V_4_cast_fu_1453_p1;
wire   [32:0] p_Val2_17_fu_1460_p0;
wire   [47:0] p_Val2_17_fu_1460_p2;
wire   [0:0] tmp_146_5_fu_1484_p2;
wire   [0:0] tmp_151_5_fu_1490_p2;
wire   [0:0] tmp_45_fu_1496_p2;
wire   [10:0] tmp_94_cast_fu_1502_p3;
wire   [10:0] tmp_79_fu_1510_p3;
wire   [26:0] p_Val2_19_fu_1518_p3;
wire   [27:0] tmp_1_i5_cast_fu_1526_p1;
wire   [26:0] tmp_52_fu_1536_p3;
wire   [90:0] neg_mul3_fu_1549_p2;
wire   [18:0] tmp_64_fu_1554_p4;
wire   [18:0] p_v2_v_fu_1564_p3;
wire   [18:0] neg_ti3_fu_1570_p2;
wire   [18:0] tmp_66_fu_1576_p3;
wire   [18:0] p_Val2_9_fu_1582_p2;
wire  signed [44:0] tmp_4_i4_fu_1608_p3;
wire   [46:0] grp_fu_1619_p1;
wire  signed [32:0] r_V_5_cast_fu_1625_p1;
wire   [32:0] p_Val2_20_fu_1632_p0;
wire   [47:0] p_Val2_20_fu_1632_p2;
wire   [18:0] tmp_53_fu_1656_p3;
wire   [90:0] neg_mul5_fu_1668_p2;
wire   [18:0] tmp_70_fu_1673_p4;
wire   [18:0] p_v3_v_fu_1683_p3;
wire   [18:0] neg_ti4_fu_1689_p2;
wire   [18:0] tmp_72_fu_1695_p3;
wire   [18:0] p_Val2_13_fu_1701_p2;
wire  signed [44:0] tmp_4_i5_fu_1727_p3;
wire   [46:0] grp_fu_1738_p1;
wire   [18:0] tmp_54_fu_1744_p3;
wire   [90:0] neg_mul4_fu_1756_p2;
wire   [18:0] tmp_76_fu_1761_p4;
wire   [18:0] p_v4_v_fu_1771_p3;
wire   [18:0] neg_ti9_fu_1777_p2;
wire   [18:0] tmp_78_fu_1783_p3;
wire   [18:0] p_Val2_18_fu_1789_p2;
wire   [18:0] tmp_55_fu_1815_p3;
wire   [90:0] neg_mul_fu_1827_p2;
wire   [18:0] tmp_82_fu_1832_p4;
wire   [18:0] p_v5_v_fu_1842_p3;
wire   [18:0] neg_ti_fu_1848_p2;
wire   [18:0] tmp_84_fu_1854_p3;
wire   [18:0] p_Val2_21_fu_1860_p2;
wire   [18:0] tmp_56_fu_1891_p3;
wire   [13:0] p_Val2_22_fu_1903_p3;
wire   [0:0] icmp1_fu_1915_p2;
wire   [0:0] tmp_1_i6_fu_1920_p2;
wire   [1:0] tmp_103_cast_fu_1925_p3;
wire   [16:0] tmp_57_fu_1941_p3;
wire   [14:0] p_Val2_14_fu_1953_p3;
wire   [17:0] tmp_58_fu_1965_p3;
reg    grp_fu_980_ce;
reg    grp_fu_1103_ce;
reg    grp_fu_1275_ce;
reg    grp_fu_1447_ce;
reg    grp_fu_1619_ce;
reg    grp_fu_1738_ce;
reg   [22:0] ap_NS_iter0_fsm;
reg   [5:0] ap_NS_iter1_fsm;
wire   [47:0] p_Val2_12_fu_1288_p00;
wire   [47:0] p_Val2_17_fu_1460_p00;
wire   [47:0] p_Val2_1_fu_880_p00;
wire   [47:0] p_Val2_20_fu_1632_p00;
wire   [47:0] p_Val2_4_fu_993_p00;
wire   [47:0] p_Val2_8_fu_1116_p00;
reg    ap_condition_1692;
reg    ap_condition_477;
reg    ap_condition_1697;
reg    ap_condition_610;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 23'd1;
#0 ap_CS_iter1_fsm = 6'd1;
#0 channels_0 = 11'd0;
#0 channels_1 = 11'd0;
#0 channels_2 = 11'd0;
#0 channels_3 = 11'd0;
#0 channels_4 = 11'd0;
#0 channels_5 = 11'd0;
#0 lost = 32'd0;
#0 errors = 32'd0;
#0 ap_reg_ioackin_OUT_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_OUT_r_WREADY = 1'b0;
end

rcReceiver_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
rcReceiver_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .SBUS_data_address0(SBUS_data_address0),
    .SBUS_data_ce0(SBUS_data_ce0),
    .SBUS_data_q0(SBUS_data_q0)
);

rcReceiver_TEST_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TEST_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TEST_DATA_WIDTH ))
rcReceiver_TEST_s_axi_U(
    .AWVALID(s_axi_TEST_AWVALID),
    .AWREADY(s_axi_TEST_AWREADY),
    .AWADDR(s_axi_TEST_AWADDR),
    .WVALID(s_axi_TEST_WVALID),
    .WREADY(s_axi_TEST_WREADY),
    .WDATA(s_axi_TEST_WDATA),
    .WSTRB(s_axi_TEST_WSTRB),
    .ARVALID(s_axi_TEST_ARVALID),
    .ARREADY(s_axi_TEST_ARREADY),
    .ARADDR(s_axi_TEST_ARADDR),
    .RVALID(s_axi_TEST_RVALID),
    .RREADY(s_axi_TEST_RREADY),
    .RDATA(s_axi_TEST_RDATA),
    .RRESP(s_axi_TEST_RRESP),
    .BVALID(s_axi_TEST_BVALID),
    .BREADY(s_axi_TEST_BREADY),
    .BRESP(s_axi_TEST_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .test_V_address0(test_V_address0),
    .test_V_ce0(test_V_ce0),
    .test_V_we0(test_V_we0),
    .test_V_d0(test_V_d0)
);

rcReceiver_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OUT_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
rcReceiver_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(OUT_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

rcReceiver_mul_45bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
rcReceiver_mul_45bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i_fu_969_p3),
    .din1(grp_fu_980_p1),
    .ce(grp_fu_980_ce),
    .dout(grp_fu_980_p2)
);

rcReceiver_mul_45bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
rcReceiver_mul_45bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i1_fu_1092_p3),
    .din1(grp_fu_1103_p1),
    .ce(grp_fu_1103_ce),
    .dout(grp_fu_1103_p2)
);

rcReceiver_mul_45bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
rcReceiver_mul_45bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i2_fu_1264_p3),
    .din1(grp_fu_1275_p1),
    .ce(grp_fu_1275_ce),
    .dout(grp_fu_1275_p2)
);

rcReceiver_mul_45bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
rcReceiver_mul_45bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i3_fu_1436_p3),
    .din1(grp_fu_1447_p1),
    .ce(grp_fu_1447_ce),
    .dout(grp_fu_1447_p2)
);

rcReceiver_mul_45bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
rcReceiver_mul_45bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i4_fu_1608_p3),
    .din1(grp_fu_1619_p1),
    .ce(grp_fu_1619_ce),
    .dout(grp_fu_1619_p2)
);

rcReceiver_mul_45bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 45 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 91 ))
rcReceiver_mul_45bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i5_fu_1727_p3),
    .din1(grp_fu_1738_p1),
    .ce(grp_fu_1738_ce),
    .dout(grp_fu_1738_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUT_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_iter0_fsm_state17)) begin
            if ((1'b1 == ap_condition_610)) begin
                ap_reg_ioackin_OUT_r_AWREADY <= 1'b0;
            end else if ((1'b1 == ap_condition_1697)) begin
                ap_reg_ioackin_OUT_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_OUT_r_WREADY <= 1'b0;
    end else begin
        if (((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state23)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state22)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state21)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state20)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
            ap_reg_ioackin_OUT_r_WREADY <= 1'b0;
        end else if (((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_iter0_fsm_state23)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_iter0_fsm_state22)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_iter0_fsm_state21)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_iter0_fsm_state20)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_iter0_fsm_state19)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
            ap_reg_ioackin_OUT_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((or_cond_fu_600_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 <= channels_1;
        end else if ((or_cond_fu_600_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 <= tmp_9_fu_634_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((or_cond_fu_600_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_p_Val2_24_reg_523 <= channels_2;
        end else if ((or_cond_fu_600_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_p_Val2_24_reg_523 <= tmp_13_fu_685_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((or_cond_fu_600_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_p_Val2_25_reg_533 <= channels_3;
        end else if ((or_cond_fu_600_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_p_Val2_25_reg_533 <= tmp_16_fu_711_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((or_cond_fu_600_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_p_Val2_26_reg_543 <= channels_4;
        end else if ((or_cond_fu_600_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_p_Val2_26_reg_543 <= tmp_19_fu_737_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((or_cond_fu_600_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_p_Val2_27_reg_553 <= channels_5;
        end else if ((or_cond_fu_600_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_p_Val2_27_reg_553 <= tmp_26_fu_786_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state7))) begin
        SBUS_data_load_1_reg_2066 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state8))) begin
        SBUS_data_load_2_reg_2076 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        SBUS_data_load_3_reg_2014 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state3))) begin
        SBUS_data_load_4_reg_2025 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state9))) begin
        SBUS_data_load_5_reg_2087 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state10))) begin
        SBUS_data_load_6_reg_2098 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        SBUS_data_load_7_reg_2035 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state5))) begin
        SBUS_data_load_8_reg_2051 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state11))) begin
        SBUS_data_load_9_reg_2109 <= SBUS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state21))) begin
        agg_result_i5_reg_2493 <= {{p_Val2_21_fu_1860_p2[18:3]}};
        icmp_reg_2498 <= icmp_fu_1876_p2;
        tmp_86_reg_2504 <= {{p_Val2_21_fu_1860_p2[18:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (or_cond_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state12))) begin
        channels_0 <= tmp_2_fu_608_p3;
        channels_1 <= tmp_9_fu_634_p3;
        channels_2 <= tmp_13_fu_685_p3;
        channels_3 <= tmp_16_fu_711_p3;
        channels_4 <= tmp_19_fu_737_p3;
        channels_5 <= tmp_26_fu_786_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_2154_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID))) begin
        errors <= tmp_12_fu_1981_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_reg_2193_pp0_iter0_reg == 1'd1) & (or_cond_reg_2154_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID))) begin
        lost <= tmp_28_fu_1997_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state15))) begin
        mul1_reg_2254 <= grp_fu_980_p2;
        r_V_3_reg_2281[27 : 16] <= r_V_3_fu_1186_p2[27 : 16];
        tmp_36_reg_2259 <= {{grp_fu_980_p2[90:72]}};
        tmp_62_reg_2270 <= {{p_Val2_8_fu_1116_p2[44:16]}};
        tmp_63_reg_2275 <= p_Val2_8_fu_1116_p2[32'd44];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state16))) begin
        mul2_reg_2302 <= grp_fu_1103_p2;
        p_Val2_28_reg_2296 <= {{p_Val2_2_fu_1238_p2[18:3]}};
        r_V_4_reg_2329[27 : 16] <= r_V_4_fu_1358_p2[27 : 16];
        tmp_59_reg_2307 <= {{grp_fu_1103_p2[90:72]}};
        tmp_68_reg_2318 <= {{p_Val2_12_fu_1288_p2[44:16]}};
        tmp_69_reg_2323 <= p_Val2_12_fu_1288_p2[32'd44];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19))) begin
        mul3_reg_2441 <= grp_fu_1619_p2;
        p_Val2_15_reg_2435 <= {{p_Val2_13_fu_1701_p2[18:3]}};
        tmp_77_reg_2446 <= {{grp_fu_1619_p2[90:72]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state17))) begin
        mul4_reg_2350 <= grp_fu_1275_p2;
        p_Val2_6_reg_2344 <= {{p_Val2_5_fu_1410_p2[18:3]}};
        r_V_5_reg_2377[27 : 16] <= r_V_5_fu_1530_p2[27 : 16];
        tmp_65_reg_2355 <= {{grp_fu_1275_p2[90:72]}};
        tmp_74_reg_2366 <= {{p_Val2_17_fu_1460_p2[44:16]}};
        tmp_75_reg_2371 <= p_Val2_17_fu_1460_p2[32'd44];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18))) begin
        mul5_reg_2398 <= grp_fu_1447_p2;
        p_Val2_10_reg_2392 <= {{p_Val2_9_fu_1582_p2[18:3]}};
        tmp_71_reg_2403 <= {{grp_fu_1447_p2[90:72]}};
        tmp_80_reg_2414 <= {{p_Val2_20_fu_1632_p2[44:16]}};
        tmp_81_reg_2419 <= p_Val2_20_fu_1632_p2[32'd44];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state20))) begin
        mul_reg_2467 <= grp_fu_1738_p2;
        tmp_83_reg_2472 <= {{grp_fu_1738_p2[90:72]}};
        tmp_85_reg_2478 <= {{p_Val2_18_fu_1789_p2[18:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state12))) begin
        or_cond_reg_2154 <= or_cond_fu_600_p2;
        r_V_reg_2183[27 : 16] <= r_V_fu_846_p2[27 : 16];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state23))) begin
        or_cond_reg_2154_pp0_iter0_reg <= or_cond_reg_2154;
        tmp_27_reg_2193_pp0_iter0_reg <= tmp_27_reg_2193;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state13))) begin
        p_Val2_24_reg_523 <= ap_phi_reg_pp0_iter0_p_Val2_24_reg_523;
        p_Val2_25_reg_533 <= ap_phi_reg_pp0_iter0_p_Val2_25_reg_533;
        p_Val2_26_reg_543 <= ap_phi_reg_pp0_iter0_p_Val2_26_reg_543;
        p_Val2_27_reg_553 <= ap_phi_reg_pp0_iter0_p_Val2_27_reg_553;
        r_V_1_reg_2208[27 : 16] <= r_V_1_fu_950_p2[27 : 16];
        tmp_33_reg_2197 <= {{p_Val2_1_fu_880_p2[44:16]}};
        tmp_34_reg_2202 <= p_Val2_1_fu_880_p2[32'd44];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state14))) begin
        r_V_2_reg_2239[27 : 16] <= r_V_2_fu_1063_p2[27 : 16];
        tmp_42_reg_2228 <= {{p_Val2_4_fu_993_p2[44:16]}};
        tmp_44_reg_2233 <= p_Val2_4_fu_993_p2[32'd44];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (or_cond_reg_2154 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state13))) begin
        tmp_27_reg_2193 <= SBUS_data_q0[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state22))) begin
        tmp_87_reg_2519 <= tmp_87_fu_1933_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state6))) begin
        tmp_reg_2061 <= tmp_fu_563_p2;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (ap_reg_ioackin_OUT_r_AWREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state17))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1692)) begin
        if ((1'b1 == ap_CS_iter0_fsm_state23)) begin
            OUT_r_WDATA = p_Val2_14_cast_fu_1960_p1;
        end else if ((1'b1 == ap_CS_iter0_fsm_state22)) begin
            OUT_r_WDATA = p_Val2_42_cast_fu_1910_p1;
        end else if ((1'b1 == ap_CS_iter0_fsm_state21)) begin
            OUT_r_WDATA = p_Val2_15_reg_2435;
        end else if ((1'b1 == ap_CS_iter0_fsm_state20)) begin
            OUT_r_WDATA = p_Val2_10_reg_2392;
        end else if ((1'b1 == ap_CS_iter0_fsm_state19)) begin
            OUT_r_WDATA = p_Val2_6_reg_2344;
        end else if ((1'b1 == ap_CS_iter0_fsm_state18)) begin
            OUT_r_WDATA = p_Val2_28_reg_2296;
        end else begin
            OUT_r_WDATA = 'bx;
        end
    end else begin
        OUT_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state23)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state22)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state21)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state20)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state19)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state17)) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state28)) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state23) | (1'b1 == ap_CS_iter0_fsm_state22) | (1'b1 == ap_CS_iter0_fsm_state21) | (1'b1 == ap_CS_iter0_fsm_state20) | (1'b1 == ap_CS_iter0_fsm_state19) | (1'b1 == ap_CS_iter0_fsm_state18))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state12)) begin
        SBUS_data_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_iter0_fsm_state11)) begin
        SBUS_data_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_iter0_fsm_state10)) begin
        SBUS_data_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_iter0_fsm_state9)) begin
        SBUS_data_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_iter0_fsm_state8)) begin
        SBUS_data_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_iter0_fsm_state7)) begin
        SBUS_data_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_iter0_fsm_state6)) begin
        SBUS_data_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state5)) begin
        SBUS_data_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_iter0_fsm_state4)) begin
        SBUS_data_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_iter0_fsm_state3)) begin
        SBUS_data_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_iter0_fsm_state2)) begin
        SBUS_data_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        SBUS_data_address0 = 64'd3;
    end else begin
        SBUS_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state1)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state12)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state11)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state10)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state9)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state8)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state7)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state6)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state5)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state4)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state3)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state2)))) begin
        SBUS_data_ce0 = 1'b1;
    end else begin
        SBUS_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state12)) begin
        if ((or_cond_fu_600_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_29_phi_fu_508_p4 = channels_0;
        end else if ((or_cond_fu_600_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_29_phi_fu_508_p4 = tmp_2_fu_608_p3;
        end else begin
            ap_phi_mux_p_Val2_29_phi_fu_508_p4 = ap_phi_reg_pp0_iter0_p_Val2_29_reg_505;
        end
    end else begin
        ap_phi_mux_p_Val2_29_phi_fu_508_p4 = ap_phi_reg_pp0_iter0_p_Val2_29_reg_505;
    end
end

always @ (*) begin
    if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUT_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_OUT_r_AWREADY = OUT_r_AWREADY;
    end else begin
        ap_sig_ioackin_OUT_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_OUT_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_OUT_r_WREADY = OUT_r_WREADY;
    end else begin
        ap_sig_ioackin_OUT_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state16)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state15)))) begin
        grp_fu_1103_ce = 1'b1;
    end else begin
        grp_fu_1103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state16)) | (~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state17)))) begin
        grp_fu_1275_ce = 1'b1;
    end else begin
        grp_fu_1275_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state17)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
        grp_fu_1447_ce = 1'b1;
    end else begin
        grp_fu_1447_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
        grp_fu_1619_ce = 1'b1;
    end else begin
        grp_fu_1619_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state20)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19)))) begin
        grp_fu_1738_ce = 1'b1;
    end else begin
        grp_fu_1738_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state15)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state14)))) begin
        grp_fu_980_ce = 1'b1;
    end else begin
        grp_fu_980_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state23)) begin
        test_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_iter0_fsm_state22)) begin
        test_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_iter0_fsm_state21)) begin
        test_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_iter0_fsm_state20)) begin
        test_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_iter0_fsm_state19)) begin
        test_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_iter0_fsm_state18)) begin
        test_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_iter0_fsm_state17)) begin
        test_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_iter0_fsm_state16)) begin
        test_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_iter0_fsm_state15)) begin
        test_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_iter0_fsm_state14)) begin
        test_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_iter0_fsm_state13)) begin
        test_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state12)) begin
        test_V_address0 = 64'd0;
    end else begin
        test_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state24) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state23)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state16)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state15)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state14)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state13)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state12)) | (~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state17)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state22)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state21)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state20)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
        test_V_ce0 = 1'b1;
    end else begin
        test_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state23)) begin
        test_V_d0 = tmp_68_cast_fu_1972_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state22)) begin
        test_V_d0 = tmp_66_cast_fu_1948_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state21)) begin
        test_V_d0 = tmp_64_cast_fu_1898_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state20)) begin
        test_V_d0 = tmp_62_cast_fu_1822_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state19)) begin
        test_V_d0 = tmp_60_cast_fu_1751_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state18)) begin
        test_V_d0 = tmp_58_cast_fu_1663_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state17)) begin
        test_V_d0 = tmp_56_cast_fu_1544_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state16)) begin
        test_V_d0 = tmp_54_cast_fu_1372_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state15)) begin
        test_V_d0 = tmp_52_cast_fu_1200_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state14)) begin
        test_V_d0 = tmp_50_cast_fu_1077_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state13)) begin
        test_V_d0 = tmp_48_cast_fu_964_p1;
    end else if ((1'b1 == ap_CS_iter0_fsm_state12)) begin
        test_V_d0 = tmp_46_cast_fu_860_p1;
    end else begin
        test_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state23)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state16)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state15)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state14)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state13)) | (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state12)) | (~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state17)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state22)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state21)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state20)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19)) | (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18)))) begin
        test_V_we0 = 1'b1;
    end else begin
        test_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end
        end
        ap_ST_iter0_fsm_state2 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state3;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end
        end
        ap_ST_iter0_fsm_state3 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state3))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state4;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state3;
            end
        end
        ap_ST_iter0_fsm_state4 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state5;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state4;
            end
        end
        ap_ST_iter0_fsm_state5 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state5))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state6;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state5;
            end
        end
        ap_ST_iter0_fsm_state6 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state6))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state7;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state6;
            end
        end
        ap_ST_iter0_fsm_state7 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state7))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state8;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state7;
            end
        end
        ap_ST_iter0_fsm_state8 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state8))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state9;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state8;
            end
        end
        ap_ST_iter0_fsm_state9 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state9))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state10;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state9;
            end
        end
        ap_ST_iter0_fsm_state10 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state10))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state11;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state10;
            end
        end
        ap_ST_iter0_fsm_state11 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state11))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state12;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state11;
            end
        end
        ap_ST_iter0_fsm_state12 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state12))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state13;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state12;
            end
        end
        ap_ST_iter0_fsm_state13 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state13))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state14;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state13;
            end
        end
        ap_ST_iter0_fsm_state14 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state14))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state15;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state14;
            end
        end
        ap_ST_iter0_fsm_state15 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state15))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state16;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state15;
            end
        end
        ap_ST_iter0_fsm_state16 : begin
            if ((~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state16))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state17;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state16;
            end
        end
        ap_ST_iter0_fsm_state17 : begin
            if ((~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state17))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state18;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state17;
            end
        end
        ap_ST_iter0_fsm_state18 : begin
            if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state18))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state19;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state18;
            end
        end
        ap_ST_iter0_fsm_state19 : begin
            if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state19))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state20;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state19;
            end
        end
        ap_ST_iter0_fsm_state20 : begin
            if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state20))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state21;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state20;
            end
        end
        ap_ST_iter0_fsm_state21 : begin
            if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state21))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state22;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state21;
            end
        end
        ap_ST_iter0_fsm_state22 : begin
            if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state22))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state23;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state22;
            end
        end
        ap_ST_iter0_fsm_state23 : begin
            if (~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state23;
            end
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state24 : begin
            ap_NS_iter1_fsm = ap_ST_iter1_fsm_state25;
        end
        ap_ST_iter1_fsm_state25 : begin
            ap_NS_iter1_fsm = ap_ST_iter1_fsm_state26;
        end
        ap_ST_iter1_fsm_state26 : begin
            ap_NS_iter1_fsm = ap_ST_iter1_fsm_state27;
        end
        ap_ST_iter1_fsm_state27 : begin
            ap_NS_iter1_fsm = ap_ST_iter1_fsm_state28;
        end
        ap_ST_iter1_fsm_state28 : begin
            if (((1'b1 == ap_CS_iter0_fsm_state23) & (ap_sig_ioackin_OUT_r_WREADY == 1'b1) & (1'b1 == OUT_r_BVALID))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state24;
            end else if (((1'b1 == OUT_r_BVALID) & ((1'b0 == ap_CS_iter0_fsm_state23) | ((ap_sig_ioackin_OUT_r_WREADY == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state23))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state28;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_sig_ioackin_OUT_r_WREADY == 1'b0) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == ap_CS_iter0_fsm_state23))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state24;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter0_fsm_state10 = ap_CS_iter0_fsm[32'd9];

assign ap_CS_iter0_fsm_state11 = ap_CS_iter0_fsm[32'd10];

assign ap_CS_iter0_fsm_state12 = ap_CS_iter0_fsm[32'd11];

assign ap_CS_iter0_fsm_state13 = ap_CS_iter0_fsm[32'd12];

assign ap_CS_iter0_fsm_state14 = ap_CS_iter0_fsm[32'd13];

assign ap_CS_iter0_fsm_state15 = ap_CS_iter0_fsm[32'd14];

assign ap_CS_iter0_fsm_state16 = ap_CS_iter0_fsm[32'd15];

assign ap_CS_iter0_fsm_state17 = ap_CS_iter0_fsm[32'd16];

assign ap_CS_iter0_fsm_state18 = ap_CS_iter0_fsm[32'd17];

assign ap_CS_iter0_fsm_state19 = ap_CS_iter0_fsm[32'd18];

assign ap_CS_iter0_fsm_state2 = ap_CS_iter0_fsm[32'd1];

assign ap_CS_iter0_fsm_state20 = ap_CS_iter0_fsm[32'd19];

assign ap_CS_iter0_fsm_state21 = ap_CS_iter0_fsm[32'd20];

assign ap_CS_iter0_fsm_state22 = ap_CS_iter0_fsm[32'd21];

assign ap_CS_iter0_fsm_state23 = ap_CS_iter0_fsm[32'd22];

assign ap_CS_iter0_fsm_state3 = ap_CS_iter0_fsm[32'd2];

assign ap_CS_iter0_fsm_state4 = ap_CS_iter0_fsm[32'd3];

assign ap_CS_iter0_fsm_state5 = ap_CS_iter0_fsm[32'd4];

assign ap_CS_iter0_fsm_state6 = ap_CS_iter0_fsm[32'd5];

assign ap_CS_iter0_fsm_state7 = ap_CS_iter0_fsm[32'd6];

assign ap_CS_iter0_fsm_state8 = ap_CS_iter0_fsm[32'd7];

assign ap_CS_iter0_fsm_state9 = ap_CS_iter0_fsm[32'd8];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state24 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter1_fsm_state28 = ap_CS_iter1_fsm[32'd5];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage16_iter0 = ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID));
end

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_pp0_stage4_iter1 = (1'b0 == OUT_r_BVALID);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1692 = (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (ap_reg_ioackin_OUT_r_WREADY == 1'b0));
end

always @ (*) begin
    ap_condition_1697 = (~(((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28))) & (1'b1 == OUT_r_AWREADY));
end

always @ (*) begin
    ap_condition_477 = (~((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)) & (1'b1 == ap_CS_iter0_fsm_state12));
end

always @ (*) begin
    ap_condition_610 = ~((ap_sig_ioackin_OUT_r_AWREADY == 1'b0) | ((1'b1 == ap_CS_iter1_fsm_state28) & (1'b1 == OUT_r_BVALID)) | ((1'b0 == OUT_r_BVALID) & (1'b1 == ap_CS_iter1_fsm_state28)));
end

assign ap_phi_reg_pp0_iter0_p_Val2_29_reg_505 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_1103_p1 = 91'd45035996273705;

assign grp_fu_1275_p1 = 91'd45035996273705;

assign grp_fu_1447_p1 = 91'd45035996273705;

assign grp_fu_1619_p1 = 91'd45035996273705;

assign grp_fu_1738_p1 = 91'd45035996273705;

assign grp_fu_980_p1 = 91'd45035996273705;

assign icmp1_fu_1915_p2 = (($signed(tmp_86_reg_2504) < $signed(5'd1)) ? 1'b1 : 1'b0);

assign icmp_fu_1876_p2 = (($signed(tmp_85_reg_2478) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign neg_mul1_fu_1205_p2 = (91'd0 - mul1_reg_2254);

assign neg_mul2_fu_1377_p2 = (91'd0 - mul2_reg_2302);

assign neg_mul3_fu_1549_p2 = (91'd0 - mul4_reg_2350);

assign neg_mul4_fu_1756_p2 = (91'd0 - mul3_reg_2441);

assign neg_mul5_fu_1668_p2 = (91'd0 - mul5_reg_2398);

assign neg_mul_fu_1827_p2 = (91'd0 - mul_reg_2467);

assign neg_ti1_fu_1226_p2 = (19'd0 - p_v_v_fu_1220_p3);

assign neg_ti2_fu_1398_p2 = (19'd0 - p_v1_v_fu_1392_p3);

assign neg_ti3_fu_1570_p2 = (19'd0 - p_v2_v_fu_1564_p3);

assign neg_ti4_fu_1689_p2 = (19'd0 - p_v3_v_fu_1683_p3);

assign neg_ti9_fu_1777_p2 = (19'd0 - p_v4_v_fu_1771_p3);

assign neg_ti_fu_1848_p2 = (19'd0 - p_v5_v_fu_1842_p3);

assign or_cond_fu_600_p2 = (tmp_s_fu_594_p2 & tmp_reg_2061);

assign p_Val2_11_fu_1174_p3 = {{tmp_67_fu_1166_p3}, {16'd0}};

assign p_Val2_12_fu_1288_p0 = p_Val2_12_fu_1288_p00;

assign p_Val2_12_fu_1288_p00 = $unsigned(r_V_3_cast_fu_1281_p1);

assign p_Val2_12_fu_1288_p2 = (p_Val2_12_fu_1288_p0 * $signed('h1FFB8));

assign p_Val2_13_fu_1701_p2 = ($signed(tmp_72_fu_1695_p3) + $signed(19'd458752));

assign p_Val2_14_cast_fu_1960_p1 = p_Val2_14_fu_1953_p3;

assign p_Val2_14_fu_1953_p3 = {{tmp_87_reg_2519}, {13'd0}};

assign p_Val2_16_fu_1346_p3 = {{tmp_73_fu_1338_p3}, {16'd0}};

assign p_Val2_17_fu_1460_p0 = p_Val2_17_fu_1460_p00;

assign p_Val2_17_fu_1460_p00 = $unsigned(r_V_4_cast_fu_1453_p1);

assign p_Val2_17_fu_1460_p2 = (p_Val2_17_fu_1460_p0 * $signed('h1FFB8));

assign p_Val2_18_fu_1789_p2 = ($signed(tmp_78_fu_1783_p3) + $signed(19'd458752));

assign p_Val2_19_fu_1518_p3 = {{tmp_79_fu_1510_p3}, {16'd0}};

assign p_Val2_1_fu_880_p0 = p_Val2_1_fu_880_p00;

assign p_Val2_1_fu_880_p00 = $unsigned(r_V_cast_fu_873_p1);

assign p_Val2_1_fu_880_p2 = (p_Val2_1_fu_880_p0 * $signed('h1FFB8));

assign p_Val2_20_fu_1632_p0 = p_Val2_20_fu_1632_p00;

assign p_Val2_20_fu_1632_p00 = $unsigned(r_V_5_cast_fu_1625_p1);

assign p_Val2_20_fu_1632_p2 = (p_Val2_20_fu_1632_p0 * $signed('h1FFB8));

assign p_Val2_21_fu_1860_p2 = ($signed(tmp_84_fu_1854_p3) + $signed(19'd458752));

assign p_Val2_22_fu_1903_p3 = {{icmp_reg_2498}, {13'd0}};

assign p_Val2_2_fu_1238_p2 = ($signed(tmp_38_fu_1232_p3) + $signed(19'd458752));

assign p_Val2_3_fu_938_p3 = {{tmp_40_fu_930_p3}, {16'd0}};

assign p_Val2_42_cast_fu_1910_p1 = p_Val2_22_fu_1903_p3;

assign p_Val2_4_fu_993_p0 = p_Val2_4_fu_993_p00;

assign p_Val2_4_fu_993_p00 = $unsigned(r_V_1_cast_fu_986_p1);

assign p_Val2_4_fu_993_p2 = (p_Val2_4_fu_993_p0 * $signed('h1FFB8));

assign p_Val2_5_fu_1410_p2 = ($signed(tmp_60_fu_1404_p3) + $signed(19'd458752));

assign p_Val2_7_fu_1051_p3 = {{tmp_61_fu_1043_p3}, {16'd0}};

assign p_Val2_8_fu_1116_p0 = p_Val2_8_fu_1116_p00;

assign p_Val2_8_fu_1116_p00 = $unsigned(r_V_2_cast_fu_1109_p1);

assign p_Val2_8_fu_1116_p2 = (p_Val2_8_fu_1116_p0 * $signed('h1FFB8));

assign p_Val2_9_fu_1582_p2 = ($signed(tmp_66_fu_1576_p3) + $signed(19'd458752));

assign p_Val2_s_fu_834_p3 = {{tmp_32_fu_826_p3}, {16'd0}};

assign p_v1_v_fu_1392_p3 = ((tmp_44_reg_2233[0:0] === 1'b1) ? tmp_47_fu_1382_p4 : tmp_59_reg_2307);

assign p_v2_v_fu_1564_p3 = ((tmp_63_reg_2275[0:0] === 1'b1) ? tmp_64_fu_1554_p4 : tmp_65_reg_2355);

assign p_v3_v_fu_1683_p3 = ((tmp_69_reg_2323[0:0] === 1'b1) ? tmp_70_fu_1673_p4 : tmp_71_reg_2403);

assign p_v4_v_fu_1771_p3 = ((tmp_75_reg_2371[0:0] === 1'b1) ? tmp_76_fu_1761_p4 : tmp_77_reg_2446);

assign p_v5_v_fu_1842_p3 = ((tmp_81_reg_2419[0:0] === 1'b1) ? tmp_82_fu_1832_p4 : tmp_83_reg_2472);

assign p_v_v_fu_1220_p3 = ((tmp_34_reg_2202[0:0] === 1'b1) ? tmp_35_fu_1210_p4 : tmp_36_reg_2259);

assign r_V_1_cast_fu_986_p1 = $signed(r_V_1_reg_2208);

assign r_V_1_fu_950_p2 = ($signed(tmp_1_i1_cast_fu_946_p1) + $signed(28'd255328256));

assign r_V_2_cast_fu_1109_p1 = $signed(r_V_2_reg_2239);

assign r_V_2_fu_1063_p2 = ($signed(tmp_1_i2_cast_fu_1059_p1) + $signed(28'd255328256));

assign r_V_3_cast_fu_1281_p1 = $signed(r_V_3_reg_2281);

assign r_V_3_fu_1186_p2 = ($signed(tmp_1_i3_cast_fu_1182_p1) + $signed(28'd255328256));

assign r_V_4_cast_fu_1453_p1 = $signed(r_V_4_reg_2329);

assign r_V_4_fu_1358_p2 = ($signed(tmp_1_i4_cast_fu_1354_p1) + $signed(28'd255328256));

assign r_V_5_cast_fu_1625_p1 = $signed(r_V_5_reg_2377);

assign r_V_5_fu_1530_p2 = ($signed(tmp_1_i5_cast_fu_1526_p1) + $signed(28'd255328256));

assign r_V_cast_fu_873_p1 = $signed(r_V_reg_2183);

assign r_V_fu_846_p2 = ($signed(tmp_1_i_cast_fu_842_p1) + $signed(28'd255328256));

assign tmp_103_cast_fu_1925_p3 = ((icmp1_fu_1915_p2[0:0] === 1'b1) ? 2'd0 : 2'd1);

assign tmp_10_fu_671_p3 = {{2'd0}, {tmp_4_fu_657_p1}};

assign tmp_11_fu_679_p2 = (tmp_8_fu_661_p3 | tmp_10_fu_671_p3);

assign tmp_12_fu_1981_p2 = (errors + 32'd1);

assign tmp_13_fu_685_p3 = {{tmp_7_fu_668_p1}, {tmp_11_fu_679_p2}};

assign tmp_146_4_fu_1312_p2 = ((p_Val2_26_reg_543 < 11'd200) ? 1'b1 : 1'b0);

assign tmp_146_5_fu_1484_p2 = ((p_Val2_27_reg_553 < 11'd200) ? 1'b1 : 1'b0);

assign tmp_14_fu_699_p4 = {{SBUS_data_load_5_reg_2087[7:1]}};

assign tmp_150_1_fu_904_p2 = ((ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 < 11'd200) ? 1'b1 : 1'b0);

assign tmp_150_2_fu_1017_p2 = ((p_Val2_24_reg_523 < 11'd200) ? 1'b1 : 1'b0);

assign tmp_150_3_fu_1140_p2 = ((p_Val2_25_reg_533 < 11'd200) ? 1'b1 : 1'b0);

assign tmp_151_1_fu_910_p2 = ((ap_phi_reg_pp0_iter0_p_Val2_23_reg_514 > 11'd1800) ? 1'b1 : 1'b0);

assign tmp_151_2_fu_1023_p2 = ((p_Val2_24_reg_523 > 11'd1800) ? 1'b1 : 1'b0);

assign tmp_151_3_fu_1146_p2 = ((p_Val2_25_reg_533 > 11'd1800) ? 1'b1 : 1'b0);

assign tmp_151_4_fu_1318_p2 = ((p_Val2_26_reg_543 > 11'd1800) ? 1'b1 : 1'b0);

assign tmp_151_5_fu_1490_p2 = ((p_Val2_27_reg_553 > 11'd1800) ? 1'b1 : 1'b0);

assign tmp_15_fu_708_p1 = SBUS_data_load_6_reg_2098[3:0];

assign tmp_16_fu_711_p3 = {{tmp_15_fu_708_p1}, {tmp_14_fu_699_p4}};

assign tmp_17_fu_725_p4 = {{SBUS_data_load_6_reg_2098[7:4]}};

assign tmp_18_fu_734_p1 = SBUS_data_load_7_reg_2035[6:0];

assign tmp_19_fu_737_p3 = {{tmp_18_fu_734_p1}, {tmp_17_fu_725_p4}};

assign tmp_1_fu_605_p1 = SBUS_data_load_2_reg_2076[2:0];

assign tmp_1_i1_cast_fu_946_p1 = p_Val2_3_fu_938_p3;

assign tmp_1_i2_cast_fu_1059_p1 = p_Val2_7_fu_1051_p3;

assign tmp_1_i3_cast_fu_1182_p1 = p_Val2_11_fu_1174_p3;

assign tmp_1_i4_cast_fu_1354_p1 = p_Val2_16_fu_1346_p3;

assign tmp_1_i5_cast_fu_1526_p1 = p_Val2_19_fu_1518_p3;

assign tmp_1_i6_fu_1920_p2 = (($signed(agg_result_i5_reg_2493) < $signed(16'd6144)) ? 1'b1 : 1'b0);

assign tmp_1_i_cast_fu_842_p1 = p_Val2_s_fu_834_p3;

assign tmp_20_fu_751_p3 = SBUS_data_load_7_reg_2035[32'd7];

assign tmp_21_fu_758_p1 = tmp_20_fu_751_p3;

assign tmp_22_fu_762_p3 = {{SBUS_data_load_8_reg_2051}, {1'd0}};

assign tmp_23_fu_769_p1 = SBUS_data_load_9_reg_2109[1:0];

assign tmp_24_fu_772_p3 = {{1'd0}, {tmp_21_fu_758_p1}};

assign tmp_25_fu_780_p2 = (tmp_24_fu_772_p3 | tmp_22_fu_762_p3);

assign tmp_26_fu_786_p3 = {{tmp_23_fu_769_p1}, {tmp_25_fu_780_p2}};

assign tmp_28_fu_1997_p2 = (lost + 32'd1);

assign tmp_29_fu_800_p2 = ((ap_phi_mux_p_Val2_29_phi_fu_508_p4 < 11'd200) ? 1'b1 : 1'b0);

assign tmp_2_fu_608_p3 = {{tmp_1_fu_605_p1}, {SBUS_data_load_1_reg_2066}};

assign tmp_30_fu_806_p2 = ((ap_phi_mux_p_Val2_29_phi_fu_508_p4 > 11'd1800) ? 1'b1 : 1'b0);

assign tmp_31_fu_812_p2 = (tmp_30_fu_806_p2 | tmp_29_fu_800_p2);

assign tmp_32_cast_fu_818_p3 = ((tmp_29_fu_800_p2[0:0] === 1'b1) ? 11'd200 : 11'd1800);

assign tmp_32_fu_826_p3 = ((tmp_31_fu_812_p2[0:0] === 1'b1) ? tmp_32_cast_fu_818_p3 : ap_phi_mux_p_Val2_29_phi_fu_508_p4);

assign tmp_35_fu_1210_p4 = {{neg_mul1_fu_1205_p2[90:72]}};

assign tmp_37_fu_916_p2 = (tmp_151_1_fu_910_p2 | tmp_150_1_fu_904_p2);

assign tmp_38_fu_1232_p3 = ((tmp_34_reg_2202[0:0] === 1'b1) ? neg_ti1_fu_1226_p2 : tmp_36_reg_2259);

assign tmp_39_fu_1029_p2 = (tmp_151_2_fu_1023_p2 | tmp_150_2_fu_1017_p2);

assign tmp_3_fu_631_p1 = SBUS_data_load_3_reg_2014[5:0];

assign tmp_40_fu_930_p3 = ((tmp_37_fu_916_p2[0:0] === 1'b1) ? tmp_47_cast_fu_922_p3 : ap_phi_reg_pp0_iter0_p_Val2_23_reg_514);

assign tmp_41_fu_1152_p2 = (tmp_151_3_fu_1146_p2 | tmp_150_3_fu_1140_p2);

assign tmp_43_fu_1324_p2 = (tmp_151_4_fu_1318_p2 | tmp_146_4_fu_1312_p2);

assign tmp_45_fu_1496_p2 = (tmp_151_5_fu_1490_p2 | tmp_146_5_fu_1484_p2);

assign tmp_46_cast_fu_860_p1 = tmp_46_fu_852_p3;

assign tmp_46_fu_852_p3 = {{ap_phi_mux_p_Val2_29_phi_fu_508_p4}, {16'd0}};

assign tmp_47_cast_fu_922_p3 = ((tmp_150_1_fu_904_p2[0:0] === 1'b1) ? 11'd200 : 11'd1800);

assign tmp_47_fu_1382_p4 = {{neg_mul2_fu_1377_p2[90:72]}};

assign tmp_48_cast_fu_964_p1 = tmp_48_fu_956_p3;

assign tmp_48_fu_956_p3 = {{ap_phi_reg_pp0_iter0_p_Val2_23_reg_514}, {16'd0}};

assign tmp_49_fu_1069_p3 = {{p_Val2_24_reg_523}, {16'd0}};

assign tmp_4_fu_657_p1 = tmp_6_fu_648_p4;

assign tmp_4_i1_fu_1092_p3 = {{tmp_42_reg_2228}, {16'd0}};

assign tmp_4_i2_fu_1264_p3 = {{tmp_62_reg_2270}, {16'd0}};

assign tmp_4_i3_fu_1436_p3 = {{tmp_68_reg_2318}, {16'd0}};

assign tmp_4_i4_fu_1608_p3 = {{tmp_74_reg_2366}, {16'd0}};

assign tmp_4_i5_fu_1727_p3 = {{tmp_80_reg_2414}, {16'd0}};

assign tmp_4_i_fu_969_p3 = {{tmp_33_reg_2197}, {16'd0}};

assign tmp_50_cast_fu_1077_p1 = tmp_49_fu_1069_p3;

assign tmp_50_fu_1192_p3 = {{p_Val2_25_reg_533}, {16'd0}};

assign tmp_51_fu_1364_p3 = {{p_Val2_26_reg_543}, {16'd0}};

assign tmp_52_cast_fu_1200_p1 = tmp_50_fu_1192_p3;

assign tmp_52_fu_1536_p3 = {{p_Val2_27_reg_553}, {16'd0}};

assign tmp_53_fu_1656_p3 = {{p_Val2_28_reg_2296}, {3'd0}};

assign tmp_54_cast_fu_1372_p1 = tmp_51_fu_1364_p3;

assign tmp_54_fu_1744_p3 = {{p_Val2_6_reg_2344}, {3'd0}};

assign tmp_55_fu_1815_p3 = {{p_Val2_10_reg_2392}, {3'd0}};

assign tmp_56_cast_fu_1544_p1 = tmp_52_fu_1536_p3;

assign tmp_56_fu_1891_p3 = {{p_Val2_15_reg_2435}, {3'd0}};

assign tmp_57_fu_1941_p3 = {{icmp_reg_2498}, {16'd0}};

assign tmp_58_cast_fu_1663_p1 = $signed(tmp_53_fu_1656_p3);

assign tmp_58_fu_1965_p3 = {{tmp_87_reg_2519}, {16'd0}};

assign tmp_5_fu_622_p4 = {{SBUS_data_load_2_reg_2076[7:3]}};

assign tmp_60_cast_fu_1751_p1 = $signed(tmp_54_fu_1744_p3);

assign tmp_60_fu_1404_p3 = ((tmp_44_reg_2233[0:0] === 1'b1) ? neg_ti2_fu_1398_p2 : tmp_59_reg_2307);

assign tmp_61_fu_1043_p3 = ((tmp_39_fu_1029_p2[0:0] === 1'b1) ? tmp_67_cast_fu_1035_p3 : p_Val2_24_reg_523);

assign tmp_62_cast_fu_1822_p1 = $signed(tmp_55_fu_1815_p3);

assign tmp_64_cast_fu_1898_p1 = $signed(tmp_56_fu_1891_p3);

assign tmp_64_fu_1554_p4 = {{neg_mul3_fu_1549_p2[90:72]}};

assign tmp_66_cast_fu_1948_p1 = tmp_57_fu_1941_p3;

assign tmp_66_fu_1576_p3 = ((tmp_63_reg_2275[0:0] === 1'b1) ? neg_ti3_fu_1570_p2 : tmp_65_reg_2355);

assign tmp_67_cast_fu_1035_p3 = ((tmp_150_2_fu_1017_p2[0:0] === 1'b1) ? 11'd200 : 11'd1800);

assign tmp_67_fu_1166_p3 = ((tmp_41_fu_1152_p2[0:0] === 1'b1) ? tmp_76_cast_fu_1158_p3 : p_Val2_25_reg_533);

assign tmp_68_cast_fu_1972_p1 = tmp_58_fu_1965_p3;

assign tmp_6_fu_648_p4 = {{SBUS_data_load_3_reg_2014[7:6]}};

assign tmp_70_fu_1673_p4 = {{neg_mul5_fu_1668_p2[90:72]}};

assign tmp_72_fu_1695_p3 = ((tmp_69_reg_2323[0:0] === 1'b1) ? neg_ti4_fu_1689_p2 : tmp_71_reg_2403);

assign tmp_73_fu_1338_p3 = ((tmp_43_fu_1324_p2[0:0] === 1'b1) ? tmp_85_cast_fu_1330_p3 : p_Val2_26_reg_543);

assign tmp_76_cast_fu_1158_p3 = ((tmp_150_3_fu_1140_p2[0:0] === 1'b1) ? 11'd200 : 11'd1800);

assign tmp_76_fu_1761_p4 = {{neg_mul4_fu_1756_p2[90:72]}};

assign tmp_78_fu_1783_p3 = ((tmp_75_reg_2371[0:0] === 1'b1) ? neg_ti9_fu_1777_p2 : tmp_77_reg_2446);

assign tmp_79_fu_1510_p3 = ((tmp_45_fu_1496_p2[0:0] === 1'b1) ? tmp_94_cast_fu_1502_p3 : p_Val2_27_reg_553);

assign tmp_7_fu_668_p1 = SBUS_data_load_5_reg_2087[0:0];

assign tmp_82_fu_1832_p4 = {{neg_mul_fu_1827_p2[90:72]}};

assign tmp_84_fu_1854_p3 = ((tmp_81_reg_2419[0:0] === 1'b1) ? neg_ti_fu_1848_p2 : tmp_83_reg_2472);

assign tmp_85_cast_fu_1330_p3 = ((tmp_146_4_fu_1312_p2[0:0] === 1'b1) ? 11'd200 : 11'd1800);

assign tmp_87_fu_1933_p3 = ((tmp_1_i6_fu_1920_p2[0:0] === 1'b1) ? tmp_103_cast_fu_1925_p3 : 2'd2);

assign tmp_8_fu_661_p3 = {{SBUS_data_load_4_reg_2025}, {2'd0}};

assign tmp_94_cast_fu_1502_p3 = ((tmp_146_5_fu_1484_p2[0:0] === 1'b1) ? 11'd200 : 11'd1800);

assign tmp_9_fu_634_p3 = {{tmp_3_fu_631_p1}, {tmp_5_fu_622_p4}};

assign tmp_fu_563_p2 = ((SBUS_data_q0 == 8'd15) ? 1'b1 : 1'b0);

assign tmp_s_fu_594_p2 = ((SBUS_data_q0 == 8'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    r_V_reg_2183[15:0] <= 16'b0000000000000000;
    r_V_1_reg_2208[15:0] <= 16'b0000000000000000;
    r_V_2_reg_2239[15:0] <= 16'b0000000000000000;
    r_V_3_reg_2281[15:0] <= 16'b0000000000000000;
    r_V_4_reg_2329[15:0] <= 16'b0000000000000000;
    r_V_5_reg_2377[15:0] <= 16'b0000000000000000;
end

endmodule //rcReceiver
