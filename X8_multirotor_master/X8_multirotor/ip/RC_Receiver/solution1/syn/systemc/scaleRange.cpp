// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scaleRange.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scaleRange::ap_const_logic_1 = sc_dt::Log_1;
const bool scaleRange::ap_const_boolean_1 = true;
const sc_lv<14> scaleRange::ap_const_lv14_1FF7 = "1111111110111";
const sc_lv<13> scaleRange::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> scaleRange::ap_const_lv32_D = "1101";
const sc_lv<32> scaleRange::ap_const_lv32_25 = "100101";
const sc_lv<77> scaleRange::ap_const_lv77_51EB851EB9 = "101000111101011100001010001111010111001";
const sc_lv<32> scaleRange::ap_const_lv32_3E = "111110";
const sc_lv<32> scaleRange::ap_const_lv32_4C = "1001100";
const sc_lv<24> scaleRange::ap_const_lv24_E70000 = "111001110000000000000000";
const sc_logic scaleRange::ap_const_logic_0 = sc_dt::Log_0;

scaleRange::scaleRange(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rcReceiver_am_addbkb_U1 = new rcReceiver_am_addbkb<1,1,24,24,14,38>("rcReceiver_am_addbkb_U1");
    rcReceiver_am_addbkb_U1->din0(ap_var_for_const0);
    rcReceiver_am_addbkb_U1->din1(grp_fu_119_p1);
    rcReceiver_am_addbkb_U1->din2(grp_fu_119_p2);
    rcReceiver_am_addbkb_U1->dout(grp_fu_119_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_return);
    sensitive << ( destFrom_V_read_reg_128 );
    sensitive << ( ap_ce );
    sensitive << ( tmp_4_cast_reg_133 );

    SC_METHOD(thread_grp_fu_119_p1);
    sensitive << ( x );

    SC_METHOD(thread_grp_fu_119_p2);
    sensitive << ( grp_fu_119_p20 );

    SC_METHOD(thread_grp_fu_119_p20);
    sensitive << ( r_V_fu_60_p2 );

    SC_METHOD(thread_mul_fu_99_p1);
    sensitive << ( mul_fu_99_p10 );

    SC_METHOD(thread_mul_fu_99_p10);
    sensitive << ( tmp_2_fu_87_p3 );

    SC_METHOD(thread_mul_fu_99_p2);
    sensitive << ( mul_fu_99_p1 );

    SC_METHOD(thread_r_V_fu_60_p2);
    sensitive << ( tmp_1_fu_56_p1 );

    SC_METHOD(thread_tmp_1_fu_56_p1);
    sensitive << ( destFrom_V );

    SC_METHOD(thread_tmp_2_fu_87_p3);
    sensitive << ( tmp_fu_78_p4 );

    SC_METHOD(thread_tmp_fu_78_p4);
    sensitive << ( grp_fu_119_p3 );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scaleRange_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, destFrom_V, "(port)destFrom_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, destFrom_V_read_reg_128, "destFrom_V_read_reg_128");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, tmp_4_cast_reg_133, "tmp_4_cast_reg_133");
    sc_trace(mVcdFile, tmp_1_fu_56_p1, "tmp_1_fu_56_p1");
    sc_trace(mVcdFile, r_V_fu_60_p2, "r_V_fu_60_p2");
    sc_trace(mVcdFile, grp_fu_119_p3, "grp_fu_119_p3");
    sc_trace(mVcdFile, tmp_fu_78_p4, "tmp_fu_78_p4");
    sc_trace(mVcdFile, tmp_2_fu_87_p3, "tmp_2_fu_87_p3");
    sc_trace(mVcdFile, mul_fu_99_p1, "mul_fu_99_p1");
    sc_trace(mVcdFile, mul_fu_99_p2, "mul_fu_99_p2");
    sc_trace(mVcdFile, grp_fu_119_p1, "grp_fu_119_p1");
    sc_trace(mVcdFile, grp_fu_119_p2, "grp_fu_119_p2");
    sc_trace(mVcdFile, grp_fu_119_p20, "grp_fu_119_p20");
    sc_trace(mVcdFile, mul_fu_99_p10, "mul_fu_99_p10");
#endif

    }
}

scaleRange::~scaleRange() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete rcReceiver_am_addbkb_U1;
}

void scaleRange::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv24_E70000;
}

void scaleRange::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) {
        destFrom_V_read_reg_128 = destFrom_V.read();
        tmp_4_cast_reg_133 = mul_fu_99_p2.read().range(76, 62);
    }
}

void scaleRange::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scaleRange::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void scaleRange::thread_ap_return() {
    ap_return = (!tmp_4_cast_reg_133.read().is_01() || !destFrom_V_read_reg_128.read().is_01())? sc_lv<15>(): (sc_biguint<15>(tmp_4_cast_reg_133.read()) + sc_biguint<15>(destFrom_V_read_reg_128.read()));
}

void scaleRange::thread_grp_fu_119_p1() {
    grp_fu_119_p1 = esl_concat<11,13>(x.read(), ap_const_lv13_0);
}

void scaleRange::thread_grp_fu_119_p2() {
    grp_fu_119_p2 =  (sc_lv<14>) (grp_fu_119_p20.read());
}

void scaleRange::thread_grp_fu_119_p20() {
    grp_fu_119_p20 = esl_zext<38,14>(r_V_fu_60_p2.read());
}

void scaleRange::thread_mul_fu_99_p1() {
    mul_fu_99_p1 =  (sc_lv<38>) (mul_fu_99_p10.read());
}

void scaleRange::thread_mul_fu_99_p10() {
    mul_fu_99_p10 = esl_zext<77,38>(tmp_2_fu_87_p3.read());
}

void scaleRange::thread_mul_fu_99_p2() {
    mul_fu_99_p2 = (!ap_const_lv77_51EB851EB9.is_01() || !mul_fu_99_p1.read().is_01())? sc_lv<77>(): sc_biguint<77>(ap_const_lv77_51EB851EB9) * sc_biguint<38>(mul_fu_99_p1.read());
}

void scaleRange::thread_r_V_fu_60_p2() {
    r_V_fu_60_p2 = (!ap_const_lv14_1FF7.is_01() || !tmp_1_fu_56_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(ap_const_lv14_1FF7) - sc_biguint<14>(tmp_1_fu_56_p1.read()));
}

void scaleRange::thread_tmp_1_fu_56_p1() {
    tmp_1_fu_56_p1 = destFrom_V.read().range(14-1, 0);
}

void scaleRange::thread_tmp_2_fu_87_p3() {
    tmp_2_fu_87_p3 = esl_concat<25,13>(tmp_fu_78_p4.read(), ap_const_lv13_0);
}

void scaleRange::thread_tmp_fu_78_p4() {
    tmp_fu_78_p4 = grp_fu_119_p3.read().range(37, 13);
}

}

