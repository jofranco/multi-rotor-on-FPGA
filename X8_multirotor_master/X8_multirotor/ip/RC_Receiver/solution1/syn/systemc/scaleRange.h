// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _scaleRange_HH_
#define _scaleRange_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rcReceiver_mul_43bkb.h"

namespace ap_rtl {

struct scaleRange : public sc_module {
    // Port declarations 5
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<11> > x;
    sc_out< sc_lv<13> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    scaleRange(sc_module_name name);
    SC_HAS_PROCESS(scaleRange);

    ~scaleRange();

    sc_trace_file* mVcdFile;

    rcReceiver_mul_43bkb<1,2,43,45,87>* rcReceiver_mul_43bkb_U1;
    sc_signal< sc_lv<27> > r_V_fu_42_p2;
    sc_signal< sc_lv<27> > r_V_reg_94;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< sc_lv<27> > tmp_1_reg_99;
    sc_signal< sc_lv<27> > p_Val2_s_fu_34_p3;
    sc_signal< sc_lv<27> > p_Val2_1_fu_51_p0;
    sc_signal< sc_lv<43> > p_Val2_1_fu_51_p2;
    sc_signal< sc_lv<43> > tmp_4_fu_67_p3;
    sc_signal< sc_lv<43> > grp_fu_78_p0;
    sc_signal< sc_lv<45> > grp_fu_78_p1;
    sc_signal< sc_lv<87> > grp_fu_78_p2;
    sc_signal< sc_logic > grp_fu_78_ce;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<11> > x_int_reg;
    sc_signal< sc_lv<13> > ap_return_int_reg;
    sc_signal< sc_lv<87> > grp_fu_78_p00;
    sc_signal< sc_lv<43> > p_Val2_1_fu_51_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<27> ap_const_lv27_7380000;
    static const sc_lv<43> ap_const_lv43_FFB8;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_2A;
    static const sc_lv<87> ap_const_lv87_A3D70A3D70B;
    static const sc_lv<32> ap_const_lv32_49;
    static const sc_lv<32> ap_const_lv32_55;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_return();
    void thread_grp_fu_78_ce();
    void thread_grp_fu_78_p0();
    void thread_grp_fu_78_p00();
    void thread_grp_fu_78_p1();
    void thread_p_Val2_1_fu_51_p0();
    void thread_p_Val2_1_fu_51_p00();
    void thread_p_Val2_1_fu_51_p2();
    void thread_p_Val2_s_fu_34_p3();
    void thread_r_V_fu_42_p2();
    void thread_tmp_4_fu_67_p3();
};

}

using namespace ap_rtl;

#endif
